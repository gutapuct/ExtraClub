//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Instalment : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual Nullable<decimal> ContribPercent
        {
            get {return _contribPercent;}
            set 
    		{ 
    			if(_contribPercent != value)
    			{
    				_contribPercent = value; 
    				
    				
    
    				OnPropertyChanged("ContribPercent");
    			}
    		}
        }
        private Nullable<decimal> _contribPercent;
    
    
    	[DataMember]
        public virtual Nullable<decimal> ContribAmount
        {
            get {return _contribAmount;}
            set 
    		{ 
    			if(_contribAmount != value)
    			{
    				_contribAmount = value; 
    				
    				
    
    				OnPropertyChanged("ContribAmount");
    			}
    		}
        }
        private Nullable<decimal> _contribAmount;
    
    
    	[DataMember]
        public virtual int Length
        {
            get {return _length;}
            set 
    		{ 
    			if(_length != value)
    			{
    				_length = value; 
    				
    				
    
    				OnPropertyChanged("Length");
    			}
    		}
        }
        private int _length;
    
    
    	[DataMember]
        public virtual decimal AvailableUnitsPercent
        {
            get {return _availableUnitsPercent;}
            set 
    		{ 
    			if(_availableUnitsPercent != value)
    			{
    				_availableUnitsPercent = value; 
    				
    				
    
    				OnPropertyChanged("AvailableUnitsPercent");
    			}
    		}
        }
        private decimal _availableUnitsPercent;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SettingsFolderId
        {
            get {return _settingsFolderId;}
            set 
    		{ 
    			if(_settingsFolderId != value)
    			{
    				_settingsFolderId = value; 
    				
    				
    
    				OnPropertyChanged("SettingsFolderId");
    			}
    		}
        }
        private Nullable<System.Guid> _settingsFolderId;
    
    
    	[DataMember]
        public virtual Nullable<decimal> SecondPercent
        {
            get {return _secondPercent;}
            set 
    		{ 
    			if(_secondPercent != value)
    			{
    				_secondPercent = value; 
    				
    				
    
    				OnPropertyChanged("SecondPercent");
    			}
    		}
        }
        private Nullable<decimal> _secondPercent;
    
    
    	[DataMember]
        public virtual Nullable<int> SecondLength
        {
            get {return _secondLength;}
            set 
    		{ 
    			if(_secondLength != value)
    			{
    				_secondLength = value; 
    				
    				
    
    				OnPropertyChanged("SecondLength");
    			}
    		}
        }
        private Nullable<int> _secondLength;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<Ticket> Tickets
        {
            get
            {
                if (_tickets == null)
                {
                    var newCollection = new FixupCollection<Ticket>();
                    newCollection.CollectionChanged += FixupTickets;
                    _tickets = newCollection;
                }
                return _tickets;
            }
            set
            {
                if (!ReferenceEquals(_tickets, value))
                {
                    var previousValue = _tickets as FixupCollection<Ticket>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTickets;
                    }
                    _tickets = value;
                    var newValue = value as FixupCollection<Ticket>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTickets;
                    }
    				OnPropertyChanged("Tickets");
                }
            }
        }
        private ICollection<Ticket> _tickets;
    
        public virtual ICollection<Company> Companies
        {
            get
            {
                if (_companies == null)
                {
                    var newCollection = new FixupCollection<Company>();
                    newCollection.CollectionChanged += FixupCompanies;
                    _companies = newCollection;
                }
                return _companies;
            }
            set
            {
                if (!ReferenceEquals(_companies, value))
                {
                    var previousValue = _companies as FixupCollection<Company>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCompanies;
                    }
                    _companies = value;
                    var newValue = value as FixupCollection<Company>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCompanies;
                    }
    				OnPropertyChanged("Companies");
                }
            }
        }
        private ICollection<Company> _companies;

        #endregion

        #region Association Fixup
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.Instalments.Contains(this))
            {
                previousValue.Instalments.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.Instalments.Contains(this))
                {
                    CreatedBy.Instalments.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupTickets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Ticket item in e.NewItems)
                {
                    item.Instalment = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Ticket item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instalment, this))
                    {
                        item.Instalment = null;
                    }
                }
            }
        }
    
        private void FixupCompanies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Company item in e.NewItems)
                {
                    if (!item.Instalments.Contains(this))
                    {
                        item.Instalments.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Company item in e.OldItems)
                {
                    if (item.Instalments.Contains(this))
                    {
                        item.Instalments.Remove(this);
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
