//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Ticket : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CustomerId
        {
            get { return _customerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerId != value)
                    {
                        if (Customer != null && Customer.Id != value)
                        {
                            Customer = null;
                        }
                        _customerId = value;
        
        				OnPropertyChanged("CustomerId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _customerId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_divisionId != value)
                    {
                        if (Division != null && Division.Id != value)
                        {
                            Division = null;
                        }
                        _divisionId = value;
        
        				OnPropertyChanged("DivisionId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual System.Guid TicketTypeId
        {
            get { return _ticketTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_ticketTypeId != value)
                    {
                        if (TicketType != null && TicketType.Id != value)
                        {
                            TicketType = null;
                        }
                        _ticketTypeId = value;
        
        				OnPropertyChanged("TicketTypeId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _ticketTypeId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> StartDate
        {
            get {return _startDate;}
            set 
    		{ 
    			if(_startDate != value)
    			{
    				_startDate = value; 
    				
    				if (_startDate.HasValue) _startDate = DateTime.SpecifyKind(_startDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("StartDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _startDate;
    
    
    	[DataMember]
        public virtual decimal Price
        {
            get {return _price;}
            set 
    		{ 
    			if(_price != value)
    			{
    				_price = value; 
    				
    				
    
    				OnPropertyChanged("Price");
    			}
    		}
        }
        private decimal _price;
    
    
    	[DataMember]
        public virtual decimal DiscountPercent
        {
            get {return _discountPercent;}
            set 
    		{ 
    			if(_discountPercent != value)
    			{
    				_discountPercent = value; 
    				
    				
    
    				OnPropertyChanged("DiscountPercent");
    			}
    		}
        }
        private decimal _discountPercent;
    
    
    	[DataMember]
        public virtual decimal UnitsAmount
        {
            get {return _unitsAmount;}
            set 
    		{ 
    			if(_unitsAmount != value)
    			{
    				_unitsAmount = value; 
    				
    				
    
    				OnPropertyChanged("UnitsAmount");
    			}
    		}
        }
        private decimal _unitsAmount;
    
    
    	[DataMember]
        public virtual decimal GuestUnitsAmount
        {
            get {return _guestUnitsAmount;}
            set 
    		{ 
    			if(_guestUnitsAmount != value)
    			{
    				_guestUnitsAmount = value; 
    				
    				
    
    				OnPropertyChanged("GuestUnitsAmount");
    			}
    		}
        }
        private decimal _guestUnitsAmount;
    
    
    	[DataMember]
        public virtual string Number
        {
            get {return _number;}
            set 
    		{ 
    			if(_number != value)
    			{
    				_number = value; 
    				
    				
    
    				OnPropertyChanged("Number");
    			}
    		}
        }
        private string _number;
    
    
    	[DataMember]
        public virtual int Length
        {
            get {return _length;}
            set 
    		{ 
    			if(_length != value)
    			{
    				_length = value; 
    				
    				
    
    				OnPropertyChanged("Length");
    			}
    		}
        }
        private int _length;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> ReturnDate
        {
            get {return _returnDate;}
            set 
    		{ 
    			if(_returnDate != value)
    			{
    				_returnDate = value; 
    				
    				if (_returnDate.HasValue) _returnDate = DateTime.SpecifyKind(_returnDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("ReturnDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _returnDate;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ReturnUserId
        {
            get { return _returnUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_returnUserId != value)
                    {
                        if (ReturnUser != null && ReturnUser.UserId != value)
                        {
                            ReturnUser = null;
                        }
                        _returnUserId = value;
        
        				OnPropertyChanged("ReturnUserId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _returnUserId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> InheritedTicketId
        {
            get { return _inheritedTicketId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_inheritedTicketId != value)
                    {
                        if (InheritedFrom != null && InheritedFrom.Id != value)
                        {
                            InheritedFrom = null;
                        }
                        _inheritedTicketId = value;
        
        				OnPropertyChanged("InheritedTicketId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _inheritedTicketId;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> InstalmentId
        {
            get { return _instalmentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_instalmentId != value)
                    {
                        if (Instalment != null && Instalment.Id != value)
                        {
                            Instalment = null;
                        }
                        _instalmentId = value;
        
        				OnPropertyChanged("InstalmentId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _instalmentId;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> LastInstalmentDay
        {
            get {return _lastInstalmentDay;}
            set 
    		{ 
    			if(_lastInstalmentDay != value)
    			{
    				_lastInstalmentDay = value; 
    				
    				if (_lastInstalmentDay.HasValue) _lastInstalmentDay = DateTime.SpecifyKind(_lastInstalmentDay.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("LastInstalmentDay");
    			}
    		}
        }
        private Nullable<System.DateTime> _lastInstalmentDay;
    
    
    	[DataMember]
        public virtual int FreezesAmount
        {
            get {return _freezesAmount;}
            set 
    		{ 
    			if(_freezesAmount != value)
    			{
    				_freezesAmount = value; 
    				
    				
    
    				OnPropertyChanged("FreezesAmount");
    			}
    		}
        }
        private int _freezesAmount;
    
    
    	[DataMember]
        public virtual Nullable<decimal> ReturnCost
        {
            get {return _returnCost;}
            set 
    		{ 
    			if(_returnCost != value)
    			{
    				_returnCost = value; 
    				
    				
    
    				OnPropertyChanged("ReturnCost");
    			}
    		}
        }
        private Nullable<decimal> _returnCost;
    
    
    	[DataMember]
        public virtual decimal SolariumMinutes
        {
            get {return _solariumMinutes;}
            set 
    		{ 
    			if(_solariumMinutes != value)
    			{
    				_solariumMinutes = value; 
    				
    				
    
    				OnPropertyChanged("SolariumMinutes");
    			}
    		}
        }
        private decimal _solariumMinutes;
    
    
    	[DataMember]
        public virtual bool HasNotify
        {
            get {return _hasNotify;}
            set 
    		{ 
    			if(_hasNotify != value)
    			{
    				_hasNotify = value; 
    				
    				
    
    				OnPropertyChanged("HasNotify");
    			}
    		}
        }
        private bool _hasNotify;
    
    
    	[DataMember]
        public virtual int FirstPmtTypeId
        {
            get {return _firstPmtTypeId;}
            set 
    		{ 
    			if(_firstPmtTypeId != value)
    			{
    				_firstPmtTypeId = value; 
    				
    				
    
    				OnPropertyChanged("FirstPmtTypeId");
    			}
    		}
        }
        private int _firstPmtTypeId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ModifiedBy
        {
            get {return _modifiedBy;}
            set 
    		{ 
    			if(_modifiedBy != value)
    			{
    				_modifiedBy = value; 
    				
    				
    
    				OnPropertyChanged("ModifiedBy");
    			}
    		}
        }
        private Nullable<System.Guid> _modifiedBy;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> ModifiedOn
        {
            get {return _modifiedOn;}
            set 
    		{ 
    			if(_modifiedOn != value)
    			{
    				_modifiedOn = value; 
    				
    				if (_modifiedOn.HasValue) _modifiedOn = DateTime.SpecifyKind(_modifiedOn.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("ModifiedOn");
    			}
    		}
        }
        private Nullable<System.DateTime> _modifiedOn;
    
    
    	[DataMember]
        public virtual Nullable<int> InvoiceNumber
        {
            get {return _invoiceNumber;}
            set 
    		{ 
    			if(_invoiceNumber != value)
    			{
    				_invoiceNumber = value; 
    				
    				
    
    				OnPropertyChanged("InvoiceNumber");
    			}
    		}
        }
        private Nullable<int> _invoiceNumber;
    
    
    	[DataMember]
        public virtual Nullable<decimal> VatAmount
        {
            get {return _vatAmount;}
            set 
    		{ 
    			if(_vatAmount != value)
    			{
    				_vatAmount = value; 
    				
    				
    
    				OnPropertyChanged("VatAmount");
    			}
    		}
        }
        private Nullable<decimal> _vatAmount;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> PlanningInstalmentDay
        {
            get {return _planningInstalmentDay;}
            set 
    		{ 
    			if(_planningInstalmentDay != value)
    			{
    				_planningInstalmentDay = value; 
    				
    				if (_planningInstalmentDay.HasValue) _planningInstalmentDay = DateTime.SpecifyKind(_planningInstalmentDay.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("PlanningInstalmentDay");
    			}
    		}
        }
        private Nullable<System.DateTime> _planningInstalmentDay;
    
    
    	[DataMember]
        public virtual Nullable<decimal> CreditInitialPayment
        {
            get {return _creditInitialPayment;}
            set 
    		{ 
    			if(_creditInitialPayment != value)
    			{
    				_creditInitialPayment = value; 
    				
    				
    
    				OnPropertyChanged("CreditInitialPayment");
    			}
    		}
        }
        private Nullable<decimal> _creditInitialPayment;
    
    
    	[DataMember]
        public virtual string CreditComment
        {
            get {return _creditComment;}
            set 
    		{ 
    			if(_creditComment != value)
    			{
    				_creditComment = value; 
    				
    				
    
    				OnPropertyChanged("CreditComment");
    			}
    		}
        }
        private string _creditComment;
    
    
    	[DataMember]
        public virtual Nullable<decimal> CreditComission
        {
            get {return _creditComission;}
            set 
    		{ 
    			if(_creditComission != value)
    			{
    				_creditComission = value; 
    				
    				
    
    				OnPropertyChanged("CreditComission");
    			}
    		}
        }
        private Nullable<decimal> _creditComission;
    
    
    	[DataMember]
        public virtual string Comment
        {
            get {return _comment;}
            set 
    		{ 
    			if(_comment != value)
    			{
    				_comment = value; 
    				
    				
    
    				OnPropertyChanged("Comment");
    			}
    		}
        }
        private string _comment;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual TicketType TicketType
        {
            get { return _ticketType; }
            set
            {
                if (!ReferenceEquals(_ticketType, value))
                {
                    var previousValue = _ticketType;
                    _ticketType = value;
                    FixupTicketType(previousValue);
                }
            }
        }
        private TicketType _ticketType;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<TicketPayment> TicketPayments
        {
            get
            {
                if (_ticketPayments == null)
                {
                    var newCollection = new FixupCollection<TicketPayment>();
                    newCollection.CollectionChanged += FixupTicketPayments;
                    _ticketPayments = newCollection;
                }
                return _ticketPayments;
            }
            set
            {
                if (!ReferenceEquals(_ticketPayments, value))
                {
                    var previousValue = _ticketPayments as FixupCollection<TicketPayment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketPayments;
                    }
                    _ticketPayments = value;
                    var newValue = value as FixupCollection<TicketPayment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketPayments;
                    }
    				OnPropertyChanged("TicketPayments");
                }
            }
        }
        private ICollection<TicketPayment> _ticketPayments;
    
        public virtual ICollection<TicketFreeze> TicketFreezes
        {
            get
            {
                if (_ticketFreezes == null)
                {
                    var newCollection = new FixupCollection<TicketFreeze>();
                    newCollection.CollectionChanged += FixupTicketFreezes;
                    _ticketFreezes = newCollection;
                }
                return _ticketFreezes;
            }
            set
            {
                if (!ReferenceEquals(_ticketFreezes, value))
                {
                    var previousValue = _ticketFreezes as FixupCollection<TicketFreeze>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketFreezes;
                    }
                    _ticketFreezes = value;
                    var newValue = value as FixupCollection<TicketFreeze>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketFreezes;
                    }
    				OnPropertyChanged("TicketFreezes");
                }
            }
        }
        private ICollection<TicketFreeze> _ticketFreezes;
    
        public virtual User ReturnUser
        {
            get { return _returnUser; }
            set
            {
                if (!ReferenceEquals(_returnUser, value))
                {
                    var previousValue = _returnUser;
                    _returnUser = value;
                    FixupReturnUser(previousValue);
                }
            }
        }
        private User _returnUser;
    
        public virtual ICollection<Ticket> Successors
        {
            get
            {
                if (_successors == null)
                {
                    var newCollection = new FixupCollection<Ticket>();
                    newCollection.CollectionChanged += FixupSuccessors;
                    _successors = newCollection;
                }
                return _successors;
            }
            set
            {
                if (!ReferenceEquals(_successors, value))
                {
                    var previousValue = _successors as FixupCollection<Ticket>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSuccessors;
                    }
                    _successors = value;
                    var newValue = value as FixupCollection<Ticket>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSuccessors;
                    }
    				OnPropertyChanged("Successors");
                }
            }
        }
        private ICollection<Ticket> _successors;
    
        public virtual Ticket InheritedFrom
        {
            get { return _inheritedFrom; }
            set
            {
                if (!ReferenceEquals(_inheritedFrom, value))
                {
                    var previousValue = _inheritedFrom;
                    _inheritedFrom = value;
                    FixupInheritedFrom(previousValue);
                }
            }
        }
        private Ticket _inheritedFrom;
    
        public virtual ICollection<TreatmentEvent> TreatmentEvents
        {
            get
            {
                if (_treatmentEvents == null)
                {
                    var newCollection = new FixupCollection<TreatmentEvent>();
                    newCollection.CollectionChanged += FixupTreatmentEvents;
                    _treatmentEvents = newCollection;
                }
                return _treatmentEvents;
            }
            set
            {
                if (!ReferenceEquals(_treatmentEvents, value))
                {
                    var previousValue = _treatmentEvents as FixupCollection<TreatmentEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentEvents;
                    }
                    _treatmentEvents = value;
                    var newValue = value as FixupCollection<TreatmentEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentEvents;
                    }
    				OnPropertyChanged("TreatmentEvents");
                }
            }
        }
        private ICollection<TreatmentEvent> _treatmentEvents;
    
        public virtual Instalment Instalment
        {
            get { return _instalment; }
            set
            {
                if (!ReferenceEquals(_instalment, value))
                {
                    var previousValue = _instalment;
                    _instalment = value;
                    FixupInstalment(previousValue);
                }
            }
        }
        private Instalment _instalment;
    
        public virtual ICollection<UnitCharge> UnitCharges
        {
            get
            {
                if (_unitCharges == null)
                {
                    var newCollection = new FixupCollection<UnitCharge>();
                    newCollection.CollectionChanged += FixupUnitCharges;
                    _unitCharges = newCollection;
                }
                return _unitCharges;
            }
            set
            {
                if (!ReferenceEquals(_unitCharges, value))
                {
                    var previousValue = _unitCharges as FixupCollection<UnitCharge>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUnitCharges;
                    }
                    _unitCharges = value;
                    var newValue = value as FixupCollection<UnitCharge>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUnitCharges;
                    }
    				OnPropertyChanged("UnitCharges");
                }
            }
        }
        private ICollection<UnitCharge> _unitCharges;
    
        public virtual ICollection<SolariumVisit> SolariumVisits
        {
            get
            {
                if (_solariumVisits == null)
                {
                    var newCollection = new FixupCollection<SolariumVisit>();
                    newCollection.CollectionChanged += FixupSolariumVisits;
                    _solariumVisits = newCollection;
                }
                return _solariumVisits;
            }
            set
            {
                if (!ReferenceEquals(_solariumVisits, value))
                {
                    var previousValue = _solariumVisits as FixupCollection<SolariumVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolariumVisits;
                    }
                    _solariumVisits = value;
                    var newValue = value as FixupCollection<SolariumVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolariumVisits;
                    }
    				OnPropertyChanged("SolariumVisits");
                }
            }
        }
        private ICollection<SolariumVisit> _solariumVisits;
    
        public virtual ICollection<MinutesCharge> MinutesCharges
        {
            get
            {
                if (_minutesCharges == null)
                {
                    var newCollection = new FixupCollection<MinutesCharge>();
                    newCollection.CollectionChanged += FixupMinutesCharges;
                    _minutesCharges = newCollection;
                }
                return _minutesCharges;
            }
            set
            {
                if (!ReferenceEquals(_minutesCharges, value))
                {
                    var previousValue = _minutesCharges as FixupCollection<MinutesCharge>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMinutesCharges;
                    }
                    _minutesCharges = value;
                    var newValue = value as FixupCollection<MinutesCharge>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMinutesCharges;
                    }
    				OnPropertyChanged("MinutesCharges");
                }
            }
        }
        private ICollection<MinutesCharge> _minutesCharges;
    
        public virtual ICollection<TicketCorrection> TicketCorrections
        {
            get
            {
                if (_ticketCorrections == null)
                {
                    var newCollection = new FixupCollection<TicketCorrection>();
                    newCollection.CollectionChanged += FixupTicketCorrections;
                    _ticketCorrections = newCollection;
                }
                return _ticketCorrections;
            }
            set
            {
                if (!ReferenceEquals(_ticketCorrections, value))
                {
                    var previousValue = _ticketCorrections as FixupCollection<TicketCorrection>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketCorrections;
                    }
                    _ticketCorrections = value;
                    var newValue = value as FixupCollection<TicketCorrection>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketCorrections;
                    }
    				OnPropertyChanged("TicketCorrections");
                }
            }
        }
        private ICollection<TicketCorrection> _ticketCorrections;
    
        public virtual ICollection<Email> Emails
        {
            get
            {
                if (_emails == null)
                {
                    var newCollection = new FixupCollection<Email>();
                    newCollection.CollectionChanged += FixupEmails;
                    _emails = newCollection;
                }
                return _emails;
            }
            set
            {
                if (!ReferenceEquals(_emails, value))
                {
                    var previousValue = _emails as FixupCollection<Email>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmails;
                    }
                    _emails = value;
                    var newValue = value as FixupCollection<Email>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmails;
                    }
    				OnPropertyChanged("Emails");
                }
            }
        }
        private ICollection<Email> _emails;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Tickets.Contains(this))
            {
                previousValue.Tickets.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Tickets.Contains(this))
                {
                    Customer.Tickets.Add(this);
                }
                if (CustomerId != Customer.Id)
                {
                    CustomerId = Customer.Id;
                }
            }
        }
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.Tickets.Contains(this))
            {
                previousValue.Tickets.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.Tickets.Contains(this))
                {
                    Division.Tickets.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }
    
        private void FixupTicketType(TicketType previousValue)
        {
            if (previousValue != null && previousValue.Tickets.Contains(this))
            {
                previousValue.Tickets.Remove(this);
            }
    
            if (TicketType != null)
            {
                if (!TicketType.Tickets.Contains(this))
                {
                    TicketType.Tickets.Add(this);
                }
                if (TicketTypeId != TicketType.Id)
                {
                    TicketTypeId = TicketType.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (CreatedBy != null)
            {
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupReturnUser(User previousValue)
        {
            if (ReturnUser != null)
            {
                if (ReturnUserId != ReturnUser.UserId)
                {
                    ReturnUserId = ReturnUser.UserId;
                }
            }
            else if (!_settingFK)
            {
                ReturnUserId = null;
            }
        }
    
        private void FixupInheritedFrom(Ticket previousValue)
        {
            if (previousValue != null && previousValue.Successors.Contains(this))
            {
                previousValue.Successors.Remove(this);
            }
    
            if (InheritedFrom != null)
            {
                if (!InheritedFrom.Successors.Contains(this))
                {
                    InheritedFrom.Successors.Add(this);
                }
                if (InheritedTicketId != InheritedFrom.Id)
                {
                    InheritedTicketId = InheritedFrom.Id;
                }
            }
            else if (!_settingFK)
            {
                InheritedTicketId = null;
            }
        }
    
        private void FixupInstalment(Instalment previousValue)
        {
            if (previousValue != null && previousValue.Tickets.Contains(this))
            {
                previousValue.Tickets.Remove(this);
            }
    
            if (Instalment != null)
            {
                if (!Instalment.Tickets.Contains(this))
                {
                    Instalment.Tickets.Add(this);
                }
                if (InstalmentId != Instalment.Id)
                {
                    InstalmentId = Instalment.Id;
                }
            }
            else if (!_settingFK)
            {
                InstalmentId = null;
            }
        }
    
        private void FixupTicketPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketPayment item in e.NewItems)
                {
                    item.Ticket = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketPayment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Ticket, this))
                    {
                        item.Ticket = null;
                    }
                }
            }
        }
    
        private void FixupTicketFreezes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketFreeze item in e.NewItems)
                {
                    item.Ticket = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketFreeze item in e.OldItems)
                {
                    if (ReferenceEquals(item.Ticket, this))
                    {
                        item.Ticket = null;
                    }
                }
            }
        }
    
        private void FixupSuccessors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Ticket item in e.NewItems)
                {
                    item.InheritedFrom = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Ticket item in e.OldItems)
                {
                    if (ReferenceEquals(item.InheritedFrom, this))
                    {
                        item.InheritedFrom = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentEvent item in e.NewItems)
                {
                    item.Ticket = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Ticket, this))
                    {
                        item.Ticket = null;
                    }
                }
            }
        }
    
        private void FixupUnitCharges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UnitCharge item in e.NewItems)
                {
                    item.Ticket = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UnitCharge item in e.OldItems)
                {
                    if (ReferenceEquals(item.Ticket, this))
                    {
                        item.Ticket = null;
                    }
                }
            }
        }
    
        private void FixupSolariumVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SolariumVisit item in e.NewItems)
                {
                    item.Ticket = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SolariumVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Ticket, this))
                    {
                        item.Ticket = null;
                    }
                }
            }
        }
    
        private void FixupMinutesCharges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MinutesCharge item in e.NewItems)
                {
                    item.Ticket = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MinutesCharge item in e.OldItems)
                {
                    if (ReferenceEquals(item.Ticket, this))
                    {
                        item.Ticket = null;
                    }
                }
            }
        }
    
        private void FixupTicketCorrections(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketCorrection item in e.NewItems)
                {
                    item.Ticket = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketCorrection item in e.OldItems)
                {
                    if (ReferenceEquals(item.Ticket, this))
                    {
                        item.Ticket = null;
                    }
                }
            }
        }
    
        private void FixupEmails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Email item in e.NewItems)
                {
                    item.Ticket = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Email item in e.OldItems)
                {
                    if (ReferenceEquals(item.Ticket, this))
                    {
                        item.Ticket = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
