//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class TreatmentProgram : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual string ProgramName
        {
            get {return _programName;}
            set 
    		{ 
    			if(_programName != value)
    			{
    				_programName = value; 
    				
    				
    
    				OnPropertyChanged("ProgramName");
    			}
    		}
        }
        private string _programName;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> NextProgramId
        {
            get { return _nextProgramId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_nextProgramId != value)
                    {
                        if (NextProgram != null && NextProgram.Id != value)
                        {
                            NextProgram = null;
                        }
                        _nextProgramId = value;
        
        				OnPropertyChanged("NextProgramId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _nextProgramId;
    
    
    	[DataMember]
        public virtual bool IsAvail
        {
            get {return _isAvail;}
            set 
    		{ 
    			if(_isAvail != value)
    			{
    				_isAvail = value; 
    				
    				
    
    				OnPropertyChanged("IsAvail");
    			}
    		}
        }
        private bool _isAvail;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SettingsFolderId
        {
            get {return _settingsFolderId;}
            set 
    		{ 
    			if(_settingsFolderId != value)
    			{
    				_settingsFolderId = value; 
    				
    				
    
    				OnPropertyChanged("SettingsFolderId");
    			}
    		}
        }
        private Nullable<System.Guid> _settingsFolderId;
    
    
    	[DataMember]
        public virtual bool IsFixed
        {
            get {return _isFixed;}
            set 
    		{ 
    			if(_isFixed != value)
    			{
    				_isFixed = value; 
    				
    				
    
    				OnPropertyChanged("IsFixed");
    			}
    		}
        }
        private bool _isFixed;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual ICollection<TreatmentProgramLine> TreatmentProgramLines
        {
            get
            {
                if (_treatmentProgramLines == null)
                {
                    var newCollection = new FixupCollection<TreatmentProgramLine>();
                    newCollection.CollectionChanged += FixupTreatmentProgramLines;
                    _treatmentProgramLines = newCollection;
                }
                return _treatmentProgramLines;
            }
            set
            {
                if (!ReferenceEquals(_treatmentProgramLines, value))
                {
                    var previousValue = _treatmentProgramLines as FixupCollection<TreatmentProgramLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentProgramLines;
                    }
                    _treatmentProgramLines = value;
                    var newValue = value as FixupCollection<TreatmentProgramLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentProgramLines;
                    }
    				OnPropertyChanged("TreatmentProgramLines");
                }
            }
        }
        private ICollection<TreatmentProgramLine> _treatmentProgramLines;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<TreatmentProgram> PrevPrograms
        {
            get
            {
                if (_prevPrograms == null)
                {
                    var newCollection = new FixupCollection<TreatmentProgram>();
                    newCollection.CollectionChanged += FixupPrevPrograms;
                    _prevPrograms = newCollection;
                }
                return _prevPrograms;
            }
            set
            {
                if (!ReferenceEquals(_prevPrograms, value))
                {
                    var previousValue = _prevPrograms as FixupCollection<TreatmentProgram>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPrevPrograms;
                    }
                    _prevPrograms = value;
                    var newValue = value as FixupCollection<TreatmentProgram>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPrevPrograms;
                    }
    				OnPropertyChanged("PrevPrograms");
                }
            }
        }
        private ICollection<TreatmentProgram> _prevPrograms;
    
        public virtual TreatmentProgram NextProgram
        {
            get { return _nextProgram; }
            set
            {
                if (!ReferenceEquals(_nextProgram, value))
                {
                    var previousValue = _nextProgram;
                    _nextProgram = value;
                    FixupNextProgram(previousValue);
                }
            }
        }
        private TreatmentProgram _nextProgram;
    
        public virtual ICollection<TreatmentEvent> TreatmentEvents
        {
            get
            {
                if (_treatmentEvents == null)
                {
                    var newCollection = new FixupCollection<TreatmentEvent>();
                    newCollection.CollectionChanged += FixupTreatmentEvents;
                    _treatmentEvents = newCollection;
                }
                return _treatmentEvents;
            }
            set
            {
                if (!ReferenceEquals(_treatmentEvents, value))
                {
                    var previousValue = _treatmentEvents as FixupCollection<TreatmentEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentEvents;
                    }
                    _treatmentEvents = value;
                    var newValue = value as FixupCollection<TreatmentEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentEvents;
                    }
    				OnPropertyChanged("TreatmentEvents");
                }
            }
        }
        private ICollection<TreatmentEvent> _treatmentEvents;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.TreatmentPrograms.Contains(this))
            {
                previousValue.TreatmentPrograms.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.TreatmentPrograms.Contains(this))
                {
                    Company.TreatmentPrograms.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.TreatmentPrograms.Contains(this))
            {
                previousValue.TreatmentPrograms.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.TreatmentPrograms.Contains(this))
                {
                    CreatedBy.TreatmentPrograms.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupNextProgram(TreatmentProgram previousValue)
        {
            if (previousValue != null && previousValue.PrevPrograms.Contains(this))
            {
                previousValue.PrevPrograms.Remove(this);
            }
    
            if (NextProgram != null)
            {
                if (!NextProgram.PrevPrograms.Contains(this))
                {
                    NextProgram.PrevPrograms.Add(this);
                }
                if (NextProgramId != NextProgram.Id)
                {
                    NextProgramId = NextProgram.Id;
                }
            }
            else if (!_settingFK)
            {
                NextProgramId = null;
            }
        }
    
        private void FixupTreatmentProgramLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentProgramLine item in e.NewItems)
                {
                    item.TreatmentProgram = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentProgramLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.TreatmentProgram, this))
                    {
                        item.TreatmentProgram = null;
                    }
                }
            }
        }
    
        private void FixupPrevPrograms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentProgram item in e.NewItems)
                {
                    item.NextProgram = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentProgram item in e.OldItems)
                {
                    if (ReferenceEquals(item.NextProgram, this))
                    {
                        item.NextProgram = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentEvent item in e.NewItems)
                {
                    item.TreatmentProgram = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.TreatmentProgram, this))
                    {
                        item.TreatmentProgram = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
