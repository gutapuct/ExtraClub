//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class MinutesCharge : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid TicketId
        {
            get { return _ticketId; }
            set
            {
                if (_ticketId != value)
                {
                    if (Ticket != null && Ticket.Id != value)
                    {
                        Ticket = null;
                    }
                    _ticketId = value;
    
    				OnPropertyChanged("TicketId");
                }
            }
        }
        private System.Guid _ticketId;
    
    
    	[DataMember]
        public virtual decimal MinutesCharged
        {
            get {return _minutesCharged;}
            set 
    		{ 
    			if(_minutesCharged != value)
    			{
    				_minutesCharged = value; 
    				
    				
    
    				OnPropertyChanged("MinutesCharged");
    			}
    		}
        }
        private decimal _minutesCharged;
    
    
    	[DataMember]
        public virtual string Reason
        {
            get {return _reason;}
            set 
    		{ 
    			if(_reason != value)
    			{
    				_reason = value; 
    				
    				
    
    				OnPropertyChanged("Reason");
    			}
    		}
        }
        private string _reason;
    
    
    	[DataMember]
        public virtual System.DateTime Date
        {
            get {return _date;}
            set 
    		{ 
    			if(_date != value)
    			{
    				_date = value; 
    				
    				_date = DateTime.SpecifyKind(_date, DateTimeKind.Local);
    
    				OnPropertyChanged("Date");
    			}
    		}
        }
        private System.DateTime _date;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Ticket Ticket
        {
            get { return _ticket; }
            set
            {
                if (!ReferenceEquals(_ticket, value))
                {
                    var previousValue = _ticket;
                    _ticket = value;
                    FixupTicket(previousValue);
                }
            }
        }
        private Ticket _ticket;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;

        #endregion

        #region Association Fixup
    
        private void FixupTicket(Ticket previousValue)
        {
            if (previousValue != null && previousValue.MinutesCharges.Contains(this))
            {
                previousValue.MinutesCharges.Remove(this);
            }
    
            if (Ticket != null)
            {
                if (!Ticket.MinutesCharges.Contains(this))
                {
                    Ticket.MinutesCharges.Add(this);
                }
                if (TicketId != Ticket.Id)
                {
                    TicketId = Ticket.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.MinutesCharges.Contains(this))
            {
                previousValue.MinutesCharges.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.MinutesCharges.Contains(this))
                {
                    CreatedBy.MinutesCharges.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
