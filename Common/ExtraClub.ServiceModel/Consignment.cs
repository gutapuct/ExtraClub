//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Consignment : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual int Number
        {
            get {return _number;}
            set 
    		{ 
    			if(_number != value)
    			{
    				_number = value; 
    				
    				
    
    				OnPropertyChanged("Number");
    			}
    		}
        }
        private int _number;
    
    
    	[DataMember]
        public virtual System.DateTime Date
        {
            get {return _date;}
            set 
    		{ 
    			if(_date != value)
    			{
    				_date = value; 
    				
    				_date = DateTime.SpecifyKind(_date, DateTimeKind.Local);
    
    				OnPropertyChanged("Date");
    			}
    		}
        }
        private System.DateTime _date;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ProviderId
        {
            get { return _providerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_providerId != value)
                    {
                        if (Provider != null && Provider.Id != value)
                        {
                            Provider = null;
                        }
                        _providerId = value;
        
        				OnPropertyChanged("ProviderId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _providerId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> DivisionId
        {
            get { return _divisionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_divisionId != value)
                    {
                        if (Division != null && Division.Id != value)
                        {
                            Division = null;
                        }
                        _divisionId = value;
        
        				OnPropertyChanged("DivisionId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _divisionId;
    
    
    	[DataMember]
        public virtual string Sdal
        {
            get {return _sdal;}
            set 
    		{ 
    			if(_sdal != value)
    			{
    				_sdal = value; 
    				
    				
    
    				OnPropertyChanged("Sdal");
    			}
    		}
        }
        private string _sdal;
    
    
    	[DataMember]
        public virtual string Prinal
        {
            get {return _prinal;}
            set 
    		{ 
    			if(_prinal != value)
    			{
    				_prinal = value; 
    				
    				
    
    				OnPropertyChanged("Prinal");
    			}
    		}
        }
        private string _prinal;
    
    
    	[DataMember]
        public virtual string Comment
        {
            get {return _comment;}
            set 
    		{ 
    			if(_comment != value)
    			{
    				_comment = value; 
    				
    				
    
    				OnPropertyChanged("Comment");
    			}
    		}
        }
        private string _comment;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual short DocType
        {
            get {return _docType;}
            set 
    		{ 
    			if(_docType != value)
    			{
    				_docType = value; 
    				
    				
    
    				OnPropertyChanged("DocType");
    			}
    		}
        }
        private short _docType;
    
    
    	[DataMember]
        public virtual string IncomeNumber
        {
            get {return _incomeNumber;}
            set 
    		{ 
    			if(_incomeNumber != value)
    			{
    				_incomeNumber = value; 
    				
    				
    
    				OnPropertyChanged("IncomeNumber");
    			}
    		}
        }
        private string _incomeNumber;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> DestinationStorehouseId
        {
            get { return _destinationStorehouseId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_destinationStorehouseId != value)
                    {
                        if (DestinationStorehouse != null && DestinationStorehouse.Id != value)
                        {
                            DestinationStorehouse = null;
                        }
                        _destinationStorehouseId = value;
        
        				OnPropertyChanged("DestinationStorehouseId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _destinationStorehouseId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SourceStorehouseId
        {
            get { return _sourceStorehouseId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sourceStorehouseId != value)
                    {
                        if (SourceStorehouse != null && SourceStorehouse.Id != value)
                        {
                            SourceStorehouse = null;
                        }
                        _sourceStorehouseId = value;
        
        				OnPropertyChanged("SourceStorehouseId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _sourceStorehouseId;
    
    
    	[DataMember]
        public virtual bool IsAsset
        {
            get {return _isAsset;}
            set 
    		{ 
    			if(_isAsset != value)
    			{
    				_isAsset = value; 
    				
    				
    
    				OnPropertyChanged("IsAsset");
    			}
    		}
        }
        private bool _isAsset;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ProviderOrderId
        {
            get { return _providerOrderId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_providerOrderId != value)
                    {
                        if (Consignment1 != null && Consignment1.Id != value)
                        {
                            Consignment1 = null;
                        }
                        _providerOrderId = value;
        
        				OnPropertyChanged("ProviderOrderId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _providerOrderId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual Provider Provider
        {
            get { return _provider; }
            set
            {
                if (!ReferenceEquals(_provider, value))
                {
                    var previousValue = _provider;
                    _provider = value;
                    FixupProvider(previousValue);
                }
            }
        }
        private Provider _provider;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<ConsignmentLine> ConsignmentLines
        {
            get
            {
                if (_consignmentLines == null)
                {
                    var newCollection = new FixupCollection<ConsignmentLine>();
                    newCollection.CollectionChanged += FixupConsignmentLines;
                    _consignmentLines = newCollection;
                }
                return _consignmentLines;
            }
            set
            {
                if (!ReferenceEquals(_consignmentLines, value))
                {
                    var previousValue = _consignmentLines as FixupCollection<ConsignmentLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConsignmentLines;
                    }
                    _consignmentLines = value;
                    var newValue = value as FixupCollection<ConsignmentLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConsignmentLines;
                    }
    				OnPropertyChanged("ConsignmentLines");
                }
            }
        }
        private ICollection<ConsignmentLine> _consignmentLines;
    
        public virtual Storehouse DestinationStorehouse
        {
            get { return _destinationStorehouse; }
            set
            {
                if (!ReferenceEquals(_destinationStorehouse, value))
                {
                    var previousValue = _destinationStorehouse;
                    _destinationStorehouse = value;
                    FixupDestinationStorehouse(previousValue);
                }
            }
        }
        private Storehouse _destinationStorehouse;
    
        public virtual Storehouse SourceStorehouse
        {
            get { return _sourceStorehouse; }
            set
            {
                if (!ReferenceEquals(_sourceStorehouse, value))
                {
                    var previousValue = _sourceStorehouse;
                    _sourceStorehouse = value;
                    FixupSourceStorehouse(previousValue);
                }
            }
        }
        private Storehouse _sourceStorehouse;
    
        public virtual ICollection<Consignment> Consignments1
        {
            get
            {
                if (_consignments1 == null)
                {
                    var newCollection = new FixupCollection<Consignment>();
                    newCollection.CollectionChanged += FixupConsignments1;
                    _consignments1 = newCollection;
                }
                return _consignments1;
            }
            set
            {
                if (!ReferenceEquals(_consignments1, value))
                {
                    var previousValue = _consignments1 as FixupCollection<Consignment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConsignments1;
                    }
                    _consignments1 = value;
                    var newValue = value as FixupCollection<Consignment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConsignments1;
                    }
    				OnPropertyChanged("Consignments1");
                }
            }
        }
        private ICollection<Consignment> _consignments1;
    
        public virtual Consignment Consignment1
        {
            get { return _consignment1; }
            set
            {
                if (!ReferenceEquals(_consignment1, value))
                {
                    var previousValue = _consignment1;
                    _consignment1 = value;
                    FixupConsignment1(previousValue);
                }
            }
        }
        private Consignment _consignment1;
    
        public virtual ICollection<ProviderPayment> ProviderPayments
        {
            get
            {
                if (_providerPayments == null)
                {
                    var newCollection = new FixupCollection<ProviderPayment>();
                    newCollection.CollectionChanged += FixupProviderPayments;
                    _providerPayments = newCollection;
                }
                return _providerPayments;
            }
            set
            {
                if (!ReferenceEquals(_providerPayments, value))
                {
                    var previousValue = _providerPayments as FixupCollection<ProviderPayment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProviderPayments;
                    }
                    _providerPayments = value;
                    var newValue = value as FixupCollection<ProviderPayment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProviderPayments;
                    }
    				OnPropertyChanged("ProviderPayments");
                }
            }
        }
        private ICollection<ProviderPayment> _providerPayments;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (Company != null)
            {
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupDivision(Division previousValue)
        {
            if (Division != null)
            {
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
            else if (!_settingFK)
            {
                DivisionId = null;
            }
        }
    
        private void FixupProvider(Provider previousValue)
        {
            if (previousValue != null && previousValue.Consignments.Contains(this))
            {
                previousValue.Consignments.Remove(this);
            }
    
            if (Provider != null)
            {
                if (!Provider.Consignments.Contains(this))
                {
                    Provider.Consignments.Add(this);
                }
                if (ProviderId != Provider.Id)
                {
                    ProviderId = Provider.Id;
                }
            }
            else if (!_settingFK)
            {
                ProviderId = null;
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (CreatedBy != null)
            {
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupDestinationStorehouse(Storehouse previousValue)
        {
            if (previousValue != null && previousValue.Consignments.Contains(this))
            {
                previousValue.Consignments.Remove(this);
            }
    
            if (DestinationStorehouse != null)
            {
                if (!DestinationStorehouse.Consignments.Contains(this))
                {
                    DestinationStorehouse.Consignments.Add(this);
                }
                if (DestinationStorehouseId != DestinationStorehouse.Id)
                {
                    DestinationStorehouseId = DestinationStorehouse.Id;
                }
            }
            else if (!_settingFK)
            {
                DestinationStorehouseId = null;
            }
        }
    
        private void FixupSourceStorehouse(Storehouse previousValue)
        {
            if (previousValue != null && previousValue.Consignments1.Contains(this))
            {
                previousValue.Consignments1.Remove(this);
            }
    
            if (SourceStorehouse != null)
            {
                if (!SourceStorehouse.Consignments1.Contains(this))
                {
                    SourceStorehouse.Consignments1.Add(this);
                }
                if (SourceStorehouseId != SourceStorehouse.Id)
                {
                    SourceStorehouseId = SourceStorehouse.Id;
                }
            }
            else if (!_settingFK)
            {
                SourceStorehouseId = null;
            }
        }
    
        private void FixupConsignment1(Consignment previousValue)
        {
            if (previousValue != null && previousValue.Consignments1.Contains(this))
            {
                previousValue.Consignments1.Remove(this);
            }
    
            if (Consignment1 != null)
            {
                if (!Consignment1.Consignments1.Contains(this))
                {
                    Consignment1.Consignments1.Add(this);
                }
                if (ProviderOrderId != Consignment1.Id)
                {
                    ProviderOrderId = Consignment1.Id;
                }
            }
            else if (!_settingFK)
            {
                ProviderOrderId = null;
            }
        }
    
        private void FixupConsignmentLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ConsignmentLine item in e.NewItems)
                {
                    item.Consignment = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ConsignmentLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Consignment, this))
                    {
                        item.Consignment = null;
                    }
                }
            }
        }
    
        private void FixupConsignments1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Consignment item in e.NewItems)
                {
                    item.Consignment1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Consignment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Consignment1, this))
                    {
                        item.Consignment1 = null;
                    }
                }
            }
        }
    
        private void FixupProviderPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProviderPayment item in e.NewItems)
                {
                    item.Order = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProviderPayment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
