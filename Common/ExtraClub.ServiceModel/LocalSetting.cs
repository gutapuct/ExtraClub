//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class LocalSetting : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual int Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private int _id;
    
    
    	[DataMember]
        public virtual long LastSyncVersion
        {
            get {return _lastSyncVersion;}
            set 
    		{ 
    			if(_lastSyncVersion != value)
    			{
    				_lastSyncVersion = value; 
    				
    				
    
    				OnPropertyChanged("LastSyncVersion");
    			}
    		}
        }
        private long _lastSyncVersion;
    
    
    	[DataMember]
        public virtual int DbVersion
        {
            get {return _dbVersion;}
            set 
    		{ 
    			if(_dbVersion != value)
    			{
    				_dbVersion = value; 
    				
    				
    
    				OnPropertyChanged("DbVersion");
    			}
    		}
        }
        private int _dbVersion;
    
    
    	[DataMember]
        public virtual int NotifyLicenseDays
        {
            get {return _notifyLicenseDays;}
            set 
    		{ 
    			if(_notifyLicenseDays != value)
    			{
    				_notifyLicenseDays = value; 
    				
    				
    
    				OnPropertyChanged("NotifyLicenseDays");
    			}
    		}
        }
        private int _notifyLicenseDays;
    
    
    	[DataMember]
        public virtual int NotifyLicensePeriod
        {
            get {return _notifyLicensePeriod;}
            set 
    		{ 
    			if(_notifyLicensePeriod != value)
    			{
    				_notifyLicensePeriod = value; 
    				
    				
    
    				OnPropertyChanged("NotifyLicensePeriod");
    			}
    		}
        }
        private int _notifyLicensePeriod;
    
    
    	[DataMember]
        public virtual int NotifyKeyDays
        {
            get {return _notifyKeyDays;}
            set 
    		{ 
    			if(_notifyKeyDays != value)
    			{
    				_notifyKeyDays = value; 
    				
    				
    
    				OnPropertyChanged("NotifyKeyDays");
    			}
    		}
        }
        private int _notifyKeyDays;
    
    
    	[DataMember]
        public virtual int NotifyKeyPeriod
        {
            get {return _notifyKeyPeriod;}
            set 
    		{ 
    			if(_notifyKeyPeriod != value)
    			{
    				_notifyKeyPeriod = value; 
    				
    				
    
    				OnPropertyChanged("NotifyKeyPeriod");
    			}
    		}
        }
        private int _notifyKeyPeriod;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> LastSyncDate
        {
            get {return _lastSyncDate;}
            set 
    		{ 
    			if(_lastSyncDate != value)
    			{
    				_lastSyncDate = value; 
    				
    				if (_lastSyncDate.HasValue) _lastSyncDate = DateTime.SpecifyKind(_lastSyncDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("LastSyncDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _lastSyncDate;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> LicenseExpiry
        {
            get {return _licenseExpiry;}
            set 
    		{ 
    			if(_licenseExpiry != value)
    			{
    				_licenseExpiry = value; 
    				
    				if (_licenseExpiry.HasValue) _licenseExpiry = DateTime.SpecifyKind(_licenseExpiry.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("LicenseExpiry");
    			}
    		}
        }
        private Nullable<System.DateTime> _licenseExpiry;
    
    
    	[DataMember]
        public virtual string NotifyAdresses
        {
            get {return _notifyAdresses;}
            set 
    		{ 
    			if(_notifyAdresses != value)
    			{
    				_notifyAdresses = value; 
    				
    				
    
    				OnPropertyChanged("NotifyAdresses");
    			}
    		}
        }
        private string _notifyAdresses;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> DefaultDivisionId
        {
            get {return _defaultDivisionId;}
            set 
    		{ 
    			if(_defaultDivisionId != value)
    			{
    				_defaultDivisionId = value; 
    				
    				
    
    				OnPropertyChanged("DefaultDivisionId");
    			}
    		}
        }
        private Nullable<System.Guid> _defaultDivisionId;
    
    

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
