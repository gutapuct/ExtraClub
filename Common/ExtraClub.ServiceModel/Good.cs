//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Good : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> ModifiedOn
        {
            get {return _modifiedOn;}
            set 
    		{ 
    			if(_modifiedOn != value)
    			{
    				_modifiedOn = value; 
    				
    				if (_modifiedOn.HasValue) _modifiedOn = DateTime.SpecifyKind(_modifiedOn.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("ModifiedOn");
    			}
    		}
        }
        private Nullable<System.DateTime> _modifiedOn;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> UnitTypeId
        {
            get { return _unitTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_unitTypeId != value)
                    {
                        if (UnitType != null && UnitType.Id != value)
                        {
                            UnitType = null;
                        }
                        _unitTypeId = value;
        
        				OnPropertyChanged("UnitTypeId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _unitTypeId;
    
    
    	[DataMember]
        public virtual bool IntAmount
        {
            get {return _intAmount;}
            set 
    		{ 
    			if(_intAmount != value)
    			{
    				_intAmount = value; 
    				
    				
    
    				OnPropertyChanged("IntAmount");
    			}
    		}
        }
        private bool _intAmount;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ProductTypeId
        {
            get { return _productTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_productTypeId != value)
                    {
                        if (ProductType != null && ProductType.Id != value)
                        {
                            ProductType = null;
                        }
                        _productTypeId = value;
        
        				OnPropertyChanged("ProductTypeId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _productTypeId;
    
    
    	[DataMember]
        public virtual string Description
        {
            get {return _description;}
            set 
    		{ 
    			if(_description != value)
    			{
    				_description = value; 
    				
    				
    
    				OnPropertyChanged("Description");
    			}
    		}
        }
        private string _description;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ManufacturerId
        {
            get { return _manufacturerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_manufacturerId != value)
                    {
                        if (Manufacturer != null && Manufacturer.Id != value)
                        {
                            Manufacturer = null;
                        }
                        _manufacturerId = value;
        
        				OnPropertyChanged("ManufacturerId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _manufacturerId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> GoodsCategoryId
        {
            get { return _goodsCategoryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_goodsCategoryId != value)
                    {
                        if (GoodsCategory != null && GoodsCategory.Id != value)
                        {
                            GoodsCategory = null;
                        }
                        _goodsCategoryId = value;
        
        				OnPropertyChanged("GoodsCategoryId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _goodsCategoryId;
    
    
    	[DataMember]
        public virtual string BarCode
        {
            get {return _barCode;}
            set 
    		{ 
    			if(_barCode != value)
    			{
    				_barCode = value; 
    				
    				
    
    				OnPropertyChanged("BarCode");
    			}
    		}
        }
        private string _barCode;
    
    
    	[DataMember]
        public virtual Nullable<int> FirebirdId
        {
            get {return _firebirdId;}
            set 
    		{ 
    			if(_firebirdId != value)
    			{
    				_firebirdId = value; 
    				
    				
    
    				OnPropertyChanged("FirebirdId");
    			}
    		}
        }
        private Nullable<int> _firebirdId;
    
    
    	[DataMember]
        public virtual bool IsVisible
        {
            get {return _isVisible;}
            set 
    		{ 
    			if(_isVisible != value)
    			{
    				_isVisible = value; 
    				
    				
    
    				OnPropertyChanged("IsVisible");
    			}
    		}
        }
        private bool _isVisible;
    
    
    	[DataMember]
        public virtual bool IsOurs
        {
            get {return _isOurs;}
            set 
    		{ 
    			if(_isOurs != value)
    			{
    				_isOurs = value; 
    				
    				
    
    				OnPropertyChanged("IsOurs");
    			}
    		}
        }
        private bool _isOurs;
    
    
    	[DataMember]
        public virtual string Code1C
        {
            get {return _code1C;}
            set 
    		{ 
    			if(_code1C != value)
    			{
    				_code1C = value; 
    				
    				
    
    				OnPropertyChanged("Code1C");
    			}
    		}
        }
        private string _code1C;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual UnitType UnitType
        {
            get { return _unitType; }
            set
            {
                if (!ReferenceEquals(_unitType, value))
                {
                    var previousValue = _unitType;
                    _unitType = value;
                    FixupUnitType(previousValue);
                }
            }
        }
        private UnitType _unitType;
    
        public virtual ProductType ProductType
        {
            get { return _productType; }
            set
            {
                if (!ReferenceEquals(_productType, value))
                {
                    var previousValue = _productType;
                    _productType = value;
                    FixupProductType(previousValue);
                }
            }
        }
        private ProductType _productType;
    
        public virtual Manufacturer Manufacturer
        {
            get { return _manufacturer; }
            set
            {
                if (!ReferenceEquals(_manufacturer, value))
                {
                    var previousValue = _manufacturer;
                    _manufacturer = value;
                    FixupManufacturer(previousValue);
                }
            }
        }
        private Manufacturer _manufacturer;
    
        public virtual GoodsCategory GoodsCategory
        {
            get { return _goodsCategory; }
            set
            {
                if (!ReferenceEquals(_goodsCategory, value))
                {
                    var previousValue = _goodsCategory;
                    _goodsCategory = value;
                    FixupGoodsCategory(previousValue);
                }
            }
        }
        private GoodsCategory _goodsCategory;
    
        public virtual ICollection<ConsignmentLine> ConsignmentLines
        {
            get
            {
                if (_consignmentLines == null)
                {
                    var newCollection = new FixupCollection<ConsignmentLine>();
                    newCollection.CollectionChanged += FixupConsignmentLines;
                    _consignmentLines = newCollection;
                }
                return _consignmentLines;
            }
            set
            {
                if (!ReferenceEquals(_consignmentLines, value))
                {
                    var previousValue = _consignmentLines as FixupCollection<ConsignmentLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConsignmentLines;
                    }
                    _consignmentLines = value;
                    var newValue = value as FixupCollection<ConsignmentLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConsignmentLines;
                    }
    				OnPropertyChanged("ConsignmentLines");
                }
            }
        }
        private ICollection<ConsignmentLine> _consignmentLines;
    
        public virtual ICollection<GoodPrice> GoodPrices
        {
            get
            {
                if (_goodPrices == null)
                {
                    var newCollection = new FixupCollection<GoodPrice>();
                    newCollection.CollectionChanged += FixupGoodPrices;
                    _goodPrices = newCollection;
                }
                return _goodPrices;
            }
            set
            {
                if (!ReferenceEquals(_goodPrices, value))
                {
                    var previousValue = _goodPrices as FixupCollection<GoodPrice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodPrices;
                    }
                    _goodPrices = value;
                    var newValue = value as FixupCollection<GoodPrice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodPrices;
                    }
    				OnPropertyChanged("GoodPrices");
                }
            }
        }
        private ICollection<GoodPrice> _goodPrices;
    
        public virtual ICollection<GoodSale> GoodSales
        {
            get
            {
                if (_goodSales == null)
                {
                    var newCollection = new FixupCollection<GoodSale>();
                    newCollection.CollectionChanged += FixupGoodSales;
                    _goodSales = newCollection;
                }
                return _goodSales;
            }
            set
            {
                if (!ReferenceEquals(_goodSales, value))
                {
                    var previousValue = _goodSales as FixupCollection<GoodSale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodSales;
                    }
                    _goodSales = value;
                    var newValue = value as FixupCollection<GoodSale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodSales;
                    }
    				OnPropertyChanged("GoodSales");
                }
            }
        }
        private ICollection<GoodSale> _goodSales;
    
        public virtual ICollection<GoodActionLine> GoodActionLines
        {
            get
            {
                if (_goodActionLines == null)
                {
                    var newCollection = new FixupCollection<GoodActionLine>();
                    newCollection.CollectionChanged += FixupGoodActionLines;
                    _goodActionLines = newCollection;
                }
                return _goodActionLines;
            }
            set
            {
                if (!ReferenceEquals(_goodActionLines, value))
                {
                    var previousValue = _goodActionLines as FixupCollection<GoodActionLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodActionLines;
                    }
                    _goodActionLines = value;
                    var newValue = value as FixupCollection<GoodActionLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodActionLines;
                    }
    				OnPropertyChanged("GoodActionLines");
                }
            }
        }
        private ICollection<GoodActionLine> _goodActionLines;
    
        public virtual ICollection<Rent> Rents
        {
            get
            {
                if (_rents == null)
                {
                    var newCollection = new FixupCollection<Rent>();
                    newCollection.CollectionChanged += FixupRents;
                    _rents = newCollection;
                }
                return _rents;
            }
            set
            {
                if (!ReferenceEquals(_rents, value))
                {
                    var previousValue = _rents as FixupCollection<Rent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRents;
                    }
                    _rents = value;
                    var newValue = value as FixupCollection<Rent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRents;
                    }
    				OnPropertyChanged("Rents");
                }
            }
        }
        private ICollection<Rent> _rents;
    
        public virtual ICollection<CustomerGoodsFlow> CustomerGoodsFlows
        {
            get
            {
                if (_customerGoodsFlows == null)
                {
                    var newCollection = new FixupCollection<CustomerGoodsFlow>();
                    newCollection.CollectionChanged += FixupCustomerGoodsFlows;
                    _customerGoodsFlows = newCollection;
                }
                return _customerGoodsFlows;
            }
            set
            {
                if (!ReferenceEquals(_customerGoodsFlows, value))
                {
                    var previousValue = _customerGoodsFlows as FixupCollection<CustomerGoodsFlow>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerGoodsFlows;
                    }
                    _customerGoodsFlows = value;
                    var newValue = value as FixupCollection<CustomerGoodsFlow>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerGoodsFlows;
                    }
    				OnPropertyChanged("CustomerGoodsFlows");
                }
            }
        }
        private ICollection<CustomerGoodsFlow> _customerGoodsFlows;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Goods.Contains(this))
            {
                previousValue.Goods.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Goods.Contains(this))
                {
                    Company.Goods.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (CreatedBy != null)
            {
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupUnitType(UnitType previousValue)
        {
            if (UnitType != null)
            {
                if (UnitTypeId != UnitType.Id)
                {
                    UnitTypeId = UnitType.Id;
                }
            }
            else if (!_settingFK)
            {
                UnitTypeId = null;
            }
        }
    
        private void FixupProductType(ProductType previousValue)
        {
            if (ProductType != null)
            {
                if (ProductTypeId != ProductType.Id)
                {
                    ProductTypeId = ProductType.Id;
                }
            }
            else if (!_settingFK)
            {
                ProductTypeId = null;
            }
        }
    
        private void FixupManufacturer(Manufacturer previousValue)
        {
            if (previousValue != null && previousValue.Good.Contains(this))
            {
                previousValue.Good.Remove(this);
            }
    
            if (Manufacturer != null)
            {
                if (!Manufacturer.Good.Contains(this))
                {
                    Manufacturer.Good.Add(this);
                }
                if (ManufacturerId != Manufacturer.Id)
                {
                    ManufacturerId = Manufacturer.Id;
                }
            }
            else if (!_settingFK)
            {
                ManufacturerId = null;
            }
        }
    
        private void FixupGoodsCategory(GoodsCategory previousValue)
        {
            if (GoodsCategory != null)
            {
                if (GoodsCategoryId != GoodsCategory.Id)
                {
                    GoodsCategoryId = GoodsCategory.Id;
                }
            }
            else if (!_settingFK)
            {
                GoodsCategoryId = null;
            }
        }
    
        private void FixupConsignmentLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ConsignmentLine item in e.NewItems)
                {
                    item.Good = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ConsignmentLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Good, this))
                    {
                        item.Good = null;
                    }
                }
            }
        }
    
        private void FixupGoodPrices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodPrice item in e.NewItems)
                {
                    item.Good = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodPrice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Good, this))
                    {
                        item.Good = null;
                    }
                }
            }
        }
    
        private void FixupGoodSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodSale item in e.NewItems)
                {
                    item.Good = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodSale item in e.OldItems)
                {
                    if (ReferenceEquals(item.Good, this))
                    {
                        item.Good = null;
                    }
                }
            }
        }
    
        private void FixupGoodActionLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodActionLine item in e.NewItems)
                {
                    item.Good = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodActionLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Good, this))
                    {
                        item.Good = null;
                    }
                }
            }
        }
    
        private void FixupRents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rent item in e.NewItems)
                {
                    item.Good = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Good, this))
                    {
                        item.Good = null;
                    }
                }
            }
        }
    
        private void FixupCustomerGoodsFlows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerGoodsFlow item in e.NewItems)
                {
                    item.Good = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerGoodsFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.Good, this))
                    {
                        item.Good = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
