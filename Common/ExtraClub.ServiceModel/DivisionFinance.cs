//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class DivisionFinance : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                if (_companyId != value)
                {
                    if (Company != null && Company.CompanyId != value)
                    {
                        Company = null;
                    }
                    _companyId = value;
    
    				OnPropertyChanged("CompanyId");
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                if (_divisionId != value)
                {
                    if (Division != null && Division.Id != value)
                    {
                        Division = null;
                    }
                    _divisionId = value;
    
    				OnPropertyChanged("DivisionId");
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual System.DateTime Period
        {
            get {return _period;}
            set 
    		{ 
    			if(_period != value)
    			{
    				_period = value; 
    				
    				_period = DateTime.SpecifyKind(_period, DateTimeKind.Local);
    
    				OnPropertyChanged("Period");
    			}
    		}
        }
        private System.DateTime _period;
    
    
    	[DataMember]
        public virtual decimal CashLeft
        {
            get {return _cashLeft;}
            set 
    		{ 
    			if(_cashLeft != value)
    			{
    				_cashLeft = value; 
    				
    				
    
    				OnPropertyChanged("CashLeft");
    			}
    		}
        }
        private decimal _cashLeft;
    
    
    	[DataMember]
        public virtual decimal Unsent
        {
            get {return _unsent;}
            set 
    		{ 
    			if(_unsent != value)
    			{
    				_unsent = value; 
    				
    				
    
    				OnPropertyChanged("Unsent");
    			}
    		}
        }
        private decimal _unsent;
    
    
    	[DataMember]
        public virtual decimal Advances
        {
            get {return _advances;}
            set 
    		{ 
    			if(_advances != value)
    			{
    				_advances = value; 
    				
    				
    
    				OnPropertyChanged("Advances");
    			}
    		}
        }
        private decimal _advances;
    
    
    	[DataMember]
        public virtual decimal TerminalLoan
        {
            get {return _terminalLoan;}
            set 
    		{ 
    			if(_terminalLoan != value)
    			{
    				_terminalLoan = value; 
    				
    				
    
    				OnPropertyChanged("TerminalLoan");
    			}
    		}
        }
        private decimal _terminalLoan;
    
    
    	[DataMember]
        public virtual decimal Accum
        {
            get {return _accum;}
            set 
    		{ 
    			if(_accum != value)
    			{
    				_accum = value; 
    				
    				
    
    				OnPropertyChanged("Accum");
    			}
    		}
        }
        private decimal _accum;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;

        #endregion

        #region Association Fixup
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.DivisionFinances.Contains(this))
            {
                previousValue.DivisionFinances.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.DivisionFinances.Contains(this))
                {
                    Company.DivisionFinances.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.DivisionFinances.Contains(this))
            {
                previousValue.DivisionFinances.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.DivisionFinances.Contains(this))
                {
                    Division.DivisionFinances.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
