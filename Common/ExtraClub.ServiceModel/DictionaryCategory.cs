//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class DictionaryCategory : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ParentId
        {
            get { return _parentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentId != value)
                    {
                        if (ParentCategory != null && ParentCategory.Id != value)
                        {
                            ParentCategory = null;
                        }
                        _parentId = value;
        
        				OnPropertyChanged("ParentId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _parentId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<DictionaryCategory> ChildCategories
        {
            get
            {
                if (_childCategories == null)
                {
                    var newCollection = new FixupCollection<DictionaryCategory>();
                    newCollection.CollectionChanged += FixupChildCategories;
                    _childCategories = newCollection;
                }
                return _childCategories;
            }
            set
            {
                if (!ReferenceEquals(_childCategories, value))
                {
                    var previousValue = _childCategories as FixupCollection<DictionaryCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildCategories;
                    }
                    _childCategories = value;
                    var newValue = value as FixupCollection<DictionaryCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildCategories;
                    }
    				OnPropertyChanged("ChildCategories");
                }
            }
        }
        private ICollection<DictionaryCategory> _childCategories;
    
        public virtual DictionaryCategory ParentCategory
        {
            get { return _parentCategory; }
            set
            {
                if (!ReferenceEquals(_parentCategory, value))
                {
                    var previousValue = _parentCategory;
                    _parentCategory = value;
                    FixupParentCategory(previousValue);
                }
            }
        }
        private DictionaryCategory _parentCategory;
    
        public virtual ICollection<DictionaryInfo> DictionaryInfos
        {
            get
            {
                if (_dictionaryInfos == null)
                {
                    var newCollection = new FixupCollection<DictionaryInfo>();
                    newCollection.CollectionChanged += FixupDictionaryInfos;
                    _dictionaryInfos = newCollection;
                }
                return _dictionaryInfos;
            }
            set
            {
                if (!ReferenceEquals(_dictionaryInfos, value))
                {
                    var previousValue = _dictionaryInfos as FixupCollection<DictionaryInfo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDictionaryInfos;
                    }
                    _dictionaryInfos = value;
                    var newValue = value as FixupCollection<DictionaryInfo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDictionaryInfos;
                    }
    				OnPropertyChanged("DictionaryInfos");
                }
            }
        }
        private ICollection<DictionaryInfo> _dictionaryInfos;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupParentCategory(DictionaryCategory previousValue)
        {
            if (previousValue != null && previousValue.ChildCategories.Contains(this))
            {
                previousValue.ChildCategories.Remove(this);
            }
    
            if (ParentCategory != null)
            {
                if (!ParentCategory.ChildCategories.Contains(this))
                {
                    ParentCategory.ChildCategories.Add(this);
                }
                if (ParentId != ParentCategory.Id)
                {
                    ParentId = ParentCategory.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentId = null;
            }
        }
    
        private void FixupChildCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DictionaryCategory item in e.NewItems)
                {
                    item.ParentCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DictionaryCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentCategory, this))
                    {
                        item.ParentCategory = null;
                    }
                }
            }
        }
    
        private void FixupDictionaryInfos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DictionaryInfo item in e.NewItems)
                {
                    item.DictionaryCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DictionaryInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.DictionaryCategory, this))
                    {
                        item.DictionaryCategory = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
