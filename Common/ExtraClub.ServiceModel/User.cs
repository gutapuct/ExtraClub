//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class User : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid UserId
        {
            get {return _userId;}
            set 
    		{ 
    			if(_userId != value)
    			{
    				_userId = value; 
    				
    				
    
    				OnPropertyChanged("UserId");
    			}
    		}
        }
        private System.Guid _userId;
    
    
    	[DataMember]
        public virtual string UserName
        {
            get {return _userName;}
            set 
    		{ 
    			if(_userName != value)
    			{
    				_userName = value; 
    				
    				
    
    				OnPropertyChanged("UserName");
    			}
    		}
        }
        private string _userName;
    
    
    	[DataMember]
        public virtual string FullName
        {
            get {return _fullName;}
            set 
    		{ 
    			if(_fullName != value)
    			{
    				_fullName = value; 
    				
    				
    
    				OnPropertyChanged("FullName");
    			}
    		}
        }
        private string _fullName;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                if (_companyId != value)
                {
                    if (Company != null && Company.CompanyId != value)
                    {
                        Company = null;
                    }
                    _companyId = value;
    
    				OnPropertyChanged("CompanyId");
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual string PasswordHash
        {
            get {return _passwordHash;}
            set 
    		{ 
    			if(_passwordHash != value)
    			{
    				_passwordHash = value; 
    				
    				
    
    				OnPropertyChanged("PasswordHash");
    			}
    		}
        }
        private string _passwordHash;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> ModifiedOn
        {
            get {return _modifiedOn;}
            set 
    		{ 
    			if(_modifiedOn != value)
    			{
    				_modifiedOn = value; 
    				
    				if (_modifiedOn.HasValue) _modifiedOn = DateTime.SpecifyKind(_modifiedOn.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("ModifiedOn");
    			}
    		}
        }
        private Nullable<System.DateTime> _modifiedOn;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> EmployeeId
        {
            get {return _employeeId;}
            set 
    		{ 
    			if(_employeeId != value)
    			{
    				_employeeId = value; 
    				
    				
    
    				OnPropertyChanged("EmployeeId");
    			}
    		}
        }
        private Nullable<System.Guid> _employeeId;
    
    
    	[DataMember]
        public virtual System.DateTime LastLoginDate
        {
            get {return _lastLoginDate;}
            set 
    		{ 
    			if(_lastLoginDate != value)
    			{
    				_lastLoginDate = value; 
    				
    				_lastLoginDate = DateTime.SpecifyKind(_lastLoginDate, DateTimeKind.Local);
    
    				OnPropertyChanged("LastLoginDate");
    			}
    		}
        }
        private System.DateTime _lastLoginDate;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> LastPasswordChanged
        {
            get {return _lastPasswordChanged;}
            set 
    		{ 
    			if(_lastPasswordChanged != value)
    			{
    				_lastPasswordChanged = value; 
    				
    				if (_lastPasswordChanged.HasValue) _lastPasswordChanged = DateTime.SpecifyKind(_lastPasswordChanged.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("LastPasswordChanged");
    			}
    		}
        }
        private Nullable<System.DateTime> _lastPasswordChanged;
    
    
    	[DataMember]
        public virtual string Email
        {
            get {return _email;}
            set 
    		{ 
    			if(_email != value)
    			{
    				_email = value; 
    				
    				
    
    				OnPropertyChanged("Email");
    			}
    		}
        }
        private string _email;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual ICollection<Role> Roles
        {
            get
            {
                if (_roles == null)
                {
                    var newCollection = new FixupCollection<Role>();
                    newCollection.CollectionChanged += FixupRoles;
                    _roles = newCollection;
                }
                return _roles;
            }
            set
            {
                if (!ReferenceEquals(_roles, value))
                {
                    var previousValue = _roles as FixupCollection<Role>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRoles;
                    }
                    _roles = value;
                    var newValue = value as FixupCollection<Role>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRoles;
                    }
    				OnPropertyChanged("Roles");
                }
            }
        }
        private ICollection<Role> _roles;
    
        public virtual ICollection<TreatmentProgram> TreatmentPrograms
        {
            get
            {
                if (_treatmentPrograms == null)
                {
                    var newCollection = new FixupCollection<TreatmentProgram>();
                    newCollection.CollectionChanged += FixupTreatmentPrograms;
                    _treatmentPrograms = newCollection;
                }
                return _treatmentPrograms;
            }
            set
            {
                if (!ReferenceEquals(_treatmentPrograms, value))
                {
                    var previousValue = _treatmentPrograms as FixupCollection<TreatmentProgram>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentPrograms;
                    }
                    _treatmentPrograms = value;
                    var newValue = value as FixupCollection<TreatmentProgram>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentPrograms;
                    }
    				OnPropertyChanged("TreatmentPrograms");
                }
            }
        }
        private ICollection<TreatmentProgram> _treatmentPrograms;
    
        public virtual ICollection<Instalment> Instalments
        {
            get
            {
                if (_instalments == null)
                {
                    var newCollection = new FixupCollection<Instalment>();
                    newCollection.CollectionChanged += FixupInstalments;
                    _instalments = newCollection;
                }
                return _instalments;
            }
            set
            {
                if (!ReferenceEquals(_instalments, value))
                {
                    var previousValue = _instalments as FixupCollection<Instalment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInstalments;
                    }
                    _instalments = value;
                    var newValue = value as FixupCollection<Instalment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInstalments;
                    }
    				OnPropertyChanged("Instalments");
                }
            }
        }
        private ICollection<Instalment> _instalments;
    
        public virtual ICollection<UnitCharge> UnitCharges
        {
            get
            {
                if (_unitCharges == null)
                {
                    var newCollection = new FixupCollection<UnitCharge>();
                    newCollection.CollectionChanged += FixupUnitCharges;
                    _unitCharges = newCollection;
                }
                return _unitCharges;
            }
            set
            {
                if (!ReferenceEquals(_unitCharges, value))
                {
                    var previousValue = _unitCharges as FixupCollection<UnitCharge>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUnitCharges;
                    }
                    _unitCharges = value;
                    var newValue = value as FixupCollection<UnitCharge>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUnitCharges;
                    }
    				OnPropertyChanged("UnitCharges");
                }
            }
        }
        private ICollection<UnitCharge> _unitCharges;
    
        public virtual ICollection<TreatmentEvent> TreatmentEvents1
        {
            get
            {
                if (_treatmentEvents1 == null)
                {
                    var newCollection = new FixupCollection<TreatmentEvent>();
                    newCollection.CollectionChanged += FixupTreatmentEvents1;
                    _treatmentEvents1 = newCollection;
                }
                return _treatmentEvents1;
            }
            set
            {
                if (!ReferenceEquals(_treatmentEvents1, value))
                {
                    var previousValue = _treatmentEvents1 as FixupCollection<TreatmentEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentEvents1;
                    }
                    _treatmentEvents1 = value;
                    var newValue = value as FixupCollection<TreatmentEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentEvents1;
                    }
    				OnPropertyChanged("TreatmentEvents1");
                }
            }
        }
        private ICollection<TreatmentEvent> _treatmentEvents1;
    
        public virtual ICollection<CustomerTarget> CustomerTargets
        {
            get
            {
                if (_customerTargets == null)
                {
                    var newCollection = new FixupCollection<CustomerTarget>();
                    newCollection.CollectionChanged += FixupCustomerTargets;
                    _customerTargets = newCollection;
                }
                return _customerTargets;
            }
            set
            {
                if (!ReferenceEquals(_customerTargets, value))
                {
                    var previousValue = _customerTargets as FixupCollection<CustomerTarget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerTargets;
                    }
                    _customerTargets = value;
                    var newValue = value as FixupCollection<CustomerTarget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerTargets;
                    }
    				OnPropertyChanged("CustomerTargets");
                }
            }
        }
        private ICollection<CustomerTarget> _customerTargets;
    
        public virtual ICollection<Anthropometric> Anthropometrics
        {
            get
            {
                if (_anthropometrics == null)
                {
                    var newCollection = new FixupCollection<Anthropometric>();
                    newCollection.CollectionChanged += FixupAnthropometrics;
                    _anthropometrics = newCollection;
                }
                return _anthropometrics;
            }
            set
            {
                if (!ReferenceEquals(_anthropometrics, value))
                {
                    var previousValue = _anthropometrics as FixupCollection<Anthropometric>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnthropometrics;
                    }
                    _anthropometrics = value;
                    var newValue = value as FixupCollection<Anthropometric>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnthropometrics;
                    }
    				OnPropertyChanged("Anthropometrics");
                }
            }
        }
        private ICollection<Anthropometric> _anthropometrics;
    
        public virtual ICollection<DoctorVisit> DoctorVisits
        {
            get
            {
                if (_doctorVisits == null)
                {
                    var newCollection = new FixupCollection<DoctorVisit>();
                    newCollection.CollectionChanged += FixupDoctorVisits;
                    _doctorVisits = newCollection;
                }
                return _doctorVisits;
            }
            set
            {
                if (!ReferenceEquals(_doctorVisits, value))
                {
                    var previousValue = _doctorVisits as FixupCollection<DoctorVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDoctorVisits;
                    }
                    _doctorVisits = value;
                    var newValue = value as FixupCollection<DoctorVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDoctorVisits;
                    }
    				OnPropertyChanged("DoctorVisits");
                }
            }
        }
        private ICollection<DoctorVisit> _doctorVisits;
    
        public virtual ICollection<Nutrition> Nutritions
        {
            get
            {
                if (_nutritions == null)
                {
                    var newCollection = new FixupCollection<Nutrition>();
                    newCollection.CollectionChanged += FixupNutritions;
                    _nutritions = newCollection;
                }
                return _nutritions;
            }
            set
            {
                if (!ReferenceEquals(_nutritions, value))
                {
                    var previousValue = _nutritions as FixupCollection<Nutrition>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNutritions;
                    }
                    _nutritions = value;
                    var newValue = value as FixupCollection<Nutrition>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNutritions;
                    }
    				OnPropertyChanged("Nutritions");
                }
            }
        }
        private ICollection<Nutrition> _nutritions;
    
        public virtual ICollection<CustomerMeasure> CustomerMeasures
        {
            get
            {
                if (_customerMeasures == null)
                {
                    var newCollection = new FixupCollection<CustomerMeasure>();
                    newCollection.CollectionChanged += FixupCustomerMeasures;
                    _customerMeasures = newCollection;
                }
                return _customerMeasures;
            }
            set
            {
                if (!ReferenceEquals(_customerMeasures, value))
                {
                    var previousValue = _customerMeasures as FixupCollection<CustomerMeasure>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerMeasures;
                    }
                    _customerMeasures = value;
                    var newValue = value as FixupCollection<CustomerMeasure>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerMeasures;
                    }
    				OnPropertyChanged("CustomerMeasures");
                }
            }
        }
        private ICollection<CustomerMeasure> _customerMeasures;
    
        public virtual ICollection<TextAction> TextActions
        {
            get
            {
                if (_textActions == null)
                {
                    var newCollection = new FixupCollection<TextAction>();
                    newCollection.CollectionChanged += FixupTextActions;
                    _textActions = newCollection;
                }
                return _textActions;
            }
            set
            {
                if (!ReferenceEquals(_textActions, value))
                {
                    var previousValue = _textActions as FixupCollection<TextAction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTextActions;
                    }
                    _textActions = value;
                    var newValue = value as FixupCollection<TextAction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTextActions;
                    }
    				OnPropertyChanged("TextActions");
                }
            }
        }
        private ICollection<TextAction> _textActions;
    
        public virtual ICollection<CustomerNotification> CustomerNotifications
        {
            get
            {
                if (_customerNotifications == null)
                {
                    var newCollection = new FixupCollection<CustomerNotification>();
                    newCollection.CollectionChanged += FixupCustomerNotifications;
                    _customerNotifications = newCollection;
                }
                return _customerNotifications;
            }
            set
            {
                if (!ReferenceEquals(_customerNotifications, value))
                {
                    var previousValue = _customerNotifications as FixupCollection<CustomerNotification>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerNotifications;
                    }
                    _customerNotifications = value;
                    var newValue = value as FixupCollection<CustomerNotification>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerNotifications;
                    }
    				OnPropertyChanged("CustomerNotifications");
                }
            }
        }
        private ICollection<CustomerNotification> _customerNotifications;
    
        public virtual ICollection<CustomerNotification> CustomerNotifications1
        {
            get
            {
                if (_customerNotifications1 == null)
                {
                    var newCollection = new FixupCollection<CustomerNotification>();
                    newCollection.CollectionChanged += FixupCustomerNotifications1;
                    _customerNotifications1 = newCollection;
                }
                return _customerNotifications1;
            }
            set
            {
                if (!ReferenceEquals(_customerNotifications1, value))
                {
                    var previousValue = _customerNotifications1 as FixupCollection<CustomerNotification>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerNotifications1;
                    }
                    _customerNotifications1 = value;
                    var newValue = value as FixupCollection<CustomerNotification>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerNotifications1;
                    }
    				OnPropertyChanged("CustomerNotifications1");
                }
            }
        }
        private ICollection<CustomerNotification> _customerNotifications1;
    
        public virtual ICollection<ChildrenRoom> ChildrenRooms
        {
            get
            {
                if (_childrenRooms == null)
                {
                    var newCollection = new FixupCollection<ChildrenRoom>();
                    newCollection.CollectionChanged += FixupChildrenRooms;
                    _childrenRooms = newCollection;
                }
                return _childrenRooms;
            }
            set
            {
                if (!ReferenceEquals(_childrenRooms, value))
                {
                    var previousValue = _childrenRooms as FixupCollection<ChildrenRoom>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildrenRooms;
                    }
                    _childrenRooms = value;
                    var newValue = value as FixupCollection<ChildrenRoom>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildrenRooms;
                    }
    				OnPropertyChanged("ChildrenRooms");
                }
            }
        }
        private ICollection<ChildrenRoom> _childrenRooms;
    
        public virtual ICollection<ChildrenRoom> ChildrenRooms1
        {
            get
            {
                if (_childrenRooms1 == null)
                {
                    var newCollection = new FixupCollection<ChildrenRoom>();
                    newCollection.CollectionChanged += FixupChildrenRooms1;
                    _childrenRooms1 = newCollection;
                }
                return _childrenRooms1;
            }
            set
            {
                if (!ReferenceEquals(_childrenRooms1, value))
                {
                    var previousValue = _childrenRooms1 as FixupCollection<ChildrenRoom>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildrenRooms1;
                    }
                    _childrenRooms1 = value;
                    var newValue = value as FixupCollection<ChildrenRoom>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildrenRooms1;
                    }
    				OnPropertyChanged("ChildrenRooms1");
                }
            }
        }
        private ICollection<ChildrenRoom> _childrenRooms1;
    
        public virtual ICollection<CustomerShelf> CustomerShelves
        {
            get
            {
                if (_customerShelves == null)
                {
                    var newCollection = new FixupCollection<CustomerShelf>();
                    newCollection.CollectionChanged += FixupCustomerShelves;
                    _customerShelves = newCollection;
                }
                return _customerShelves;
            }
            set
            {
                if (!ReferenceEquals(_customerShelves, value))
                {
                    var previousValue = _customerShelves as FixupCollection<CustomerShelf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerShelves;
                    }
                    _customerShelves = value;
                    var newValue = value as FixupCollection<CustomerShelf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerShelves;
                    }
    				OnPropertyChanged("CustomerShelves");
                }
            }
        }
        private ICollection<CustomerShelf> _customerShelves;
    
        public virtual ICollection<CustomerShelf> CustomerShelves1
        {
            get
            {
                if (_customerShelves1 == null)
                {
                    var newCollection = new FixupCollection<CustomerShelf>();
                    newCollection.CollectionChanged += FixupCustomerShelves1;
                    _customerShelves1 = newCollection;
                }
                return _customerShelves1;
            }
            set
            {
                if (!ReferenceEquals(_customerShelves1, value))
                {
                    var previousValue = _customerShelves1 as FixupCollection<CustomerShelf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerShelves1;
                    }
                    _customerShelves1 = value;
                    var newValue = value as FixupCollection<CustomerShelf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerShelves1;
                    }
    				OnPropertyChanged("CustomerShelves1");
                }
            }
        }
        private ICollection<CustomerShelf> _customerShelves1;
    
        public virtual ICollection<Solarium> Solariums
        {
            get
            {
                if (_solariums == null)
                {
                    var newCollection = new FixupCollection<Solarium>();
                    newCollection.CollectionChanged += FixupSolariums;
                    _solariums = newCollection;
                }
                return _solariums;
            }
            set
            {
                if (!ReferenceEquals(_solariums, value))
                {
                    var previousValue = _solariums as FixupCollection<Solarium>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolariums;
                    }
                    _solariums = value;
                    var newValue = value as FixupCollection<Solarium>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolariums;
                    }
    				OnPropertyChanged("Solariums");
                }
            }
        }
        private ICollection<Solarium> _solariums;
    
        public virtual ICollection<SolariumVisit> SolariumVisits
        {
            get
            {
                if (_solariumVisits == null)
                {
                    var newCollection = new FixupCollection<SolariumVisit>();
                    newCollection.CollectionChanged += FixupSolariumVisits;
                    _solariumVisits = newCollection;
                }
                return _solariumVisits;
            }
            set
            {
                if (!ReferenceEquals(_solariumVisits, value))
                {
                    var previousValue = _solariumVisits as FixupCollection<SolariumVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolariumVisits;
                    }
                    _solariumVisits = value;
                    var newValue = value as FixupCollection<SolariumVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolariumVisits;
                    }
    				OnPropertyChanged("SolariumVisits");
                }
            }
        }
        private ICollection<SolariumVisit> _solariumVisits;
    
        public virtual ICollection<MinutesCharge> MinutesCharges
        {
            get
            {
                if (_minutesCharges == null)
                {
                    var newCollection = new FixupCollection<MinutesCharge>();
                    newCollection.CollectionChanged += FixupMinutesCharges;
                    _minutesCharges = newCollection;
                }
                return _minutesCharges;
            }
            set
            {
                if (!ReferenceEquals(_minutesCharges, value))
                {
                    var previousValue = _minutesCharges as FixupCollection<MinutesCharge>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMinutesCharges;
                    }
                    _minutesCharges = value;
                    var newValue = value as FixupCollection<MinutesCharge>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMinutesCharges;
                    }
    				OnPropertyChanged("MinutesCharges");
                }
            }
        }
        private ICollection<MinutesCharge> _minutesCharges;
    
        public virtual ICollection<ProviderFolder> ProviderFolders
        {
            get
            {
                if (_providerFolders == null)
                {
                    var newCollection = new FixupCollection<ProviderFolder>();
                    newCollection.CollectionChanged += FixupProviderFolders;
                    _providerFolders = newCollection;
                }
                return _providerFolders;
            }
            set
            {
                if (!ReferenceEquals(_providerFolders, value))
                {
                    var previousValue = _providerFolders as FixupCollection<ProviderFolder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProviderFolders;
                    }
                    _providerFolders = value;
                    var newValue = value as FixupCollection<ProviderFolder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProviderFolders;
                    }
    				OnPropertyChanged("ProviderFolders");
                }
            }
        }
        private ICollection<ProviderFolder> _providerFolders;
    
        public virtual ICollection<GoodSale> GoodSales
        {
            get
            {
                if (_goodSales == null)
                {
                    var newCollection = new FixupCollection<GoodSale>();
                    newCollection.CollectionChanged += FixupGoodSales;
                    _goodSales = newCollection;
                }
                return _goodSales;
            }
            set
            {
                if (!ReferenceEquals(_goodSales, value))
                {
                    var previousValue = _goodSales as FixupCollection<GoodSale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodSales;
                    }
                    _goodSales = value;
                    var newValue = value as FixupCollection<GoodSale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodSales;
                    }
    				OnPropertyChanged("GoodSales");
                }
            }
        }
        private ICollection<GoodSale> _goodSales;
    
        public virtual ICollection<Certificate> Certificates
        {
            get
            {
                if (_certificates == null)
                {
                    var newCollection = new FixupCollection<Certificate>();
                    newCollection.CollectionChanged += FixupCertificates;
                    _certificates = newCollection;
                }
                return _certificates;
            }
            set
            {
                if (!ReferenceEquals(_certificates, value))
                {
                    var previousValue = _certificates as FixupCollection<Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificates;
                    }
                    _certificates = value;
                    var newValue = value as FixupCollection<Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificates;
                    }
    				OnPropertyChanged("Certificates");
                }
            }
        }
        private ICollection<Certificate> _certificates;
    
        public virtual ICollection<Rent> Rents
        {
            get
            {
                if (_rents == null)
                {
                    var newCollection = new FixupCollection<Rent>();
                    newCollection.CollectionChanged += FixupRents;
                    _rents = newCollection;
                }
                return _rents;
            }
            set
            {
                if (!ReferenceEquals(_rents, value))
                {
                    var previousValue = _rents as FixupCollection<Rent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRents;
                    }
                    _rents = value;
                    var newValue = value as FixupCollection<Rent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRents;
                    }
    				OnPropertyChanged("Rents");
                }
            }
        }
        private ICollection<Rent> _rents;
    
        public virtual ICollection<Rent> Rents1
        {
            get
            {
                if (_rents1 == null)
                {
                    var newCollection = new FixupCollection<Rent>();
                    newCollection.CollectionChanged += FixupRents1;
                    _rents1 = newCollection;
                }
                return _rents1;
            }
            set
            {
                if (!ReferenceEquals(_rents1, value))
                {
                    var previousValue = _rents1 as FixupCollection<Rent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRents1;
                    }
                    _rents1 = value;
                    var newValue = value as FixupCollection<Rent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRents1;
                    }
    				OnPropertyChanged("Rents1");
                }
            }
        }
        private ICollection<Rent> _rents1;
    
        public virtual ICollection<DepositOut> DepositOuts
        {
            get
            {
                if (_depositOuts == null)
                {
                    var newCollection = new FixupCollection<DepositOut>();
                    newCollection.CollectionChanged += FixupDepositOuts;
                    _depositOuts = newCollection;
                }
                return _depositOuts;
            }
            set
            {
                if (!ReferenceEquals(_depositOuts, value))
                {
                    var previousValue = _depositOuts as FixupCollection<DepositOut>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDepositOuts;
                    }
                    _depositOuts = value;
                    var newValue = value as FixupCollection<DepositOut>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDepositOuts;
                    }
    				OnPropertyChanged("DepositOuts");
                }
            }
        }
        private ICollection<DepositOut> _depositOuts;
    
        public virtual ICollection<DepositOut> DepositOuts1
        {
            get
            {
                if (_depositOuts1 == null)
                {
                    var newCollection = new FixupCollection<DepositOut>();
                    newCollection.CollectionChanged += FixupDepositOuts1;
                    _depositOuts1 = newCollection;
                }
                return _depositOuts1;
            }
            set
            {
                if (!ReferenceEquals(_depositOuts1, value))
                {
                    var previousValue = _depositOuts1 as FixupCollection<DepositOut>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDepositOuts1;
                    }
                    _depositOuts1 = value;
                    var newValue = value as FixupCollection<DepositOut>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDepositOuts1;
                    }
    				OnPropertyChanged("DepositOuts1");
                }
            }
        }
        private ICollection<DepositOut> _depositOuts1;
    
        public virtual ICollection<Spending> Spendings
        {
            get
            {
                if (_spendings == null)
                {
                    var newCollection = new FixupCollection<Spending>();
                    newCollection.CollectionChanged += FixupSpendings;
                    _spendings = newCollection;
                }
                return _spendings;
            }
            set
            {
                if (!ReferenceEquals(_spendings, value))
                {
                    var previousValue = _spendings as FixupCollection<Spending>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpendings;
                    }
                    _spendings = value;
                    var newValue = value as FixupCollection<Spending>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpendings;
                    }
    				OnPropertyChanged("Spendings");
                }
            }
        }
        private ICollection<Spending> _spendings;
    
        public virtual ICollection<Job> Jobs
        {
            get
            {
                if (_jobs == null)
                {
                    var newCollection = new FixupCollection<Job>();
                    newCollection.CollectionChanged += FixupJobs;
                    _jobs = newCollection;
                }
                return _jobs;
            }
            set
            {
                if (!ReferenceEquals(_jobs, value))
                {
                    var previousValue = _jobs as FixupCollection<Job>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobs;
                    }
                    _jobs = value;
                    var newValue = value as FixupCollection<Job>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobs;
                    }
    				OnPropertyChanged("Jobs");
                }
            }
        }
        private ICollection<Job> _jobs;
    
        public virtual ICollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    var newCollection = new FixupCollection<Employee>();
                    newCollection.CollectionChanged += FixupEmployees;
                    _employees = newCollection;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees as FixupCollection<Employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployees;
                    }
                    _employees = value;
                    var newValue = value as FixupCollection<Employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployees;
                    }
    				OnPropertyChanged("Employees");
                }
            }
        }
        private ICollection<Employee> _employees;
    
        public virtual ICollection<JobPlacement> JobPlacements
        {
            get
            {
                if (_jobPlacements == null)
                {
                    var newCollection = new FixupCollection<JobPlacement>();
                    newCollection.CollectionChanged += FixupJobPlacements;
                    _jobPlacements = newCollection;
                }
                return _jobPlacements;
            }
            set
            {
                if (!ReferenceEquals(_jobPlacements, value))
                {
                    var previousValue = _jobPlacements as FixupCollection<JobPlacement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobPlacements;
                    }
                    _jobPlacements = value;
                    var newValue = value as FixupCollection<JobPlacement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobPlacements;
                    }
    				OnPropertyChanged("JobPlacements");
                }
            }
        }
        private ICollection<JobPlacement> _jobPlacements;
    
        public virtual ICollection<JobPlacement> JobPlacements1
        {
            get
            {
                if (_jobPlacements1 == null)
                {
                    var newCollection = new FixupCollection<JobPlacement>();
                    newCollection.CollectionChanged += FixupJobPlacements1;
                    _jobPlacements1 = newCollection;
                }
                return _jobPlacements1;
            }
            set
            {
                if (!ReferenceEquals(_jobPlacements1, value))
                {
                    var previousValue = _jobPlacements1 as FixupCollection<JobPlacement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobPlacements1;
                    }
                    _jobPlacements1 = value;
                    var newValue = value as FixupCollection<JobPlacement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobPlacements1;
                    }
    				OnPropertyChanged("JobPlacements1");
                }
            }
        }
        private ICollection<JobPlacement> _jobPlacements1;
    
        public virtual ICollection<EmployeeVacation> EmployeeVacations
        {
            get
            {
                if (_employeeVacations == null)
                {
                    var newCollection = new FixupCollection<EmployeeVacation>();
                    newCollection.CollectionChanged += FixupEmployeeVacations;
                    _employeeVacations = newCollection;
                }
                return _employeeVacations;
            }
            set
            {
                if (!ReferenceEquals(_employeeVacations, value))
                {
                    var previousValue = _employeeVacations as FixupCollection<EmployeeVacation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeVacations;
                    }
                    _employeeVacations = value;
                    var newValue = value as FixupCollection<EmployeeVacation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeVacations;
                    }
    				OnPropertyChanged("EmployeeVacations");
                }
            }
        }
        private ICollection<EmployeeVacation> _employeeVacations;
    
        public virtual ICollection<EmployeeTrip> EmployeeTrips
        {
            get
            {
                if (_employeeTrips == null)
                {
                    var newCollection = new FixupCollection<EmployeeTrip>();
                    newCollection.CollectionChanged += FixupEmployeeTrips;
                    _employeeTrips = newCollection;
                }
                return _employeeTrips;
            }
            set
            {
                if (!ReferenceEquals(_employeeTrips, value))
                {
                    var previousValue = _employeeTrips as FixupCollection<EmployeeTrip>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeTrips;
                    }
                    _employeeTrips = value;
                    var newValue = value as FixupCollection<EmployeeTrip>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeTrips;
                    }
    				OnPropertyChanged("EmployeeTrips");
                }
            }
        }
        private ICollection<EmployeeTrip> _employeeTrips;
    
        public virtual ICollection<VacationList> VacationLists
        {
            get
            {
                if (_vacationLists == null)
                {
                    var newCollection = new FixupCollection<VacationList>();
                    newCollection.CollectionChanged += FixupVacationLists;
                    _vacationLists = newCollection;
                }
                return _vacationLists;
            }
            set
            {
                if (!ReferenceEquals(_vacationLists, value))
                {
                    var previousValue = _vacationLists as FixupCollection<VacationList>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupVacationLists;
                    }
                    _vacationLists = value;
                    var newValue = value as FixupCollection<VacationList>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupVacationLists;
                    }
    				OnPropertyChanged("VacationLists");
                }
            }
        }
        private ICollection<VacationList> _vacationLists;
    
        public virtual ICollection<EmployeeWorkGraph> EmployeeWorkGraphs
        {
            get
            {
                if (_employeeWorkGraphs == null)
                {
                    var newCollection = new FixupCollection<EmployeeWorkGraph>();
                    newCollection.CollectionChanged += FixupEmployeeWorkGraphs;
                    _employeeWorkGraphs = newCollection;
                }
                return _employeeWorkGraphs;
            }
            set
            {
                if (!ReferenceEquals(_employeeWorkGraphs, value))
                {
                    var previousValue = _employeeWorkGraphs as FixupCollection<EmployeeWorkGraph>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeWorkGraphs;
                    }
                    _employeeWorkGraphs = value;
                    var newValue = value as FixupCollection<EmployeeWorkGraph>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeWorkGraphs;
                    }
    				OnPropertyChanged("EmployeeWorkGraphs");
                }
            }
        }
        private ICollection<EmployeeWorkGraph> _employeeWorkGraphs;
    
        public virtual ICollection<SalaryScheme> SalarySchemes
        {
            get
            {
                if (_salarySchemes == null)
                {
                    var newCollection = new FixupCollection<SalaryScheme>();
                    newCollection.CollectionChanged += FixupSalarySchemes;
                    _salarySchemes = newCollection;
                }
                return _salarySchemes;
            }
            set
            {
                if (!ReferenceEquals(_salarySchemes, value))
                {
                    var previousValue = _salarySchemes as FixupCollection<SalaryScheme>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalarySchemes;
                    }
                    _salarySchemes = value;
                    var newValue = value as FixupCollection<SalaryScheme>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalarySchemes;
                    }
    				OnPropertyChanged("SalarySchemes");
                }
            }
        }
        private ICollection<SalaryScheme> _salarySchemes;
    
        public virtual ICollection<SalarySheet> SalarySheets
        {
            get
            {
                if (_salarySheets == null)
                {
                    var newCollection = new FixupCollection<SalarySheet>();
                    newCollection.CollectionChanged += FixupSalarySheets;
                    _salarySheets = newCollection;
                }
                return _salarySheets;
            }
            set
            {
                if (!ReferenceEquals(_salarySheets, value))
                {
                    var previousValue = _salarySheets as FixupCollection<SalarySheet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalarySheets;
                    }
                    _salarySheets = value;
                    var newValue = value as FixupCollection<SalarySheet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalarySheets;
                    }
    				OnPropertyChanged("SalarySheets");
                }
            }
        }
        private ICollection<SalarySheet> _salarySheets;
    
        public virtual ICollection<Call> Calls
        {
            get
            {
                if (_calls == null)
                {
                    var newCollection = new FixupCollection<Call>();
                    newCollection.CollectionChanged += FixupCalls;
                    _calls = newCollection;
                }
                return _calls;
            }
            set
            {
                if (!ReferenceEquals(_calls, value))
                {
                    var previousValue = _calls as FixupCollection<Call>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCalls;
                    }
                    _calls = value;
                    var newValue = value as FixupCollection<Call>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCalls;
                    }
    				OnPropertyChanged("Calls");
                }
            }
        }
        private ICollection<Call> _calls;
    
        public virtual ICollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    var newCollection = new FixupCollection<Task>();
                    newCollection.CollectionChanged += FixupTasks;
                    _tasks = newCollection;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    var previousValue = _tasks as FixupCollection<Task>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    var newValue = value as FixupCollection<Task>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTasks;
                    }
    				OnPropertyChanged("Tasks");
                }
            }
        }
        private ICollection<Task> _tasks;
    
        public virtual ICollection<Task> Tasks1
        {
            get
            {
                if (_tasks1 == null)
                {
                    var newCollection = new FixupCollection<Task>();
                    newCollection.CollectionChanged += FixupTasks1;
                    _tasks1 = newCollection;
                }
                return _tasks1;
            }
            set
            {
                if (!ReferenceEquals(_tasks1, value))
                {
                    var previousValue = _tasks1 as FixupCollection<Task>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTasks1;
                    }
                    _tasks1 = value;
                    var newValue = value as FixupCollection<Task>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTasks1;
                    }
    				OnPropertyChanged("Tasks1");
                }
            }
        }
        private ICollection<Task> _tasks1;
    
        public virtual ICollection<Income> Incomes
        {
            get
            {
                if (_incomes == null)
                {
                    var newCollection = new FixupCollection<Income>();
                    newCollection.CollectionChanged += FixupIncomes;
                    _incomes = newCollection;
                }
                return _incomes;
            }
            set
            {
                if (!ReferenceEquals(_incomes, value))
                {
                    var previousValue = _incomes as FixupCollection<Income>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncomes;
                    }
                    _incomes = value;
                    var newValue = value as FixupCollection<Income>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncomes;
                    }
    				OnPropertyChanged("Incomes");
                }
            }
        }
        private ICollection<Income> _incomes;
    
        public virtual ICollection<SavedReport> SavedReports
        {
            get
            {
                if (_savedReports == null)
                {
                    var newCollection = new FixupCollection<SavedReport>();
                    newCollection.CollectionChanged += FixupSavedReports;
                    _savedReports = newCollection;
                }
                return _savedReports;
            }
            set
            {
                if (!ReferenceEquals(_savedReports, value))
                {
                    var previousValue = _savedReports as FixupCollection<SavedReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSavedReports;
                    }
                    _savedReports = value;
                    var newValue = value as FixupCollection<SavedReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSavedReports;
                    }
    				OnPropertyChanged("SavedReports");
                }
            }
        }
        private ICollection<SavedReport> _savedReports;
    
        public virtual ICollection<TicketCorrection> TicketCorrections
        {
            get
            {
                if (_ticketCorrections == null)
                {
                    var newCollection = new FixupCollection<TicketCorrection>();
                    newCollection.CollectionChanged += FixupTicketCorrections;
                    _ticketCorrections = newCollection;
                }
                return _ticketCorrections;
            }
            set
            {
                if (!ReferenceEquals(_ticketCorrections, value))
                {
                    var previousValue = _ticketCorrections as FixupCollection<TicketCorrection>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketCorrections;
                    }
                    _ticketCorrections = value;
                    var newValue = value as FixupCollection<TicketCorrection>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketCorrections;
                    }
    				OnPropertyChanged("TicketCorrections");
                }
            }
        }
        private ICollection<TicketCorrection> _ticketCorrections;
    
        public virtual ICollection<CashInOrder> CashInOrders
        {
            get
            {
                if (_cashInOrders == null)
                {
                    var newCollection = new FixupCollection<CashInOrder>();
                    newCollection.CollectionChanged += FixupCashInOrders;
                    _cashInOrders = newCollection;
                }
                return _cashInOrders;
            }
            set
            {
                if (!ReferenceEquals(_cashInOrders, value))
                {
                    var previousValue = _cashInOrders as FixupCollection<CashInOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCashInOrders;
                    }
                    _cashInOrders = value;
                    var newValue = value as FixupCollection<CashInOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCashInOrders;
                    }
    				OnPropertyChanged("CashInOrders");
                }
            }
        }
        private ICollection<CashInOrder> _cashInOrders;
    
        public virtual ICollection<CashInOrder> CashInOrders1
        {
            get
            {
                if (_cashInOrders1 == null)
                {
                    var newCollection = new FixupCollection<CashInOrder>();
                    newCollection.CollectionChanged += FixupCashInOrders1;
                    _cashInOrders1 = newCollection;
                }
                return _cashInOrders1;
            }
            set
            {
                if (!ReferenceEquals(_cashInOrders1, value))
                {
                    var previousValue = _cashInOrders1 as FixupCollection<CashInOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCashInOrders1;
                    }
                    _cashInOrders1 = value;
                    var newValue = value as FixupCollection<CashInOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCashInOrders1;
                    }
    				OnPropertyChanged("CashInOrders1");
                }
            }
        }
        private ICollection<CashInOrder> _cashInOrders1;
    
        public virtual ICollection<CashOutOrder> CashOutOrders
        {
            get
            {
                if (_cashOutOrders == null)
                {
                    var newCollection = new FixupCollection<CashOutOrder>();
                    newCollection.CollectionChanged += FixupCashOutOrders;
                    _cashOutOrders = newCollection;
                }
                return _cashOutOrders;
            }
            set
            {
                if (!ReferenceEquals(_cashOutOrders, value))
                {
                    var previousValue = _cashOutOrders as FixupCollection<CashOutOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCashOutOrders;
                    }
                    _cashOutOrders = value;
                    var newValue = value as FixupCollection<CashOutOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCashOutOrders;
                    }
    				OnPropertyChanged("CashOutOrders");
                }
            }
        }
        private ICollection<CashOutOrder> _cashOutOrders;
    
        public virtual ICollection<CashOutOrder> CashOutOrders1
        {
            get
            {
                if (_cashOutOrders1 == null)
                {
                    var newCollection = new FixupCollection<CashOutOrder>();
                    newCollection.CollectionChanged += FixupCashOutOrders1;
                    _cashOutOrders1 = newCollection;
                }
                return _cashOutOrders1;
            }
            set
            {
                if (!ReferenceEquals(_cashOutOrders1, value))
                {
                    var previousValue = _cashOutOrders1 as FixupCollection<CashOutOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCashOutOrders1;
                    }
                    _cashOutOrders1 = value;
                    var newValue = value as FixupCollection<CashOutOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCashOutOrders1;
                    }
    				OnPropertyChanged("CashOutOrders1");
                }
            }
        }
        private ICollection<CashOutOrder> _cashOutOrders1;
    
        public virtual ICollection<CustomerCrmEvent> CustomerCrmEvents
        {
            get
            {
                if (_customerCrmEvents == null)
                {
                    var newCollection = new FixupCollection<CustomerCrmEvent>();
                    newCollection.CollectionChanged += FixupCustomerCrmEvents;
                    _customerCrmEvents = newCollection;
                }
                return _customerCrmEvents;
            }
            set
            {
                if (!ReferenceEquals(_customerCrmEvents, value))
                {
                    var previousValue = _customerCrmEvents as FixupCollection<CustomerCrmEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerCrmEvents;
                    }
                    _customerCrmEvents = value;
                    var newValue = value as FixupCollection<CustomerCrmEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerCrmEvents;
                    }
    				OnPropertyChanged("CustomerCrmEvents");
                }
            }
        }
        private ICollection<CustomerCrmEvent> _customerCrmEvents;

        #endregion

        #region Association Fixup
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Users.Contains(this))
                {
                    Company.Users.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupTreatmentPrograms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentProgram item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentProgram item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupInstalments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Instalment item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Instalment item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupUnitCharges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UnitCharge item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UnitCharge item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentEvents1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentEvent item in e.NewItems)
                {
                    item.ModifiedUser = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.ModifiedUser, this))
                    {
                        item.ModifiedUser = null;
                    }
                }
            }
        }
    
        private void FixupCustomerTargets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerTarget item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerTarget item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupAnthropometrics(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Anthropometric item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Anthropometric item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupDoctorVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DoctorVisit item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DoctorVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupNutritions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Nutrition item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Nutrition item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupCustomerMeasures(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerMeasure item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerMeasure item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupTextActions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TextAction item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TextAction item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupCustomerNotifications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerNotification item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerNotification item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupCustomerNotifications1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerNotification item in e.NewItems)
                {
                    item.CompletedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerNotification item in e.OldItems)
                {
                    if (ReferenceEquals(item.CompletedBy, this))
                    {
                        item.CompletedBy = null;
                    }
                }
            }
        }
    
        private void FixupChildrenRooms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ChildrenRoom item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChildrenRoom item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupChildrenRooms1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ChildrenRoom item in e.NewItems)
                {
                    item.OutBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChildrenRoom item in e.OldItems)
                {
                    if (ReferenceEquals(item.OutBy, this))
                    {
                        item.OutBy = null;
                    }
                }
            }
        }
    
        private void FixupCustomerShelves(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerShelf item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerShelf item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupCustomerShelves1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerShelf item in e.NewItems)
                {
                    item.ReturnBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerShelf item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReturnBy, this))
                    {
                        item.ReturnBy = null;
                    }
                }
            }
        }
    
        private void FixupSolariums(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Solarium item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Solarium item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupSolariumVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SolariumVisit item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SolariumVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupMinutesCharges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MinutesCharge item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MinutesCharge item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupProviderFolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProviderFolder item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProviderFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupGoodSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodSale item in e.NewItems)
                {
                    item.ReturnBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodSale item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReturnBy, this))
                    {
                        item.ReturnBy = null;
                    }
                }
            }
        }
    
        private void FixupCertificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupRents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rent item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rent item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupRents1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rent item in e.NewItems)
                {
                    item.ReturnBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rent item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReturnBy, this))
                    {
                        item.ReturnBy = null;
                    }
                }
            }
        }
    
        private void FixupDepositOuts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DepositOut item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DepositOut item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupDepositOuts1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DepositOut item in e.NewItems)
                {
                    item.ProcessedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DepositOut item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProcessedBy, this))
                    {
                        item.ProcessedBy = null;
                    }
                }
            }
        }
    
        private void FixupSpendings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Spending item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Spending item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupJobs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Job item in e.NewItems)
                {
                    item.Baseliner = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Job item in e.OldItems)
                {
                    if (ReferenceEquals(item.Baseliner, this))
                    {
                        item.Baseliner = null;
                    }
                }
            }
        }
    
        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupJobPlacements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (JobPlacement item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JobPlacement item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupJobPlacements1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (JobPlacement item in e.NewItems)
                {
                    item.FiredBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JobPlacement item in e.OldItems)
                {
                    if (ReferenceEquals(item.FiredBy, this))
                    {
                        item.FiredBy = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeVacations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeVacation item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeVacation item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeTrips(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeTrip item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeTrip item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupVacationLists(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (VacationList item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VacationList item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeWorkGraphs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeWorkGraph item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeWorkGraph item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupSalarySchemes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalaryScheme item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalaryScheme item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupSalarySheets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalarySheet item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalarySheet item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupCalls(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Call item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Call item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupTasks1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.ClosedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.ClosedBy, this))
                    {
                        item.ClosedBy = null;
                    }
                }
            }
        }
    
        private void FixupIncomes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Income item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Income item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupSavedReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SavedReport item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SavedReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupTicketCorrections(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketCorrection item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketCorrection item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupCashInOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CashInOrder item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CashInOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupCashInOrders1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CashInOrder item in e.NewItems)
                {
                    item.ReceivedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CashInOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReceivedBy, this))
                    {
                        item.ReceivedBy = null;
                    }
                }
            }
        }
    
        private void FixupCashOutOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CashOutOrder item in e.NewItems)
                {
                    item.CreatedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CashOutOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreatedBy, this))
                    {
                        item.CreatedBy = null;
                    }
                }
            }
        }
    
        private void FixupCashOutOrders1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CashOutOrder item in e.NewItems)
                {
                    item.ReceivedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CashOutOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReceivedBy, this))
                    {
                        item.ReceivedBy = null;
                    }
                }
            }
        }
    
        private void FixupCustomerCrmEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerCrmEvent item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerCrmEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
