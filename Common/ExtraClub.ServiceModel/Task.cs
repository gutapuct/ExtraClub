//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Task : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual System.DateTime ExpiryOn
        {
            get {return _expiryOn;}
            set 
    		{ 
    			if(_expiryOn != value)
    			{
    				_expiryOn = value; 
    				
    				_expiryOn = DateTime.SpecifyKind(_expiryOn, DateTimeKind.Local);
    
    				OnPropertyChanged("ExpiryOn");
    			}
    		}
        }
        private System.DateTime _expiryOn;
    
    
    	[DataMember]
        public virtual string Subject
        {
            get {return _subject;}
            set 
    		{ 
    			if(_subject != value)
    			{
    				_subject = value; 
    				
    				
    
    				OnPropertyChanged("Subject");
    			}
    		}
        }
        private string _subject;
    
    
    	[DataMember]
        public virtual string Message
        {
            get {return _message;}
            set 
    		{ 
    			if(_message != value)
    			{
    				_message = value; 
    				
    				
    
    				OnPropertyChanged("Message");
    			}
    		}
        }
        private string _message;
    
    
    	[DataMember]
        public virtual int StatusId
        {
            get {return _statusId;}
            set 
    		{ 
    			if(_statusId != value)
    			{
    				_statusId = value; 
    				
    				
    
    				OnPropertyChanged("StatusId");
    			}
    		}
        }
        private int _statusId;
    
    
    	[DataMember]
        public virtual int Priority
        {
            get {return _priority;}
            set 
    		{ 
    			if(_priority != value)
    			{
    				_priority = value; 
    				
    				
    
    				OnPropertyChanged("Priority");
    			}
    		}
        }
        private int _priority;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ClosedById
        {
            get { return _closedById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_closedById != value)
                    {
                        if (ClosedBy != null && ClosedBy.UserId != value)
                        {
                            ClosedBy = null;
                        }
                        _closedById = value;
        
        				OnPropertyChanged("ClosedById");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _closedById;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> ClosedOn
        {
            get {return _closedOn;}
            set 
    		{ 
    			if(_closedOn != value)
    			{
    				_closedOn = value; 
    				
    				if (_closedOn.HasValue) _closedOn = DateTime.SpecifyKind(_closedOn.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("ClosedOn");
    			}
    		}
        }
        private Nullable<System.DateTime> _closedOn;
    
    
    	[DataMember]
        public virtual string ClosedComment
        {
            get {return _closedComment;}
            set 
    		{ 
    			if(_closedComment != value)
    			{
    				_closedComment = value; 
    				
    				
    
    				OnPropertyChanged("ClosedComment");
    			}
    		}
        }
        private string _closedComment;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> Parameter
        {
            get {return _parameter;}
            set 
    		{ 
    			if(_parameter != value)
    			{
    				_parameter = value; 
    				
    				
    
    				OnPropertyChanged("Parameter");
    			}
    		}
        }
        private Nullable<System.Guid> _parameter;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual User ClosedBy
        {
            get { return _closedBy; }
            set
            {
                if (!ReferenceEquals(_closedBy, value))
                {
                    var previousValue = _closedBy;
                    _closedBy = value;
                    FixupClosedBy(previousValue);
                }
            }
        }
        private User _closedBy;
    
        public virtual ICollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    var newCollection = new FixupCollection<Employee>();
                    newCollection.CollectionChanged += FixupEmployees;
                    _employees = newCollection;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees as FixupCollection<Employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployees;
                    }
                    _employees = value;
                    var newValue = value as FixupCollection<Employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployees;
                    }
    				OnPropertyChanged("Employees");
                }
            }
        }
        private ICollection<Employee> _employees;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Tasks.Contains(this))
                {
                    Company.Tasks.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.Tasks.Contains(this))
                {
                    CreatedBy.Tasks.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
            else if (!_settingFK)
            {
                AuthorId = null;
            }
        }
    
        private void FixupClosedBy(User previousValue)
        {
            if (previousValue != null && previousValue.Tasks1.Contains(this))
            {
                previousValue.Tasks1.Remove(this);
            }
    
            if (ClosedBy != null)
            {
                if (!ClosedBy.Tasks1.Contains(this))
                {
                    ClosedBy.Tasks1.Add(this);
                }
                if (ClosedById != ClosedBy.UserId)
                {
                    ClosedById = ClosedBy.UserId;
                }
            }
            else if (!_settingFK)
            {
                ClosedById = null;
            }
        }
    
        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    if (!item.Tasks.Contains(this))
                    {
                        item.Tasks.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (item.Tasks.Contains(this))
                    {
                        item.Tasks.Remove(this);
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
