//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Employee : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                if (_companyId != value)
                {
                    if (Company != null && Company.CompanyId != value)
                    {
                        Company = null;
                    }
                    _companyId = value;
    
    				OnPropertyChanged("CompanyId");
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid MainDivisionId
        {
            get { return _mainDivisionId; }
            set
            {
                if (_mainDivisionId != value)
                {
                    if (MainDivision != null && MainDivision.Id != value)
                    {
                        MainDivision = null;
                    }
                    _mainDivisionId = value;
    
    				OnPropertyChanged("MainDivisionId");
                }
            }
        }
        private System.Guid _mainDivisionId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.Guid BoundCustomerId
        {
            get { return _boundCustomerId; }
            set
            {
                if (_boundCustomerId != value)
                {
                    if (BoundCustomer != null && BoundCustomer.Id != value)
                    {
                        BoundCustomer = null;
                    }
                    _boundCustomerId = value;
    
    				OnPropertyChanged("BoundCustomerId");
                }
            }
        }
        private System.Guid _boundCustomerId;
    
    
    	[DataMember]
        public virtual string FactIndex
        {
            get {return _factIndex;}
            set 
    		{ 
    			if(_factIndex != value)
    			{
    				_factIndex = value; 
    				
    				
    
    				OnPropertyChanged("FactIndex");
    			}
    		}
        }
        private string _factIndex;
    
    
    	[DataMember]
        public virtual string FactCity
        {
            get {return _factCity;}
            set 
    		{ 
    			if(_factCity != value)
    			{
    				_factCity = value; 
    				
    				
    
    				OnPropertyChanged("FactCity");
    			}
    		}
        }
        private string _factCity;
    
    
    	[DataMember]
        public virtual string FactStreet
        {
            get {return _factStreet;}
            set 
    		{ 
    			if(_factStreet != value)
    			{
    				_factStreet = value; 
    				
    				
    
    				OnPropertyChanged("FactStreet");
    			}
    		}
        }
        private string _factStreet;
    
    
    	[DataMember]
        public virtual string FactOther
        {
            get {return _factOther;}
            set 
    		{ 
    			if(_factOther != value)
    			{
    				_factOther = value; 
    				
    				
    
    				OnPropertyChanged("FactOther");
    			}
    		}
        }
        private string _factOther;
    
    
    	[DataMember]
        public virtual string FactMetro
        {
            get {return _factMetro;}
            set 
    		{ 
    			if(_factMetro != value)
    			{
    				_factMetro = value; 
    				
    				
    
    				OnPropertyChanged("FactMetro");
    			}
    		}
        }
        private string _factMetro;
    
    
    	[DataMember]
        public virtual Nullable<int> CardBarcode
        {
            get {return _cardBarcode;}
            set 
    		{ 
    			if(_cardBarcode != value)
    			{
    				_cardBarcode = value; 
    				
    				
    
    				OnPropertyChanged("CardBarcode");
    			}
    		}
        }
        private Nullable<int> _cardBarcode;
    
    
    	[DataMember]
        public virtual int Number
        {
            get {return _number;}
            set 
    		{ 
    			if(_number != value)
    			{
    				_number = value; 
    				
    				
    
    				OnPropertyChanged("Number");
    			}
    		}
        }
        private int _number;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual Customer BoundCustomer
        {
            get { return _boundCustomer; }
            set
            {
                if (!ReferenceEquals(_boundCustomer, value))
                {
                    var previousValue = _boundCustomer;
                    _boundCustomer = value;
                    FixupBoundCustomer(previousValue);
                }
            }
        }
        private Customer _boundCustomer;
    
        public virtual Division MainDivision
        {
            get { return _mainDivision; }
            set
            {
                if (!ReferenceEquals(_mainDivision, value))
                {
                    var previousValue = _mainDivision;
                    _mainDivision = value;
                    FixupMainDivision(previousValue);
                }
            }
        }
        private Division _mainDivision;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<JobPlacement> JobPlacements
        {
            get
            {
                if (_jobPlacements == null)
                {
                    var newCollection = new FixupCollection<JobPlacement>();
                    newCollection.CollectionChanged += FixupJobPlacements;
                    _jobPlacements = newCollection;
                }
                return _jobPlacements;
            }
            set
            {
                if (!ReferenceEquals(_jobPlacements, value))
                {
                    var previousValue = _jobPlacements as FixupCollection<JobPlacement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobPlacements;
                    }
                    _jobPlacements = value;
                    var newValue = value as FixupCollection<JobPlacement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobPlacements;
                    }
    				OnPropertyChanged("JobPlacements");
                }
            }
        }
        private ICollection<JobPlacement> _jobPlacements;
    
        public virtual ICollection<EmployeeVacation> EmployeeVacations
        {
            get
            {
                if (_employeeVacations == null)
                {
                    var newCollection = new FixupCollection<EmployeeVacation>();
                    newCollection.CollectionChanged += FixupEmployeeVacations;
                    _employeeVacations = newCollection;
                }
                return _employeeVacations;
            }
            set
            {
                if (!ReferenceEquals(_employeeVacations, value))
                {
                    var previousValue = _employeeVacations as FixupCollection<EmployeeVacation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeVacations;
                    }
                    _employeeVacations = value;
                    var newValue = value as FixupCollection<EmployeeVacation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeVacations;
                    }
    				OnPropertyChanged("EmployeeVacations");
                }
            }
        }
        private ICollection<EmployeeVacation> _employeeVacations;
    
        public virtual ICollection<EmployeeTrip> EmployeeTrips
        {
            get
            {
                if (_employeeTrips == null)
                {
                    var newCollection = new FixupCollection<EmployeeTrip>();
                    newCollection.CollectionChanged += FixupEmployeeTrips;
                    _employeeTrips = newCollection;
                }
                return _employeeTrips;
            }
            set
            {
                if (!ReferenceEquals(_employeeTrips, value))
                {
                    var previousValue = _employeeTrips as FixupCollection<EmployeeTrip>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeTrips;
                    }
                    _employeeTrips = value;
                    var newValue = value as FixupCollection<EmployeeTrip>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeTrips;
                    }
    				OnPropertyChanged("EmployeeTrips");
                }
            }
        }
        private ICollection<EmployeeTrip> _employeeTrips;
    
        public virtual ICollection<EmployeeVisit> EmployeeVisits
        {
            get
            {
                if (_employeeVisits == null)
                {
                    var newCollection = new FixupCollection<EmployeeVisit>();
                    newCollection.CollectionChanged += FixupEmployeeVisits;
                    _employeeVisits = newCollection;
                }
                return _employeeVisits;
            }
            set
            {
                if (!ReferenceEquals(_employeeVisits, value))
                {
                    var previousValue = _employeeVisits as FixupCollection<EmployeeVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeVisits;
                    }
                    _employeeVisits = value;
                    var newValue = value as FixupCollection<EmployeeVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeVisits;
                    }
    				OnPropertyChanged("EmployeeVisits");
                }
            }
        }
        private ICollection<EmployeeVisit> _employeeVisits;
    
        public virtual ICollection<VacationPreference> VacationPreferences
        {
            get
            {
                if (_vacationPreferences == null)
                {
                    var newCollection = new FixupCollection<VacationPreference>();
                    newCollection.CollectionChanged += FixupVacationPreferences;
                    _vacationPreferences = newCollection;
                }
                return _vacationPreferences;
            }
            set
            {
                if (!ReferenceEquals(_vacationPreferences, value))
                {
                    var previousValue = _vacationPreferences as FixupCollection<VacationPreference>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupVacationPreferences;
                    }
                    _vacationPreferences = value;
                    var newValue = value as FixupCollection<VacationPreference>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupVacationPreferences;
                    }
    				OnPropertyChanged("VacationPreferences");
                }
            }
        }
        private ICollection<VacationPreference> _vacationPreferences;
    
        public virtual ICollection<VacationListItem> VacationListItems
        {
            get
            {
                if (_vacationListItems == null)
                {
                    var newCollection = new FixupCollection<VacationListItem>();
                    newCollection.CollectionChanged += FixupVacationListItems;
                    _vacationListItems = newCollection;
                }
                return _vacationListItems;
            }
            set
            {
                if (!ReferenceEquals(_vacationListItems, value))
                {
                    var previousValue = _vacationListItems as FixupCollection<VacationListItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupVacationListItems;
                    }
                    _vacationListItems = value;
                    var newValue = value as FixupCollection<VacationListItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupVacationListItems;
                    }
    				OnPropertyChanged("VacationListItems");
                }
            }
        }
        private ICollection<VacationListItem> _vacationListItems;
    
        public virtual ICollection<SalarySheetRow> SalarySheetRows
        {
            get
            {
                if (_salarySheetRows == null)
                {
                    var newCollection = new FixupCollection<SalarySheetRow>();
                    newCollection.CollectionChanged += FixupSalarySheetRows;
                    _salarySheetRows = newCollection;
                }
                return _salarySheetRows;
            }
            set
            {
                if (!ReferenceEquals(_salarySheetRows, value))
                {
                    var previousValue = _salarySheetRows as FixupCollection<SalarySheetRow>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalarySheetRows;
                    }
                    _salarySheetRows = value;
                    var newValue = value as FixupCollection<SalarySheetRow>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalarySheetRows;
                    }
    				OnPropertyChanged("SalarySheetRows");
                }
            }
        }
        private ICollection<SalarySheetRow> _salarySheetRows;
    
        public virtual ICollection<EmployeePayment> EmployeePayments
        {
            get
            {
                if (_employeePayments == null)
                {
                    var newCollection = new FixupCollection<EmployeePayment>();
                    newCollection.CollectionChanged += FixupEmployeePayments;
                    _employeePayments = newCollection;
                }
                return _employeePayments;
            }
            set
            {
                if (!ReferenceEquals(_employeePayments, value))
                {
                    var previousValue = _employeePayments as FixupCollection<EmployeePayment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeePayments;
                    }
                    _employeePayments = value;
                    var newValue = value as FixupCollection<EmployeePayment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeePayments;
                    }
    				OnPropertyChanged("EmployeePayments");
                }
            }
        }
        private ICollection<EmployeePayment> _employeePayments;
    
        public virtual ICollection<CustomerNotification> CustomerNotifications
        {
            get
            {
                if (_customerNotifications == null)
                {
                    var newCollection = new FixupCollection<CustomerNotification>();
                    newCollection.CollectionChanged += FixupCustomerNotifications;
                    _customerNotifications = newCollection;
                }
                return _customerNotifications;
            }
            set
            {
                if (!ReferenceEquals(_customerNotifications, value))
                {
                    var previousValue = _customerNotifications as FixupCollection<CustomerNotification>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerNotifications;
                    }
                    _customerNotifications = value;
                    var newValue = value as FixupCollection<CustomerNotification>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerNotifications;
                    }
    				OnPropertyChanged("CustomerNotifications");
                }
            }
        }
        private ICollection<CustomerNotification> _customerNotifications;
    
        public virtual ICollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    var newCollection = new FixupCollection<Task>();
                    newCollection.CollectionChanged += FixupTasks;
                    _tasks = newCollection;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    var previousValue = _tasks as FixupCollection<Task>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    var newValue = value as FixupCollection<Task>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTasks;
                    }
    				OnPropertyChanged("Tasks");
                }
            }
        }
        private ICollection<Task> _tasks;
    
        public virtual ICollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupCustomers;
                    _customers = newCollection;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomers;
                    }
                    _customers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomers;
                    }
    				OnPropertyChanged("Customers");
                }
            }
        }
        private ICollection<Customer> _customers;

        #endregion

        #region Association Fixup
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Employees.Contains(this))
            {
                previousValue.Employees.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Employees.Contains(this))
                {
                    Company.Employees.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupBoundCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Employees.Contains(this))
            {
                previousValue.Employees.Remove(this);
            }
    
            if (BoundCustomer != null)
            {
                if (!BoundCustomer.Employees.Contains(this))
                {
                    BoundCustomer.Employees.Add(this);
                }
                if (BoundCustomerId != BoundCustomer.Id)
                {
                    BoundCustomerId = BoundCustomer.Id;
                }
            }
        }
    
        private void FixupMainDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.Employees.Contains(this))
            {
                previousValue.Employees.Remove(this);
            }
    
            if (MainDivision != null)
            {
                if (!MainDivision.Employees.Contains(this))
                {
                    MainDivision.Employees.Add(this);
                }
                if (MainDivisionId != MainDivision.Id)
                {
                    MainDivisionId = MainDivision.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.Employees.Contains(this))
            {
                previousValue.Employees.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.Employees.Contains(this))
                {
                    CreatedBy.Employees.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupJobPlacements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (JobPlacement item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JobPlacement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeVacations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeVacation item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeVacation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeTrips(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeTrip item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeTrip item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeVisit item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupVacationPreferences(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (VacationPreference item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VacationPreference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupVacationListItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (VacationListItem item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VacationListItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupSalarySheetRows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalarySheetRow item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalarySheetRow item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupEmployeePayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeePayment item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeePayment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupCustomerNotifications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerNotification item in e.NewItems)
                {
                    if (!item.Employees.Contains(this))
                    {
                        item.Employees.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerNotification item in e.OldItems)
                {
                    if (item.Employees.Contains(this))
                    {
                        item.Employees.Remove(this);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    if (!item.Employees.Contains(this))
                    {
                        item.Employees.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (item.Employees.Contains(this))
                    {
                        item.Employees.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
