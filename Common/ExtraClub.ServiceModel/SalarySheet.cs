//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class SalarySheet : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                if (_divisionId != value)
                {
                    if (Division != null && Division.Id != value)
                    {
                        Division = null;
                    }
                    _divisionId = value;
    
    				OnPropertyChanged("DivisionId");
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual System.DateTime PeriodStart
        {
            get {return _periodStart;}
            set 
    		{ 
    			if(_periodStart != value)
    			{
    				_periodStart = value; 
    				
    				_periodStart = DateTime.SpecifyKind(_periodStart, DateTimeKind.Local);
    
    				OnPropertyChanged("PeriodStart");
    			}
    		}
        }
        private System.DateTime _periodStart;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual ICollection<SalarySheetRow> SalarySheetRows
        {
            get
            {
                if (_salarySheetRows == null)
                {
                    var newCollection = new FixupCollection<SalarySheetRow>();
                    newCollection.CollectionChanged += FixupSalarySheetRows;
                    _salarySheetRows = newCollection;
                }
                return _salarySheetRows;
            }
            set
            {
                if (!ReferenceEquals(_salarySheetRows, value))
                {
                    var previousValue = _salarySheetRows as FixupCollection<SalarySheetRow>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalarySheetRows;
                    }
                    _salarySheetRows = value;
                    var newValue = value as FixupCollection<SalarySheetRow>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalarySheetRows;
                    }
    				OnPropertyChanged("SalarySheetRows");
                }
            }
        }
        private ICollection<SalarySheetRow> _salarySheetRows;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<EmployeePayment> EmployeePayments
        {
            get
            {
                if (_employeePayments == null)
                {
                    var newCollection = new FixupCollection<EmployeePayment>();
                    newCollection.CollectionChanged += FixupEmployeePayments;
                    _employeePayments = newCollection;
                }
                return _employeePayments;
            }
            set
            {
                if (!ReferenceEquals(_employeePayments, value))
                {
                    var previousValue = _employeePayments as FixupCollection<EmployeePayment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeePayments;
                    }
                    _employeePayments = value;
                    var newValue = value as FixupCollection<EmployeePayment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeePayments;
                    }
    				OnPropertyChanged("EmployeePayments");
                }
            }
        }
        private ICollection<EmployeePayment> _employeePayments;

        #endregion

        #region Association Fixup
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.SalarySheets.Contains(this))
            {
                previousValue.SalarySheets.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.SalarySheets.Contains(this))
                {
                    Division.SalarySheets.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.SalarySheets.Contains(this))
            {
                previousValue.SalarySheets.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.SalarySheets.Contains(this))
                {
                    CreatedBy.SalarySheets.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupSalarySheetRows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalarySheetRow item in e.NewItems)
                {
                    item.SalarySheet = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalarySheetRow item in e.OldItems)
                {
                    if (ReferenceEquals(item.SalarySheet, this))
                    {
                        item.SalarySheet = null;
                    }
                }
            }
        }
    
        private void FixupEmployeePayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeePayment item in e.NewItems)
                {
                    item.SalarySheet = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeePayment item in e.OldItems)
                {
                    if (ReferenceEquals(item.SalarySheet, this))
                    {
                        item.SalarySheet = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
