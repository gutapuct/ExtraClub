//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Permission : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid PermissionId
        {
            get {return _permissionId;}
            set 
    		{ 
    			if(_permissionId != value)
    			{
    				_permissionId = value; 
    				
    				
    
    				OnPropertyChanged("PermissionId");
    			}
    		}
        }
        private System.Guid _permissionId;
    
    
    	[DataMember]
        public virtual string PermissionKey
        {
            get {return _permissionKey;}
            set 
    		{ 
    			if(_permissionKey != value)
    			{
    				_permissionKey = value; 
    				
    				
    
    				OnPropertyChanged("PermissionKey");
    			}
    		}
        }
        private string _permissionKey;
    
    
    	[DataMember]
        public virtual string PermissionName
        {
            get {return _permissionName;}
            set 
    		{ 
    			if(_permissionName != value)
    			{
    				_permissionName = value; 
    				
    				
    
    				OnPropertyChanged("PermissionName");
    			}
    		}
        }
        private string _permissionName;
    
    
    	[DataMember]
        public virtual string PermissionDescription
        {
            get {return _permissionDescription;}
            set 
    		{ 
    			if(_permissionDescription != value)
    			{
    				_permissionDescription = value; 
    				
    				
    
    				OnPropertyChanged("PermissionDescription");
    			}
    		}
        }
        private string _permissionDescription;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> ModifiedOn
        {
            get {return _modifiedOn;}
            set 
    		{ 
    			if(_modifiedOn != value)
    			{
    				_modifiedOn = value; 
    				
    				if (_modifiedOn.HasValue) _modifiedOn = DateTime.SpecifyKind(_modifiedOn.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("ModifiedOn");
    			}
    		}
        }
        private Nullable<System.DateTime> _modifiedOn;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ParentPermissionId
        {
            get { return _parentPermissionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentPermissionId != value)
                    {
                        if (ParentPermission != null && ParentPermission.PermissionId != value)
                        {
                            ParentPermission = null;
                        }
                        _parentPermissionId = value;
        
        				OnPropertyChanged("ParentPermissionId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _parentPermissionId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Role> Roles
        {
            get
            {
                if (_roles == null)
                {
                    var newCollection = new FixupCollection<Role>();
                    newCollection.CollectionChanged += FixupRoles;
                    _roles = newCollection;
                }
                return _roles;
            }
            set
            {
                if (!ReferenceEquals(_roles, value))
                {
                    var previousValue = _roles as FixupCollection<Role>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRoles;
                    }
                    _roles = value;
                    var newValue = value as FixupCollection<Role>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRoles;
                    }
    				OnPropertyChanged("Roles");
                }
            }
        }
        private ICollection<Role> _roles;
    
        public virtual ICollection<Permission> ChildPermissions
        {
            get
            {
                if (_childPermissions == null)
                {
                    var newCollection = new FixupCollection<Permission>();
                    newCollection.CollectionChanged += FixupChildPermissions;
                    _childPermissions = newCollection;
                }
                return _childPermissions;
            }
            set
            {
                if (!ReferenceEquals(_childPermissions, value))
                {
                    var previousValue = _childPermissions as FixupCollection<Permission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildPermissions;
                    }
                    _childPermissions = value;
                    var newValue = value as FixupCollection<Permission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildPermissions;
                    }
    				OnPropertyChanged("ChildPermissions");
                }
            }
        }
        private ICollection<Permission> _childPermissions;
    
        public virtual Permission ParentPermission
        {
            get { return _parentPermission; }
            set
            {
                if (!ReferenceEquals(_parentPermission, value))
                {
                    var previousValue = _parentPermission;
                    _parentPermission = value;
                    FixupParentPermission(previousValue);
                }
            }
        }
        private Permission _parentPermission;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupParentPermission(Permission previousValue)
        {
            if (previousValue != null && previousValue.ChildPermissions.Contains(this))
            {
                previousValue.ChildPermissions.Remove(this);
            }
    
            if (ParentPermission != null)
            {
                if (!ParentPermission.ChildPermissions.Contains(this))
                {
                    ParentPermission.ChildPermissions.Add(this);
                }
                if (ParentPermissionId != ParentPermission.PermissionId)
                {
                    ParentPermissionId = ParentPermission.PermissionId;
                }
            }
            else if (!_settingFK)
            {
                ParentPermissionId = null;
            }
        }
    
        private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    if (!item.Permissions.Contains(this))
                    {
                        item.Permissions.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (item.Permissions.Contains(this))
                    {
                        item.Permissions.Remove(this);
                    }
                }
            }
        }
    
        private void FixupChildPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Permission item in e.NewItems)
                {
                    item.ParentPermission = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Permission item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentPermission, this))
                    {
                        item.ParentPermission = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
