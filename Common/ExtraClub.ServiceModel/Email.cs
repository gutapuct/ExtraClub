//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace ExtraClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Email : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid ID
        {
            get {return _iD;}
            set 
    		{ 
    			if(_iD != value)
    			{
    				_iD = value; 
    				
    				
    
    				OnPropertyChanged("ID");
    			}
    		}
        }
        private System.Guid _iD;
    
    
    	[DataMember]
        public virtual System.Guid TicketID
        {
            get { return _ticketID; }
            set
            {
                if (_ticketID != value)
                {
                    if (Ticket != null && Ticket.Id != value)
                    {
                        Ticket = null;
                    }
                    _ticketID = value;
    
    				OnPropertyChanged("TicketID");
                }
            }
        }
        private System.Guid _ticketID;
    
    
    	[DataMember]
        public virtual string Destination
        {
            get {return _destination;}
            set 
    		{ 
    			if(_destination != value)
    			{
    				_destination = value; 
    				
    				
    
    				OnPropertyChanged("Destination");
    			}
    		}
        }
        private string _destination;
    
    
    	[DataMember]
        public virtual string Subject
        {
            get {return _subject;}
            set 
    		{ 
    			if(_subject != value)
    			{
    				_subject = value; 
    				
    				
    
    				OnPropertyChanged("Subject");
    			}
    		}
        }
        private string _subject;
    
    
    	[DataMember]
        public virtual string Body
        {
            get {return _body;}
            set 
    		{ 
    			if(_body != value)
    			{
    				_body = value; 
    				
    				
    
    				OnPropertyChanged("Body");
    			}
    		}
        }
        private string _body;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Ticket Ticket
        {
            get { return _ticket; }
            set
            {
                if (!ReferenceEquals(_ticket, value))
                {
                    var previousValue = _ticket;
                    _ticket = value;
                    FixupTicket(previousValue);
                }
            }
        }
        private Ticket _ticket;

        #endregion

        #region Association Fixup
    
        private void FixupTicket(Ticket previousValue)
        {
            if (previousValue != null && previousValue.Emails.Contains(this))
            {
                previousValue.Emails.Remove(this);
            }
    
            if (Ticket != null)
            {
                if (!Ticket.Emails.Contains(this))
                {
                    Ticket.Emails.Add(this);
                }
                if (TicketID != Ticket.Id)
                {
                    TicketID = Ticket.Id;
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
