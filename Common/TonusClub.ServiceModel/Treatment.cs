//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Treatment : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Tag
        {
            get {return _tag;}
            set 
    		{ 
    			if(_tag != value)
    			{
    				_tag = value; 
    				
    				
    
    				OnPropertyChanged("Tag");
    			}
    		}
        }
        private string _tag;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                if (_divisionId != value)
                {
                    if (Division != null && Division.Id != value)
                    {
                        Division = null;
                    }
                    _divisionId = value;
    
    				OnPropertyChanged("DivisionId");
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual string Comment
        {
            get {return _comment;}
            set 
    		{ 
    			if(_comment != value)
    			{
    				_comment = value; 
    				
    				
    
    				OnPropertyChanged("Comment");
    			}
    		}
        }
        private string _comment;
    
    
    	[DataMember]
        public virtual System.Guid TreatmentTypeId
        {
            get { return _treatmentTypeId; }
            set
            {
                if (_treatmentTypeId != value)
                {
                    if (TreatmentType != null && TreatmentType.Id != value)
                    {
                        TreatmentType = null;
                    }
                    _treatmentTypeId = value;
    
    				OnPropertyChanged("TreatmentTypeId");
                }
            }
        }
        private System.Guid _treatmentTypeId;
    
    
    	[DataMember]
        public virtual int MaxCustomers
        {
            get {return _maxCustomers;}
            set 
    		{ 
    			if(_maxCustomers != value)
    			{
    				_maxCustomers = value; 
    				
    				
    
    				OnPropertyChanged("MaxCustomers");
    			}
    		}
        }
        private int _maxCustomers;
    
    
    	[DataMember]
        public virtual string DogNumber
        {
            get {return _dogNumber;}
            set 
    		{ 
    			if(_dogNumber != value)
    			{
    				_dogNumber = value; 
    				
    				
    
    				OnPropertyChanged("DogNumber");
    			}
    		}
        }
        private string _dogNumber;
    
    
    	[DataMember]
        public virtual string SerialNumber
        {
            get {return _serialNumber;}
            set 
    		{ 
    			if(_serialNumber != value)
    			{
    				_serialNumber = value; 
    				
    				
    
    				OnPropertyChanged("SerialNumber");
    			}
    		}
        }
        private string _serialNumber;
    
    
    	[DataMember]
        public virtual string Delivery
        {
            get {return _delivery;}
            set 
    		{ 
    			if(_delivery != value)
    			{
    				_delivery = value; 
    				
    				
    
    				OnPropertyChanged("Delivery");
    			}
    		}
        }
        private string _delivery;
    
    
    	[DataMember]
        public virtual string GuaranteeExp
        {
            get {return _guaranteeExp;}
            set 
    		{ 
    			if(_guaranteeExp != value)
    			{
    				_guaranteeExp = value; 
    				
    				
    
    				OnPropertyChanged("GuaranteeExp");
    			}
    		}
        }
        private string _guaranteeExp;
    
    
    	[DataMember]
        public virtual string UseExp
        {
            get {return _useExp;}
            set 
    		{ 
    			if(_useExp != value)
    			{
    				_useExp = value; 
    				
    				
    
    				OnPropertyChanged("UseExp");
    			}
    		}
        }
        private string _useExp;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SettingsFolderId
        {
            get {return _settingsFolderId;}
            set 
    		{ 
    			if(_settingsFolderId != value)
    			{
    				_settingsFolderId = value; 
    				
    				
    
    				OnPropertyChanged("SettingsFolderId");
    			}
    		}
        }
        private Nullable<System.Guid> _settingsFolderId;
    
    
    	[DataMember]
        public virtual bool UseController
        {
            get {return _useController;}
            set 
    		{ 
    			if(_useController != value)
    			{
    				_useController = value; 
    				
    				
    
    				OnPropertyChanged("UseController");
    			}
    		}
        }
        private bool _useController;
    
    
    	[DataMember]
        public virtual bool IsOnline
        {
            get {return _isOnline;}
            set 
    		{ 
    			if(_isOnline != value)
    			{
    				_isOnline = value; 
    				
    				
    
    				OnPropertyChanged("IsOnline");
    			}
    		}
        }
        private bool _isOnline;
    
    
    	[DataMember]
        public virtual string MacAddress
        {
            get {return _macAddress;}
            set 
    		{ 
    			if(_macAddress != value)
    			{
    				_macAddress = value; 
    				
    				
    
    				OnPropertyChanged("MacAddress");
    			}
    		}
        }
        private string _macAddress;
    
    
    	[DataMember]
        public virtual Nullable<decimal> Cost
        {
            get {return _cost;}
            set 
    		{ 
    			if(_cost != value)
    			{
    				_cost = value; 
    				
    				
    
    				OnPropertyChanged("Cost");
    			}
    		}
        }
        private Nullable<decimal> _cost;
    
    
    	[DataMember]
        public virtual int Order
        {
            get {return _order;}
            set 
    		{ 
    			if(_order != value)
    			{
    				_order = value; 
    				
    				
    
    				OnPropertyChanged("Order");
    			}
    		}
        }
        private int _order;
    
    
    	[DataMember]
        public virtual string ModelName
        {
            get {return _modelName;}
            set 
    		{ 
    			if(_modelName != value)
    			{
    				_modelName = value; 
    				
    				
    
    				OnPropertyChanged("ModelName");
    			}
    		}
        }
        private string _modelName;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual TreatmentType TreatmentType
        {
            get { return _treatmentType; }
            set
            {
                if (!ReferenceEquals(_treatmentType, value))
                {
                    var previousValue = _treatmentType;
                    _treatmentType = value;
                    FixupTreatmentType(previousValue);
                }
            }
        }
        private TreatmentType _treatmentType;
    
        public virtual ICollection<TreatmentEvent> TreatmentEvents
        {
            get
            {
                if (_treatmentEvents == null)
                {
                    var newCollection = new FixupCollection<TreatmentEvent>();
                    newCollection.CollectionChanged += FixupTreatmentEvents;
                    _treatmentEvents = newCollection;
                }
                return _treatmentEvents;
            }
            set
            {
                if (!ReferenceEquals(_treatmentEvents, value))
                {
                    var previousValue = _treatmentEvents as FixupCollection<TreatmentEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentEvents;
                    }
                    _treatmentEvents = value;
                    var newValue = value as FixupCollection<TreatmentEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentEvents;
                    }
    				OnPropertyChanged("TreatmentEvents");
                }
            }
        }
        private ICollection<TreatmentEvent> _treatmentEvents;
    
        public virtual ICollection<TreatmentEvent> TreatmentEvents_1
        {
            get
            {
                if (_treatmentEvents_1 == null)
                {
                    var newCollection = new FixupCollection<TreatmentEvent>();
                    newCollection.CollectionChanged += FixupTreatmentEvents_1;
                    _treatmentEvents_1 = newCollection;
                }
                return _treatmentEvents_1;
            }
            set
            {
                if (!ReferenceEquals(_treatmentEvents_1, value))
                {
                    var previousValue = _treatmentEvents_1 as FixupCollection<TreatmentEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentEvents_1;
                    }
                    _treatmentEvents_1 = value;
                    var newValue = value as FixupCollection<TreatmentEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentEvents_1;
                    }
    				OnPropertyChanged("TreatmentEvents_1");
                }
            }
        }
        private ICollection<TreatmentEvent> _treatmentEvents_1;

        #endregion

        #region Association Fixup
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.Treatments.Contains(this))
            {
                previousValue.Treatments.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.Treatments.Contains(this))
                {
                    Division.Treatments.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (CreatedBy != null)
            {
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupTreatmentType(TreatmentType previousValue)
        {
            if (previousValue != null && previousValue.Treatments.Contains(this))
            {
                previousValue.Treatments.Remove(this);
            }
    
            if (TreatmentType != null)
            {
                if (!TreatmentType.Treatments.Contains(this))
                {
                    TreatmentType.Treatments.Add(this);
                }
                if (TreatmentTypeId != TreatmentType.Id)
                {
                    TreatmentTypeId = TreatmentType.Id;
                }
            }
        }
    
        private void FixupTreatmentEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentEvent item in e.NewItems)
                {
                    item.TreatmentId = Id;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentEvent item in e.OldItems)
                {
                }
            }
        }
    
        private void FixupTreatmentEvents_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentEvent item in e.NewItems)
                {
                    item.Treatment = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Treatment, this))
                    {
                        item.Treatment = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
