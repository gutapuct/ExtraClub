//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class TicketCorrection : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid TicketId
        {
            get { return _ticketId; }
            set
            {
                if (_ticketId != value)
                {
                    if (Ticket != null && Ticket.Id != value)
                    {
                        Ticket = null;
                    }
                    _ticketId = value;
    
    				OnPropertyChanged("TicketId");
                }
            }
        }
        private System.Guid _ticketId;
    
    
    	[DataMember]
        public virtual System.Guid UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (User != null && User.UserId != value)
                    {
                        User = null;
                    }
                    _userId = value;
    
    				OnPropertyChanged("UserId");
                }
            }
        }
        private System.Guid _userId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual string PropertyName
        {
            get {return _propertyName;}
            set 
    		{ 
    			if(_propertyName != value)
    			{
    				_propertyName = value; 
    				
    				
    
    				OnPropertyChanged("PropertyName");
    			}
    		}
        }
        private string _propertyName;
    
    
    	[DataMember]
        public virtual string OldValue
        {
            get {return _oldValue;}
            set 
    		{ 
    			if(_oldValue != value)
    			{
    				_oldValue = value; 
    				
    				
    
    				OnPropertyChanged("OldValue");
    			}
    		}
        }
        private string _oldValue;
    
    
    	[DataMember]
        public virtual string NewValue
        {
            get {return _newValue;}
            set 
    		{ 
    			if(_newValue != value)
    			{
    				_newValue = value; 
    				
    				
    
    				OnPropertyChanged("NewValue");
    			}
    		}
        }
        private string _newValue;
    
    
    	[DataMember]
        public virtual string Comment
        {
            get {return _comment;}
            set 
    		{ 
    			if(_comment != value)
    			{
    				_comment = value; 
    				
    				
    
    				OnPropertyChanged("Comment");
    			}
    		}
        }
        private string _comment;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Ticket Ticket
        {
            get { return _ticket; }
            set
            {
                if (!ReferenceEquals(_ticket, value))
                {
                    var previousValue = _ticket;
                    _ticket = value;
                    FixupTicket(previousValue);
                }
            }
        }
        private Ticket _ticket;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion

        #region Association Fixup
    
        private void FixupTicket(Ticket previousValue)
        {
            if (previousValue != null && previousValue.TicketCorrections.Contains(this))
            {
                previousValue.TicketCorrections.Remove(this);
            }
    
            if (Ticket != null)
            {
                if (!Ticket.TicketCorrections.Contains(this))
                {
                    Ticket.TicketCorrections.Add(this);
                }
                if (TicketId != Ticket.Id)
                {
                    TicketId = Ticket.Id;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.TicketCorrections.Contains(this))
            {
                previousValue.TicketCorrections.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.TicketCorrections.Contains(this))
                {
                    User.TicketCorrections.Add(this);
                }
                if (UserId != User.UserId)
                {
                    UserId = User.UserId;
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
