//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class EmployeeCategory : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual string Description
        {
            get {return _description;}
            set 
    		{ 
    			if(_description != value)
    			{
    				_description = value; 
    				
    				
    
    				OnPropertyChanged("Description");
    			}
    		}
        }
        private string _description;
    
    
    	[DataMember]
        public virtual decimal SalaryMulti
        {
            get {return _salaryMulti;}
            set 
    		{ 
    			if(_salaryMulti != value)
    			{
    				_salaryMulti = value; 
    				
    				
    
    				OnPropertyChanged("SalaryMulti");
    			}
    		}
        }
        private decimal _salaryMulti;
    
    
    	[DataMember]
        public virtual bool IsPupilContract
        {
            get {return _isPupilContract;}
            set 
    		{ 
    			if(_isPupilContract != value)
    			{
    				_isPupilContract = value; 
    				
    				
    
    				OnPropertyChanged("IsPupilContract");
    			}
    		}
        }
        private bool _isPupilContract;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> PrevCategoryId
        {
            get { return _prevCategoryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_prevCategoryId != value)
                    {
                        if (PreviousCategory != null && PreviousCategory.Id != value)
                        {
                            PreviousCategory = null;
                        }
                        _prevCategoryId = value;
        
        				OnPropertyChanged("PrevCategoryId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _prevCategoryId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual ICollection<Job> Jobs
        {
            get
            {
                if (_jobs == null)
                {
                    var newCollection = new FixupCollection<Job>();
                    newCollection.CollectionChanged += FixupJobs;
                    _jobs = newCollection;
                }
                return _jobs;
            }
            set
            {
                if (!ReferenceEquals(_jobs, value))
                {
                    var previousValue = _jobs as FixupCollection<Job>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobs;
                    }
                    _jobs = value;
                    var newValue = value as FixupCollection<Job>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobs;
                    }
    				OnPropertyChanged("Jobs");
                }
            }
        }
        private ICollection<Job> _jobs;
    
        public virtual ICollection<EmployeeCategory> ChildCategories
        {
            get
            {
                if (_childCategories == null)
                {
                    var newCollection = new FixupCollection<EmployeeCategory>();
                    newCollection.CollectionChanged += FixupChildCategories;
                    _childCategories = newCollection;
                }
                return _childCategories;
            }
            set
            {
                if (!ReferenceEquals(_childCategories, value))
                {
                    var previousValue = _childCategories as FixupCollection<EmployeeCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildCategories;
                    }
                    _childCategories = value;
                    var newValue = value as FixupCollection<EmployeeCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildCategories;
                    }
    				OnPropertyChanged("ChildCategories");
                }
            }
        }
        private ICollection<EmployeeCategory> _childCategories;
    
        public virtual EmployeeCategory PreviousCategory
        {
            get { return _previousCategory; }
            set
            {
                if (!ReferenceEquals(_previousCategory, value))
                {
                    var previousValue = _previousCategory;
                    _previousCategory = value;
                    FixupPreviousCategory(previousValue);
                }
            }
        }
        private EmployeeCategory _previousCategory;
    
        public virtual ICollection<JobPlacement> JobPlacements
        {
            get
            {
                if (_jobPlacements == null)
                {
                    var newCollection = new FixupCollection<JobPlacement>();
                    newCollection.CollectionChanged += FixupJobPlacements;
                    _jobPlacements = newCollection;
                }
                return _jobPlacements;
            }
            set
            {
                if (!ReferenceEquals(_jobPlacements, value))
                {
                    var previousValue = _jobPlacements as FixupCollection<JobPlacement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobPlacements;
                    }
                    _jobPlacements = value;
                    var newValue = value as FixupCollection<JobPlacement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobPlacements;
                    }
    				OnPropertyChanged("JobPlacements");
                }
            }
        }
        private ICollection<JobPlacement> _jobPlacements;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.EmployeeCategories.Contains(this))
            {
                previousValue.EmployeeCategories.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.EmployeeCategories.Contains(this))
                {
                    Company.EmployeeCategories.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupPreviousCategory(EmployeeCategory previousValue)
        {
            if (previousValue != null && previousValue.ChildCategories.Contains(this))
            {
                previousValue.ChildCategories.Remove(this);
            }
    
            if (PreviousCategory != null)
            {
                if (!PreviousCategory.ChildCategories.Contains(this))
                {
                    PreviousCategory.ChildCategories.Add(this);
                }
                if (PrevCategoryId != PreviousCategory.Id)
                {
                    PrevCategoryId = PreviousCategory.Id;
                }
            }
            else if (!_settingFK)
            {
                PrevCategoryId = null;
            }
        }
    
        private void FixupJobs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Job item in e.NewItems)
                {
                    if (!item.EmployeeCategories.Contains(this))
                    {
                        item.EmployeeCategories.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Job item in e.OldItems)
                {
                    if (item.EmployeeCategories.Contains(this))
                    {
                        item.EmployeeCategories.Remove(this);
                    }
                }
            }
        }
    
        private void FixupChildCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeCategory item in e.NewItems)
                {
                    item.PreviousCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.PreviousCategory, this))
                    {
                        item.PreviousCategory = null;
                    }
                }
            }
        }
    
        private void FixupJobPlacements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (JobPlacement item in e.NewItems)
                {
                    item.EmployeeCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JobPlacement item in e.OldItems)
                {
                    if (ReferenceEquals(item.EmployeeCategory, this))
                    {
                        item.EmployeeCategory = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
