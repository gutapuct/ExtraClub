//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class TicketFreezeReason : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual bool IsBackDayAllowed
        {
            get {return _isBackDayAllowed;}
            set 
    		{ 
    			if(_isBackDayAllowed != value)
    			{
    				_isBackDayAllowed = value; 
    				
    				
    
    				OnPropertyChanged("IsBackDayAllowed");
    			}
    		}
        }
        private bool _isBackDayAllowed;
    
    
    	[DataMember]
        public virtual decimal K4
        {
            get {return _k4;}
            set 
    		{ 
    			if(_k4 != value)
    			{
    				_k4 = value; 
    				
    				
    
    				OnPropertyChanged("K4");
    			}
    		}
        }
        private decimal _k4;
    
    
    	[DataMember]
        public virtual bool IsReturnReason
        {
            get {return _isReturnReason;}
            set 
    		{ 
    			if(_isReturnReason != value)
    			{
    				_isReturnReason = value; 
    				
    				
    
    				OnPropertyChanged("IsReturnReason");
    			}
    		}
        }
        private bool _isReturnReason;
    
    
    	[DataMember]
        public virtual bool IsAvail
        {
            get {return _isAvail;}
            set 
    		{ 
    			if(_isAvail != value)
    			{
    				_isAvail = value; 
    				
    				
    
    				OnPropertyChanged("IsAvail");
    			}
    		}
        }
        private bool _isAvail;
    
    
    	[DataMember]
        public virtual string NameEn
        {
            get {return _nameEn;}
            set 
    		{ 
    			if(_nameEn != value)
    			{
    				_nameEn = value; 
    				
    				
    
    				OnPropertyChanged("NameEn");
    			}
    		}
        }
        private string _nameEn;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<TicketFreeze> TicketFreezes
        {
            get
            {
                if (_ticketFreezes == null)
                {
                    var newCollection = new FixupCollection<TicketFreeze>();
                    newCollection.CollectionChanged += FixupTicketFreezes;
                    _ticketFreezes = newCollection;
                }
                return _ticketFreezes;
            }
            set
            {
                if (!ReferenceEquals(_ticketFreezes, value))
                {
                    var previousValue = _ticketFreezes as FixupCollection<TicketFreeze>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketFreezes;
                    }
                    _ticketFreezes = value;
                    var newValue = value as FixupCollection<TicketFreeze>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketFreezes;
                    }
    				OnPropertyChanged("TicketFreezes");
                }
            }
        }
        private ICollection<TicketFreeze> _ticketFreezes;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;

        #endregion

        #region Association Fixup
    
        private void FixupCreatedBy(User previousValue)
        {
            if (CreatedBy != null)
            {
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupTicketFreezes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketFreeze item in e.NewItems)
                {
                    item.TicketFreezeReason = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketFreeze item in e.OldItems)
                {
                    if (ReferenceEquals(item.TicketFreezeReason, this))
                    {
                        item.TicketFreezeReason = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
