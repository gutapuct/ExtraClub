//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class BarOrder : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CustomerId
        {
            get { return _customerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerId != value)
                    {
                        if (Customer != null && Customer.Id != value)
                        {
                            Customer = null;
                        }
                        _customerId = value;
        
        				OnPropertyChanged("CustomerId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _customerId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_divisionId != value)
                    {
                        if (Division != null && Division.Id != value)
                        {
                            Division = null;
                        }
                        _divisionId = value;
        
        				OnPropertyChanged("DivisionId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual System.DateTime PurchaseDate
        {
            get {return _purchaseDate;}
            set 
    		{ 
    			if(_purchaseDate != value)
    			{
    				_purchaseDate = value; 
    				
    				_purchaseDate = DateTime.SpecifyKind(_purchaseDate, DateTimeKind.Local);
    
    				OnPropertyChanged("PurchaseDate");
    			}
    		}
        }
        private System.DateTime _purchaseDate;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual int OrderNumber
        {
            get {return _orderNumber;}
            set 
    		{ 
    			if(_orderNumber != value)
    			{
    				_orderNumber = value; 
    				
    				
    
    				OnPropertyChanged("OrderNumber");
    			}
    		}
        }
        private int _orderNumber;
    
    
    	[DataMember]
        public virtual decimal CashPayment
        {
            get {return _cashPayment;}
            set 
    		{ 
    			if(_cashPayment != value)
    			{
    				_cashPayment = value; 
    				
    				
    
    				OnPropertyChanged("CashPayment");
    			}
    		}
        }
        private decimal _cashPayment;
    
    
    	[DataMember]
        public virtual decimal DepositPayment
        {
            get {return _depositPayment;}
            set 
    		{ 
    			if(_depositPayment != value)
    			{
    				_depositPayment = value; 
    				
    				
    
    				OnPropertyChanged("DepositPayment");
    			}
    		}
        }
        private decimal _depositPayment;
    
    
    	[DataMember]
        public virtual decimal CardPayment
        {
            get {return _cardPayment;}
            set 
    		{ 
    			if(_cardPayment != value)
    			{
    				_cardPayment = value; 
    				
    				
    
    				OnPropertyChanged("CardPayment");
    			}
    		}
        }
        private decimal _cardPayment;
    
    
    	[DataMember]
        public virtual string CardNumber
        {
            get {return _cardNumber;}
            set 
    		{ 
    			if(_cardNumber != value)
    			{
    				_cardNumber = value; 
    				
    				
    
    				OnPropertyChanged("CardNumber");
    			}
    		}
        }
        private string _cardNumber;
    
    
    	[DataMember]
        public virtual string CardAuth
        {
            get {return _cardAuth;}
            set 
    		{ 
    			if(_cardAuth != value)
    			{
    				_cardAuth = value; 
    				
    				
    
    				OnPropertyChanged("CardAuth");
    			}
    		}
        }
        private string _cardAuth;
    
    
    	[DataMember]
        public virtual Nullable<decimal> BonusPayment
        {
            get {return _bonusPayment;}
            set 
    		{ 
    			if(_bonusPayment != value)
    			{
    				_bonusPayment = value; 
    				
    				
    
    				OnPropertyChanged("BonusPayment");
    			}
    		}
        }
        private Nullable<decimal> _bonusPayment;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual byte[] Content
        {
            get {return _content;}
            set 
    		{ 
    			if(_content != value)
    			{
    				_content = value; 
    				
    				
    
    				OnPropertyChanged("Content");
    			}
    		}
        }
        private byte[] _content;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> CertificateId
        {
            get { return _certificateId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_certificateId != value)
                    {
                        if (Certificate != null && Certificate.Id != value)
                        {
                            Certificate = null;
                        }
                        _certificateId = value;
        
        				OnPropertyChanged("CertificateId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _certificateId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ProviderId
        {
            get { return _providerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_providerId != value)
                    {
                        if (Provider != null && Provider.Id != value)
                        {
                            Provider = null;
                        }
                        _providerId = value;
        
        				OnPropertyChanged("ProviderId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _providerId;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> PaymentDate
        {
            get {return _paymentDate;}
            set 
    		{ 
    			if(_paymentDate != value)
    			{
    				_paymentDate = value; 
    				
    				if (_paymentDate.HasValue) _paymentDate = DateTime.SpecifyKind(_paymentDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("PaymentDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _paymentDate;
    
    
    	[DataMember]
        public virtual string PaymentComments
        {
            get {return _paymentComments;}
            set 
    		{ 
    			if(_paymentComments != value)
    			{
    				_paymentComments = value; 
    				
    				
    
    				OnPropertyChanged("PaymentComments");
    			}
    		}
        }
        private string _paymentComments;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> GoodActionId
        {
            get {return _goodActionId;}
            set 
    		{ 
    			if(_goodActionId != value)
    			{
    				_goodActionId = value; 
    				
    				
    
    				OnPropertyChanged("GoodActionId");
    			}
    		}
        }
        private Nullable<System.Guid> _goodActionId;
    
    
    	[DataMember]
        public virtual int SectionNumber
        {
            get {return _sectionNumber;}
            set 
    		{ 
    			if(_sectionNumber != value)
    			{
    				_sectionNumber = value; 
    				
    				
    
    				OnPropertyChanged("SectionNumber");
    			}
    		}
        }
        private int _sectionNumber;
    
    
    	[DataMember]
        public virtual Nullable<int> Kind1C
        {
            get { return _kind1C; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_kind1C != value)
                    {
                        if (Kinds1C != null && Kinds1C.Id != value)
                        {
                            Kinds1C = null;
                        }
                        _kind1C = value;
        
        				OnPropertyChanged("Kind1C");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _kind1C;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<GoodSale> GoodSales
        {
            get
            {
                if (_goodSales == null)
                {
                    var newCollection = new FixupCollection<GoodSale>();
                    newCollection.CollectionChanged += FixupGoodSales;
                    _goodSales = newCollection;
                }
                return _goodSales;
            }
            set
            {
                if (!ReferenceEquals(_goodSales, value))
                {
                    var previousValue = _goodSales as FixupCollection<GoodSale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodSales;
                    }
                    _goodSales = value;
                    var newValue = value as FixupCollection<GoodSale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodSales;
                    }
    				OnPropertyChanged("GoodSales");
                }
            }
        }
        private ICollection<GoodSale> _goodSales;
    
        public virtual ICollection<Certificate> Certificates
        {
            get
            {
                if (_certificates == null)
                {
                    var newCollection = new FixupCollection<Certificate>();
                    newCollection.CollectionChanged += FixupCertificates;
                    _certificates = newCollection;
                }
                return _certificates;
            }
            set
            {
                if (!ReferenceEquals(_certificates, value))
                {
                    var previousValue = _certificates as FixupCollection<Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificates;
                    }
                    _certificates = value;
                    var newValue = value as FixupCollection<Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificates;
                    }
    				OnPropertyChanged("Certificates");
                }
            }
        }
        private ICollection<Certificate> _certificates;
    
        public virtual Certificate Certificate
        {
            get { return _certificate; }
            set
            {
                if (!ReferenceEquals(_certificate, value))
                {
                    var previousValue = _certificate;
                    _certificate = value;
                    FixupCertificate(previousValue);
                }
            }
        }
        private Certificate _certificate;
    
        public virtual Provider Provider
        {
            get { return _provider; }
            set
            {
                if (!ReferenceEquals(_provider, value))
                {
                    var previousValue = _provider;
                    _provider = value;
                    FixupProvider(previousValue);
                }
            }
        }
        private Provider _provider;
    
        public virtual ICollection<Certificate> Certificates1
        {
            get
            {
                if (_certificates1 == null)
                {
                    var newCollection = new FixupCollection<Certificate>();
                    newCollection.CollectionChanged += FixupCertificates1;
                    _certificates1 = newCollection;
                }
                return _certificates1;
            }
            set
            {
                if (!ReferenceEquals(_certificates1, value))
                {
                    var previousValue = _certificates1 as FixupCollection<Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificates1;
                    }
                    _certificates1 = value;
                    var newValue = value as FixupCollection<Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificates1;
                    }
    				OnPropertyChanged("Certificates1");
                }
            }
        }
        private ICollection<Certificate> _certificates1;
    
        public virtual Kinds1C Kinds1C
        {
            get { return _kinds1C; }
            set
            {
                if (!ReferenceEquals(_kinds1C, value))
                {
                    var previousValue = _kinds1C;
                    _kinds1C = value;
                    FixupKinds1C(previousValue);
                }
            }
        }
        private Kinds1C _kinds1C;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.BarOrders.Contains(this))
            {
                previousValue.BarOrders.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.BarOrders.Contains(this))
                {
                    Customer.BarOrders.Add(this);
                }
                if (CustomerId != Customer.Id)
                {
                    CustomerId = Customer.Id;
                }
            }
        }
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.BarOrders.Contains(this))
            {
                previousValue.BarOrders.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.BarOrders.Contains(this))
                {
                    Division.BarOrders.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (CreatedBy != null)
            {
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupCertificate(Certificate previousValue)
        {
            if (previousValue != null && previousValue.BarOrders.Contains(this))
            {
                previousValue.BarOrders.Remove(this);
            }
    
            if (Certificate != null)
            {
                if (!Certificate.BarOrders.Contains(this))
                {
                    Certificate.BarOrders.Add(this);
                }
                if (CertificateId != Certificate.Id)
                {
                    CertificateId = Certificate.Id;
                }
            }
            else if (!_settingFK)
            {
                CertificateId = null;
            }
        }
    
        private void FixupProvider(Provider previousValue)
        {
            if (previousValue != null && previousValue.BarOrders.Contains(this))
            {
                previousValue.BarOrders.Remove(this);
            }
    
            if (Provider != null)
            {
                if (!Provider.BarOrders.Contains(this))
                {
                    Provider.BarOrders.Add(this);
                }
                if (ProviderId != Provider.Id)
                {
                    ProviderId = Provider.Id;
                }
            }
            else if (!_settingFK)
            {
                ProviderId = null;
            }
        }
    
        private void FixupKinds1C(Kinds1C previousValue)
        {
            if (previousValue != null && previousValue.BarOrders.Contains(this))
            {
                previousValue.BarOrders.Remove(this);
            }
    
            if (Kinds1C != null)
            {
                if (!Kinds1C.BarOrders.Contains(this))
                {
                    Kinds1C.BarOrders.Add(this);
                }
                if (Kind1C != Kinds1C.Id)
                {
                    Kind1C = Kinds1C.Id;
                }
            }
            else if (!_settingFK)
            {
                Kind1C = null;
            }
        }
    
        private void FixupGoodSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodSale item in e.NewItems)
                {
                    item.BarOrder = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodSale item in e.OldItems)
                {
                    if (ReferenceEquals(item.BarOrder, this))
                    {
                        item.BarOrder = null;
                    }
                }
            }
        }
    
        private void FixupCertificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate item in e.NewItems)
                {
                    item.UsedInOrder = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.UsedInOrder, this))
                    {
                        item.UsedInOrder = null;
                    }
                }
            }
        }
    
        private void FixupCertificates1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate item in e.NewItems)
                {
                    item.SellBarOrder = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.SellBarOrder, this))
                    {
                        item.SellBarOrder = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
