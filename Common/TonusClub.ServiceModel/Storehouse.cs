//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Storehouse : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                if (_companyId != value)
                {
                    if (Company != null && Company.CompanyId != value)
                    {
                        Company = null;
                    }
                    _companyId = value;
    
    				OnPropertyChanged("CompanyId");
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                if (_divisionId != value)
                {
                    if (Division != null && Division.Id != value)
                    {
                        Division = null;
                    }
                    _divisionId = value;
    
    				OnPropertyChanged("DivisionId");
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual string Address
        {
            get {return _address;}
            set 
    		{ 
    			if(_address != value)
    			{
    				_address = value; 
    				
    				
    
    				OnPropertyChanged("Address");
    			}
    		}
        }
        private string _address;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual string Responsible
        {
            get {return _responsible;}
            set 
    		{ 
    			if(_responsible != value)
    			{
    				_responsible = value; 
    				
    				
    
    				OnPropertyChanged("Responsible");
    			}
    		}
        }
        private string _responsible;
    
    
    	[DataMember]
        public virtual bool BarSale
        {
            get {return _barSale;}
            set 
    		{ 
    			if(_barSale != value)
    			{
    				_barSale = value; 
    				
    				
    
    				OnPropertyChanged("BarSale");
    			}
    		}
        }
        private bool _barSale;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SettingsFolderId
        {
            get {return _settingsFolderId;}
            set 
    		{ 
    			if(_settingsFolderId != value)
    			{
    				_settingsFolderId = value; 
    				
    				
    
    				OnPropertyChanged("SettingsFolderId");
    			}
    		}
        }
        private Nullable<System.Guid> _settingsFolderId;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual ICollection<Consignment> Consignments
        {
            get
            {
                if (_consignments == null)
                {
                    var newCollection = new FixupCollection<Consignment>();
                    newCollection.CollectionChanged += FixupConsignments;
                    _consignments = newCollection;
                }
                return _consignments;
            }
            set
            {
                if (!ReferenceEquals(_consignments, value))
                {
                    var previousValue = _consignments as FixupCollection<Consignment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConsignments;
                    }
                    _consignments = value;
                    var newValue = value as FixupCollection<Consignment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConsignments;
                    }
    				OnPropertyChanged("Consignments");
                }
            }
        }
        private ICollection<Consignment> _consignments;
    
        public virtual ICollection<Consignment> Consignments1
        {
            get
            {
                if (_consignments1 == null)
                {
                    var newCollection = new FixupCollection<Consignment>();
                    newCollection.CollectionChanged += FixupConsignments1;
                    _consignments1 = newCollection;
                }
                return _consignments1;
            }
            set
            {
                if (!ReferenceEquals(_consignments1, value))
                {
                    var previousValue = _consignments1 as FixupCollection<Consignment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConsignments1;
                    }
                    _consignments1 = value;
                    var newValue = value as FixupCollection<Consignment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConsignments1;
                    }
    				OnPropertyChanged("Consignments1");
                }
            }
        }
        private ICollection<Consignment> _consignments1;
    
        public virtual ICollection<GoodSale> GoodSales
        {
            get
            {
                if (_goodSales == null)
                {
                    var newCollection = new FixupCollection<GoodSale>();
                    newCollection.CollectionChanged += FixupGoodSales;
                    _goodSales = newCollection;
                }
                return _goodSales;
            }
            set
            {
                if (!ReferenceEquals(_goodSales, value))
                {
                    var previousValue = _goodSales as FixupCollection<GoodSale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodSales;
                    }
                    _goodSales = value;
                    var newValue = value as FixupCollection<GoodSale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodSales;
                    }
    				OnPropertyChanged("GoodSales");
                }
            }
        }
        private ICollection<GoodSale> _goodSales;
    
        public virtual ICollection<Rent> Rents
        {
            get
            {
                if (_rents == null)
                {
                    var newCollection = new FixupCollection<Rent>();
                    newCollection.CollectionChanged += FixupRents;
                    _rents = newCollection;
                }
                return _rents;
            }
            set
            {
                if (!ReferenceEquals(_rents, value))
                {
                    var previousValue = _rents as FixupCollection<Rent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRents;
                    }
                    _rents = value;
                    var newValue = value as FixupCollection<Rent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRents;
                    }
    				OnPropertyChanged("Rents");
                }
            }
        }
        private ICollection<Rent> _rents;

        #endregion

        #region Association Fixup
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Storehouses.Contains(this))
            {
                previousValue.Storehouses.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Storehouses.Contains(this))
                {
                    Company.Storehouses.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.Storehouses.Contains(this))
            {
                previousValue.Storehouses.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.Storehouses.Contains(this))
                {
                    Division.Storehouses.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }
    
        private void FixupConsignments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Consignment item in e.NewItems)
                {
                    item.DestinationStorehouse = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Consignment item in e.OldItems)
                {
                    if (ReferenceEquals(item.DestinationStorehouse, this))
                    {
                        item.DestinationStorehouse = null;
                    }
                }
            }
        }
    
        private void FixupConsignments1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Consignment item in e.NewItems)
                {
                    item.SourceStorehouse = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Consignment item in e.OldItems)
                {
                    if (ReferenceEquals(item.SourceStorehouse, this))
                    {
                        item.SourceStorehouse = null;
                    }
                }
            }
        }
    
        private void FixupGoodSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodSale item in e.NewItems)
                {
                    item.Storehouse = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodSale item in e.OldItems)
                {
                    if (ReferenceEquals(item.Storehouse, this))
                    {
                        item.Storehouse = null;
                    }
                }
            }
        }
    
        private void FixupRents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rent item in e.NewItems)
                {
                    item.Storehouse = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Storehouse, this))
                    {
                        item.Storehouse = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
