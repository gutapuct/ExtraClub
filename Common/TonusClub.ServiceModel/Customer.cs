//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Customer : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual string FirstName
        {
            get {return _firstName;}
            set 
    		{ 
    			if(_firstName != value)
    			{
    				_firstName = value; 
    				
    				
    
    				OnPropertyChanged("FirstName");
    			}
    		}
        }
        private string _firstName;
    
    
    	[DataMember]
        public virtual string MiddleName
        {
            get {return _middleName;}
            set 
    		{ 
    			if(_middleName != value)
    			{
    				_middleName = value; 
    				
    				
    
    				OnPropertyChanged("MiddleName");
    			}
    		}
        }
        private string _middleName;
    
    
    	[DataMember]
        public virtual string LastName
        {
            get {return _lastName;}
            set 
    		{ 
    			if(_lastName != value)
    			{
    				_lastName = value; 
    				
    				
    
    				OnPropertyChanged("LastName");
    			}
    		}
        }
        private string _lastName;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> Birthday
        {
            get {return _birthday;}
            set 
    		{ 
    			if(_birthday != value)
    			{
    				_birthday = value; 
    				
    				if (_birthday.HasValue) _birthday = DateTime.SpecifyKind(_birthday.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("Birthday");
    			}
    		}
        }
        private Nullable<System.DateTime> _birthday;
    
    
    	[DataMember]
        public virtual bool Gender
        {
            get {return _gender;}
            set 
    		{ 
    			if(_gender != value)
    			{
    				_gender = value; 
    				
    				
    
    				OnPropertyChanged("Gender");
    			}
    		}
        }
        private bool _gender;
    
    
    	[DataMember]
        public virtual string Phone1
        {
            get {return _phone1;}
            set 
    		{ 
    			if(_phone1 != value)
    			{
    				_phone1 = value; 
    				
    				
    
    				OnPropertyChanged("Phone1");
    			}
    		}
        }
        private string _phone1;
    
    
    	[DataMember]
        public virtual string Email
        {
            get {return _email;}
            set 
    		{ 
    			if(_email != value)
    			{
    				_email = value; 
    				
    				
    
    				OnPropertyChanged("Email");
    			}
    		}
        }
        private string _email;
    
    
    	[DataMember]
        public virtual string Job
        {
            get {return _job;}
            set 
    		{ 
    			if(_job != value)
    			{
    				_job = value; 
    				
    				
    
    				OnPropertyChanged("Job");
    			}
    		}
        }
        private string _job;
    
    
    	[DataMember]
        public virtual string Comments
        {
            get {return _comments;}
            set 
    		{ 
    			if(_comments != value)
    			{
    				_comments = value; 
    				
    				
    
    				OnPropertyChanged("Comments");
    			}
    		}
        }
        private string _comments;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> StatusId
        {
            get {return _statusId;}
            set 
    		{ 
    			if(_statusId != value)
    			{
    				_statusId = value; 
    				
    				
    
    				OnPropertyChanged("StatusId");
    			}
    		}
        }
        private Nullable<System.Guid> _statusId;
    
    
    	[DataMember]
        public virtual Nullable<bool> MailingList
        {
            get {return _mailingList;}
            set 
    		{ 
    			if(_mailingList != value)
    			{
    				_mailingList = value; 
    				
    				
    
    				OnPropertyChanged("MailingList");
    			}
    		}
        }
        private Nullable<bool> _mailingList;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ClubId
        {
            get {return _clubId;}
            set 
    		{ 
    			if(_clubId != value)
    			{
    				_clubId = value; 
    				
    				
    
    				OnPropertyChanged("ClubId");
    			}
    		}
        }
        private Nullable<System.Guid> _clubId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> ModifiedOn
        {
            get {return _modifiedOn;}
            set 
    		{ 
    			if(_modifiedOn != value)
    			{
    				_modifiedOn = value; 
    				
    				if (_modifiedOn.HasValue) _modifiedOn = DateTime.SpecifyKind(_modifiedOn.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("ModifiedOn");
    			}
    		}
        }
        private Nullable<System.DateTime> _modifiedOn;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string tmp
        {
            get {return _tmp;}
            set 
    		{ 
    			if(_tmp != value)
    			{
    				_tmp = value; 
    				
    				
    
    				OnPropertyChanged("tmp");
    			}
    		}
        }
        private string _tmp;
    
    
    	[DataMember]
        public virtual bool IsEmployee
        {
            get {return _isEmployee;}
            set 
    		{ 
    			if(_isEmployee != value)
    			{
    				_isEmployee = value; 
    				
    				
    
    				OnPropertyChanged("IsEmployee");
    			}
    		}
        }
        private bool _isEmployee;
    
    
    	[DataMember]
        public virtual string Phone2
        {
            get {return _phone2;}
            set 
    		{ 
    			if(_phone2 != value)
    			{
    				_phone2 = value; 
    				
    				
    
    				OnPropertyChanged("Phone2");
    			}
    		}
        }
        private string _phone2;
    
    
    	[DataMember]
        public virtual string AddrIndex
        {
            get {return _addrIndex;}
            set 
    		{ 
    			if(_addrIndex != value)
    			{
    				_addrIndex = value; 
    				
    				
    
    				OnPropertyChanged("AddrIndex");
    			}
    		}
        }
        private string _addrIndex;
    
    
    	[DataMember]
        public virtual string AddrCity
        {
            get {return _addrCity;}
            set 
    		{ 
    			if(_addrCity != value)
    			{
    				_addrCity = value; 
    				
    				
    
    				OnPropertyChanged("AddrCity");
    			}
    		}
        }
        private string _addrCity;
    
    
    	[DataMember]
        public virtual string AddrStreet
        {
            get {return _addrStreet;}
            set 
    		{ 
    			if(_addrStreet != value)
    			{
    				_addrStreet = value; 
    				
    				
    
    				OnPropertyChanged("AddrStreet");
    			}
    		}
        }
        private string _addrStreet;
    
    
    	[DataMember]
        public virtual string AddrOther
        {
            get {return _addrOther;}
            set 
    		{ 
    			if(_addrOther != value)
    			{
    				_addrOther = value; 
    				
    				
    
    				OnPropertyChanged("AddrOther");
    			}
    		}
        }
        private string _addrOther;
    
    
    	[DataMember]
        public virtual string PasspNumber
        {
            get {return _passpNumber;}
            set 
    		{ 
    			if(_passpNumber != value)
    			{
    				_passpNumber = value; 
    				
    				
    
    				OnPropertyChanged("PasspNumber");
    			}
    		}
        }
        private string _passpNumber;
    
    
    	[DataMember]
        public virtual string PasspEmitPlace
        {
            get {return _passpEmitPlace;}
            set 
    		{ 
    			if(_passpEmitPlace != value)
    			{
    				_passpEmitPlace = value; 
    				
    				
    
    				OnPropertyChanged("PasspEmitPlace");
    			}
    		}
        }
        private string _passpEmitPlace;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> PasspEmitDate
        {
            get {return _passpEmitDate;}
            set 
    		{ 
    			if(_passpEmitDate != value)
    			{
    				_passpEmitDate = value; 
    				
    				if (_passpEmitDate.HasValue) _passpEmitDate = DateTime.SpecifyKind(_passpEmitDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("PasspEmitDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _passpEmitDate;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> AdvertTypeId
        {
            get { return _advertTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_advertTypeId != value)
                    {
                        if (AdvertType != null && AdvertType.Id != value)
                        {
                            AdvertType = null;
                        }
                        _advertTypeId = value;
        
        				OnPropertyChanged("AdvertTypeId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _advertTypeId;

        [DataMember]
        public virtual Nullable<System.Guid> ManagerId
        {
            get { return _managerId; }
            set
            {
                if (_managerId != value)
                {
                    if (Employee != null && Employee.Id != value)
                    {
                        Employee = null;
                    }
                    _managerId = value;

                    OnPropertyChanged("ManagerId");
                }
            }
        }
        private Nullable<System.Guid> _managerId;

        [DataMember]
        public virtual bool SmsList
        {
            get {return _smsList;}
            set 
    		{ 
    			if(_smsList != value)
    			{
    				_smsList = value; 
    				
    				
    
    				OnPropertyChanged("SmsList");
    			}
    		}
        }
        private bool _smsList;
    
    
    	[DataMember]
        public virtual string AdvertComment
        {
            get {return _advertComment;}
            set 
    		{ 
    			if(_advertComment != value)
    			{
    				_advertComment = value; 
    				
    				
    
    				OnPropertyChanged("AdvertComment");
    			}
    		}
        }
        private string _advertComment;
    
    
    	[DataMember]
        public virtual string AddrMetro
        {
            get {return _addrMetro;}
            set 
    		{ 
    			if(_addrMetro != value)
    			{
    				_addrMetro = value; 
    				
    				
    
    				OnPropertyChanged("AddrMetro");
    			}
    		}
        }
        private string _addrMetro;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> InvitorId
        {
            get { return _invitorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_invitorId != value)
                    {
                        if (InvitedBy != null && InvitedBy.Id != value)
                        {
                            InvitedBy = null;
                        }
                        _invitorId = value;
        
        				OnPropertyChanged("InvitorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _invitorId;
    
    
    	[DataMember]
        public virtual Nullable<bool> NoContraIndications
        {
            get {return _noContraIndications;}
            set 
    		{ 
    			if(_noContraIndications != value)
    			{
    				_noContraIndications = value; 
    				
    				
    
    				OnPropertyChanged("NoContraIndications");
    			}
    		}
        }
        private Nullable<bool> _noContraIndications;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> CorporateId
        {
            get { return _corporateId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_corporateId != value)
                    {
                        if (Corporate != null && Corporate.Id != value)
                        {
                            Corporate = null;
                        }
                        _corporateId = value;
        
        				OnPropertyChanged("CorporateId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _corporateId;
    
    
    	[DataMember]
        public virtual Nullable<int> SocialStatusId
        {
            get {return _socialStatusId;}
            set 
    		{ 
    			if(_socialStatusId != value)
    			{
    				_socialStatusId = value; 
    				
    				
    
    				OnPropertyChanged("SocialStatusId");
    			}
    		}
        }
        private Nullable<int> _socialStatusId;
    
    
    	[DataMember]
        public virtual string WorkPlace
        {
            get {return _workPlace;}
            set 
    		{ 
    			if(_workPlace != value)
    			{
    				_workPlace = value; 
    				
    				
    
    				OnPropertyChanged("WorkPlace");
    			}
    		}
        }
        private string _workPlace;
    
    
    	[DataMember]
        public virtual string Position
        {
            get {return _position;}
            set 
    		{ 
    			if(_position != value)
    			{
    				_position = value; 
    				
    				
    
    				OnPropertyChanged("Position");
    			}
    		}
        }
        private string _position;
    
    
    	[DataMember]
        public virtual string WorkPhone
        {
            get {return _workPhone;}
            set 
    		{ 
    			if(_workPhone != value)
    			{
    				_workPhone = value; 
    				
    				
    
    				OnPropertyChanged("WorkPhone");
    			}
    		}
        }
        private string _workPhone;
    
    
    	[DataMember]
        public virtual Nullable<int> Kids
        {
            get {return _kids;}
            set 
    		{ 
    			if(_kids != value)
    			{
    				_kids = value; 
    				
    				
    
    				OnPropertyChanged("Kids");
    			}
    		}
        }
        private Nullable<int> _kids;
    
    
    	[DataMember]
        public virtual byte[] Image
        {
            get {return _image;}
            set 
    		{ 
    			if(_image != value)
    			{
    				_image = value; 
    				
    				
    
    				OnPropertyChanged("Image");
    			}
    		}
        }
        private byte[] _image;
    
    
    	[DataMember]
        public virtual string Password
        {
            get {return _password;}
            set 
    		{ 
    			if(_password != value)
    			{
    				_password = value; 
    				
    				
    
    				OnPropertyChanged("Password");
    			}
    		}
        }
        private string _password;
    
    
    	[DataMember]
        public virtual bool FromSite
        {
            get {return _fromSite;}
            set 
    		{ 
    			if(_fromSite != value)
    			{
    				_fromSite = value; 
    				
    				
    
    				OnPropertyChanged("FromSite");
    			}
    		}
        }
        private bool _fromSite;
    
    
    	[DataMember]
        public virtual bool MarketingPassed
        {
            get {return _marketingPassed;}
            set 
    		{ 
    			if(_marketingPassed != value)
    			{
    				_marketingPassed = value; 
    				
    				
    
    				OnPropertyChanged("MarketingPassed");
    			}
    		}
        }
        private bool _marketingPassed;
    
    
    	[DataMember]
        public virtual Nullable<bool> HasEmail
        {
            get {return _hasEmail;}
            set 
    		{ 
    			if(_hasEmail != value)
    			{
    				_hasEmail = value; 
    				
    				
    
    				OnPropertyChanged("HasEmail");
    			}
    		}
        }
        private Nullable<bool> _hasEmail;
    
    
    	[DataMember]
        public virtual Nullable<bool> IsWork
        {
            get {return _isWork;}
            set 
    		{ 
    			if(_isWork != value)
    			{
    				_isWork = value; 
    				
    				
    
    				OnPropertyChanged("IsWork");
    			}
    		}
        }
        private Nullable<bool> _isWork;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<CustomerCard> CustomerCards
        {
            get
            {
                if (_customerCards == null)
                {
                    var newCollection = new FixupCollection<CustomerCard>();
                    newCollection.CollectionChanged += FixupCustomerCards;
                    _customerCards = newCollection;
                }
                return _customerCards;
            }
            set
            {
                if (!ReferenceEquals(_customerCards, value))
                {
                    var previousValue = _customerCards as FixupCollection<CustomerCard>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerCards;
                    }
                    _customerCards = value;
                    var newValue = value as FixupCollection<CustomerCard>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerCards;
                    }
    				OnPropertyChanged("CustomerCards");
                }
            }
        }
        private ICollection<CustomerCard> _customerCards;
    
        public virtual ICollection<BonusAccount> BonusAccounts
        {
            get
            {
                if (_bonusAccounts == null)
                {
                    var newCollection = new FixupCollection<BonusAccount>();
                    newCollection.CollectionChanged += FixupBonusAccounts;
                    _bonusAccounts = newCollection;
                }
                return _bonusAccounts;
            }
            set
            {
                if (!ReferenceEquals(_bonusAccounts, value))
                {
                    var previousValue = _bonusAccounts as FixupCollection<BonusAccount>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBonusAccounts;
                    }
                    _bonusAccounts = value;
                    var newValue = value as FixupCollection<BonusAccount>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBonusAccounts;
                    }
    				OnPropertyChanged("BonusAccounts");
                }
            }
        }
        private ICollection<BonusAccount> _bonusAccounts;
    
        public virtual ICollection<DepositAccount> DepositAccounts
        {
            get
            {
                if (_depositAccounts == null)
                {
                    var newCollection = new FixupCollection<DepositAccount>();
                    newCollection.CollectionChanged += FixupDepositAccounts;
                    _depositAccounts = newCollection;
                }
                return _depositAccounts;
            }
            set
            {
                if (!ReferenceEquals(_depositAccounts, value))
                {
                    var previousValue = _depositAccounts as FixupCollection<DepositAccount>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDepositAccounts;
                    }
                    _depositAccounts = value;
                    var newValue = value as FixupCollection<DepositAccount>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDepositAccounts;
                    }
    				OnPropertyChanged("DepositAccounts");
                }
            }
        }
        private ICollection<DepositAccount> _depositAccounts;
    
        public virtual ICollection<Ticket> Tickets
        {
            get
            {
                if (_tickets == null)
                {
                    var newCollection = new FixupCollection<Ticket>();
                    newCollection.CollectionChanged += FixupTickets;
                    _tickets = newCollection;
                }
                return _tickets;
            }
            set
            {
                if (!ReferenceEquals(_tickets, value))
                {
                    var previousValue = _tickets as FixupCollection<Ticket>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTickets;
                    }
                    _tickets = value;
                    var newValue = value as FixupCollection<Ticket>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTickets;
                    }
    				OnPropertyChanged("Tickets");
                }
            }
        }
        private ICollection<Ticket> _tickets;
    
        public virtual AdvertType AdvertType
        {
            get { return _advertType; }
            set
            {
                if (!ReferenceEquals(_advertType, value))
                {
                    var previousValue = _advertType;
                    _advertType = value;
                    FixupAdvertType(previousValue);
                }
            }
        }
        private AdvertType _advertType;

        public virtual Employee Employee
        {
            get { return _employee; }
            set
            {
                if (!ReferenceEquals(_employee, value))
                {
                    var previousValue = _employee;
                    _employee = value;
                    FixupEmployee(previousValue);
                }
            }
        }
        private Employee _employee;

        public virtual ICollection<TreatmentEvent> TreatmentEvents
        {
            get
            {
                if (_treatmentEvents == null)
                {
                    var newCollection = new FixupCollection<TreatmentEvent>();
                    newCollection.CollectionChanged += FixupTreatmentEvents;
                    _treatmentEvents = newCollection;
                }
                return _treatmentEvents;
            }
            set
            {
                if (!ReferenceEquals(_treatmentEvents, value))
                {
                    var previousValue = _treatmentEvents as FixupCollection<TreatmentEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentEvents;
                    }
                    _treatmentEvents = value;
                    var newValue = value as FixupCollection<TreatmentEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentEvents;
                    }
    				OnPropertyChanged("TreatmentEvents");
                }
            }
        }
        private ICollection<TreatmentEvent> _treatmentEvents;
    
        public virtual ICollection<Customer> InvitedCustomers
        {
            get
            {
                if (_invitedCustomers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupInvitedCustomers;
                    _invitedCustomers = newCollection;
                }
                return _invitedCustomers;
            }
            set
            {
                if (!ReferenceEquals(_invitedCustomers, value))
                {
                    var previousValue = _invitedCustomers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInvitedCustomers;
                    }
                    _invitedCustomers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInvitedCustomers;
                    }
    				OnPropertyChanged("InvitedCustomers");
                }
            }
        }
        private ICollection<Customer> _invitedCustomers;
    
        public virtual Customer InvitedBy
        {
            get { return _invitedBy; }
            set
            {
                if (!ReferenceEquals(_invitedBy, value))
                {
                    var previousValue = _invitedBy;
                    _invitedBy = value;
                    FixupInvitedBy(previousValue);
                }
            }
        }
        private Customer _invitedBy;
    
        public virtual ICollection<ContraIndication> ContraIndications
        {
            get
            {
                if (_contraIndications == null)
                {
                    var newCollection = new FixupCollection<ContraIndication>();
                    newCollection.CollectionChanged += FixupContraIndications;
                    _contraIndications = newCollection;
                }
                return _contraIndications;
            }
            set
            {
                if (!ReferenceEquals(_contraIndications, value))
                {
                    var previousValue = _contraIndications as FixupCollection<ContraIndication>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContraIndications;
                    }
                    _contraIndications = value;
                    var newValue = value as FixupCollection<ContraIndication>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContraIndications;
                    }
    				OnPropertyChanged("ContraIndications");
                }
            }
        }
        private ICollection<ContraIndication> _contraIndications;
    
        public virtual ICollection<CustomerTarget> CustomerTargets
        {
            get
            {
                if (_customerTargets == null)
                {
                    var newCollection = new FixupCollection<CustomerTarget>();
                    newCollection.CollectionChanged += FixupCustomerTargets;
                    _customerTargets = newCollection;
                }
                return _customerTargets;
            }
            set
            {
                if (!ReferenceEquals(_customerTargets, value))
                {
                    var previousValue = _customerTargets as FixupCollection<CustomerTarget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerTargets;
                    }
                    _customerTargets = value;
                    var newValue = value as FixupCollection<CustomerTarget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerTargets;
                    }
    				OnPropertyChanged("CustomerTargets");
                }
            }
        }
        private ICollection<CustomerTarget> _customerTargets;
    
        public virtual ICollection<Anthropometric> Anthropometrics
        {
            get
            {
                if (_anthropometrics == null)
                {
                    var newCollection = new FixupCollection<Anthropometric>();
                    newCollection.CollectionChanged += FixupAnthropometrics;
                    _anthropometrics = newCollection;
                }
                return _anthropometrics;
            }
            set
            {
                if (!ReferenceEquals(_anthropometrics, value))
                {
                    var previousValue = _anthropometrics as FixupCollection<Anthropometric>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnthropometrics;
                    }
                    _anthropometrics = value;
                    var newValue = value as FixupCollection<Anthropometric>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnthropometrics;
                    }
    				OnPropertyChanged("Anthropometrics");
                }
            }
        }
        private ICollection<Anthropometric> _anthropometrics;
    
        public virtual ICollection<DoctorVisit> DoctorVisits
        {
            get
            {
                if (_doctorVisits == null)
                {
                    var newCollection = new FixupCollection<DoctorVisit>();
                    newCollection.CollectionChanged += FixupDoctorVisits;
                    _doctorVisits = newCollection;
                }
                return _doctorVisits;
            }
            set
            {
                if (!ReferenceEquals(_doctorVisits, value))
                {
                    var previousValue = _doctorVisits as FixupCollection<DoctorVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDoctorVisits;
                    }
                    _doctorVisits = value;
                    var newValue = value as FixupCollection<DoctorVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDoctorVisits;
                    }
    				OnPropertyChanged("DoctorVisits");
                }
            }
        }
        private ICollection<DoctorVisit> _doctorVisits;
    
        public virtual ICollection<Nutrition> Nutritions
        {
            get
            {
                if (_nutritions == null)
                {
                    var newCollection = new FixupCollection<Nutrition>();
                    newCollection.CollectionChanged += FixupNutritions;
                    _nutritions = newCollection;
                }
                return _nutritions;
            }
            set
            {
                if (!ReferenceEquals(_nutritions, value))
                {
                    var previousValue = _nutritions as FixupCollection<Nutrition>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNutritions;
                    }
                    _nutritions = value;
                    var newValue = value as FixupCollection<Nutrition>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNutritions;
                    }
    				OnPropertyChanged("Nutritions");
                }
            }
        }
        private ICollection<Nutrition> _nutritions;
    
        public virtual ICollection<CustomerMeasure> CustomerMeasures
        {
            get
            {
                if (_customerMeasures == null)
                {
                    var newCollection = new FixupCollection<CustomerMeasure>();
                    newCollection.CollectionChanged += FixupCustomerMeasures;
                    _customerMeasures = newCollection;
                }
                return _customerMeasures;
            }
            set
            {
                if (!ReferenceEquals(_customerMeasures, value))
                {
                    var previousValue = _customerMeasures as FixupCollection<CustomerMeasure>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerMeasures;
                    }
                    _customerMeasures = value;
                    var newValue = value as FixupCollection<CustomerMeasure>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerMeasures;
                    }
    				OnPropertyChanged("CustomerMeasures");
                }
            }
        }
        private ICollection<CustomerMeasure> _customerMeasures;
    
        public virtual ICollection<BarOrder> BarOrders
        {
            get
            {
                if (_barOrders == null)
                {
                    var newCollection = new FixupCollection<BarOrder>();
                    newCollection.CollectionChanged += FixupBarOrders;
                    _barOrders = newCollection;
                }
                return _barOrders;
            }
            set
            {
                if (!ReferenceEquals(_barOrders, value))
                {
                    var previousValue = _barOrders as FixupCollection<BarOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBarOrders;
                    }
                    _barOrders = value;
                    var newValue = value as FixupCollection<BarOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBarOrders;
                    }
    				OnPropertyChanged("BarOrders");
                }
            }
        }
        private ICollection<BarOrder> _barOrders;
    
        public virtual ICollection<CustomerVisit> CustomerVisits
        {
            get
            {
                if (_customerVisits == null)
                {
                    var newCollection = new FixupCollection<CustomerVisit>();
                    newCollection.CollectionChanged += FixupCustomerVisits;
                    _customerVisits = newCollection;
                }
                return _customerVisits;
            }
            set
            {
                if (!ReferenceEquals(_customerVisits, value))
                {
                    var previousValue = _customerVisits as FixupCollection<CustomerVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerVisits;
                    }
                    _customerVisits = value;
                    var newValue = value as FixupCollection<CustomerVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerVisits;
                    }
    				OnPropertyChanged("CustomerVisits");
                }
            }
        }
        private ICollection<CustomerVisit> _customerVisits;
    
        public virtual ICollection<CustomerStatus> CustomerStatuses
        {
            get
            {
                if (_customerStatuses == null)
                {
                    var newCollection = new FixupCollection<CustomerStatus>();
                    newCollection.CollectionChanged += FixupCustomerStatuses;
                    _customerStatuses = newCollection;
                }
                return _customerStatuses;
            }
            set
            {
                if (!ReferenceEquals(_customerStatuses, value))
                {
                    var previousValue = _customerStatuses as FixupCollection<CustomerStatus>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerStatuses;
                    }
                    _customerStatuses = value;
                    var newValue = value as FixupCollection<CustomerStatus>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerStatuses;
                    }
    				OnPropertyChanged("CustomerStatuses");
                }
            }
        }
        private ICollection<CustomerStatus> _customerStatuses;
    
        public virtual ICollection<CustomerNotification> CustomerNotifications
        {
            get
            {
                if (_customerNotifications == null)
                {
                    var newCollection = new FixupCollection<CustomerNotification>();
                    newCollection.CollectionChanged += FixupCustomerNotifications;
                    _customerNotifications = newCollection;
                }
                return _customerNotifications;
            }
            set
            {
                if (!ReferenceEquals(_customerNotifications, value))
                {
                    var previousValue = _customerNotifications as FixupCollection<CustomerNotification>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerNotifications;
                    }
                    _customerNotifications = value;
                    var newValue = value as FixupCollection<CustomerNotification>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerNotifications;
                    }
    				OnPropertyChanged("CustomerNotifications");
                }
            }
        }
        private ICollection<CustomerNotification> _customerNotifications;
    
        public virtual ICollection<ChildrenRoom> ChildrenRooms
        {
            get
            {
                if (_childrenRooms == null)
                {
                    var newCollection = new FixupCollection<ChildrenRoom>();
                    newCollection.CollectionChanged += FixupChildrenRooms;
                    _childrenRooms = newCollection;
                }
                return _childrenRooms;
            }
            set
            {
                if (!ReferenceEquals(_childrenRooms, value))
                {
                    var previousValue = _childrenRooms as FixupCollection<ChildrenRoom>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildrenRooms;
                    }
                    _childrenRooms = value;
                    var newValue = value as FixupCollection<ChildrenRoom>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildrenRooms;
                    }
    				OnPropertyChanged("ChildrenRooms");
                }
            }
        }
        private ICollection<ChildrenRoom> _childrenRooms;
    
        public virtual ICollection<CustomerShelf> CustomerShelves
        {
            get
            {
                if (_customerShelves == null)
                {
                    var newCollection = new FixupCollection<CustomerShelf>();
                    newCollection.CollectionChanged += FixupCustomerShelves;
                    _customerShelves = newCollection;
                }
                return _customerShelves;
            }
            set
            {
                if (!ReferenceEquals(_customerShelves, value))
                {
                    var previousValue = _customerShelves as FixupCollection<CustomerShelf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerShelves;
                    }
                    _customerShelves = value;
                    var newValue = value as FixupCollection<CustomerShelf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerShelves;
                    }
    				OnPropertyChanged("CustomerShelves");
                }
            }
        }
        private ICollection<CustomerShelf> _customerShelves;
    
        public virtual ICollection<SolariumVisit> SolariumVisits
        {
            get
            {
                if (_solariumVisits == null)
                {
                    var newCollection = new FixupCollection<SolariumVisit>();
                    newCollection.CollectionChanged += FixupSolariumVisits;
                    _solariumVisits = newCollection;
                }
                return _solariumVisits;
            }
            set
            {
                if (!ReferenceEquals(_solariumVisits, value))
                {
                    var previousValue = _solariumVisits as FixupCollection<SolariumVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolariumVisits;
                    }
                    _solariumVisits = value;
                    var newValue = value as FixupCollection<SolariumVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolariumVisits;
                    }
    				OnPropertyChanged("SolariumVisits");
                }
            }
        }
        private ICollection<SolariumVisit> _solariumVisits;
    
        public virtual ICollection<Certificate> Certificates
        {
            get
            {
                if (_certificates == null)
                {
                    var newCollection = new FixupCollection<Certificate>();
                    newCollection.CollectionChanged += FixupCertificates;
                    _certificates = newCollection;
                }
                return _certificates;
            }
            set
            {
                if (!ReferenceEquals(_certificates, value))
                {
                    var previousValue = _certificates as FixupCollection<Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificates;
                    }
                    _certificates = value;
                    var newValue = value as FixupCollection<Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificates;
                    }
    				OnPropertyChanged("Certificates");
                }
            }
        }
        private ICollection<Certificate> _certificates;
    
        public virtual ICollection<Rent> Rents
        {
            get
            {
                if (_rents == null)
                {
                    var newCollection = new FixupCollection<Rent>();
                    newCollection.CollectionChanged += FixupRents;
                    _rents = newCollection;
                }
                return _rents;
            }
            set
            {
                if (!ReferenceEquals(_rents, value))
                {
                    var previousValue = _rents as FixupCollection<Rent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRents;
                    }
                    _rents = value;
                    var newValue = value as FixupCollection<Rent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRents;
                    }
    				OnPropertyChanged("Rents");
                }
            }
        }
        private ICollection<Rent> _rents;
    
        public virtual ICollection<DepositOut> DepositOuts
        {
            get
            {
                if (_depositOuts == null)
                {
                    var newCollection = new FixupCollection<DepositOut>();
                    newCollection.CollectionChanged += FixupDepositOuts;
                    _depositOuts = newCollection;
                }
                return _depositOuts;
            }
            set
            {
                if (!ReferenceEquals(_depositOuts, value))
                {
                    var previousValue = _depositOuts as FixupCollection<DepositOut>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDepositOuts;
                    }
                    _depositOuts = value;
                    var newValue = value as FixupCollection<DepositOut>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDepositOuts;
                    }
    				OnPropertyChanged("DepositOuts");
                }
            }
        }
        private ICollection<DepositOut> _depositOuts;
    
        public virtual ICollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    var newCollection = new FixupCollection<Employee>();
                    newCollection.CollectionChanged += FixupEmployees;
                    _employees = newCollection;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees as FixupCollection<Employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployees;
                    }
                    _employees = value;
                    var newValue = value as FixupCollection<Employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployees;
                    }
    				OnPropertyChanged("Employees");
                }
            }
        }
        private ICollection<Employee> _employees;
    
        public virtual Corporate Corporate
        {
            get { return _corporate; }
            set
            {
                if (!ReferenceEquals(_corporate, value))
                {
                    var previousValue = _corporate;
                    _corporate = value;
                    FixupCorporate(previousValue);
                }
            }
        }
        private Corporate _corporate;
    
        public virtual ICollection<Call> Calls
        {
            get
            {
                if (_calls == null)
                {
                    var newCollection = new FixupCollection<Call>();
                    newCollection.CollectionChanged += FixupCalls;
                    _calls = newCollection;
                }
                return _calls;
            }
            set
            {
                if (!ReferenceEquals(_calls, value))
                {
                    var previousValue = _calls as FixupCollection<Call>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCalls;
                    }
                    _calls = value;
                    var newValue = value as FixupCollection<Call>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCalls;
                    }
    				OnPropertyChanged("Calls");
                }
            }
        }
        private ICollection<Call> _calls;
    
        public virtual ICollection<CustomerCrmEvent> CustomerCrmEvents
        {
            get
            {
                if (_customerCrmEvents == null)
                {
                    var newCollection = new FixupCollection<CustomerCrmEvent>();
                    newCollection.CollectionChanged += FixupCustomerCrmEvents;
                    _customerCrmEvents = newCollection;
                }
                return _customerCrmEvents;
            }
            set
            {
                if (!ReferenceEquals(_customerCrmEvents, value))
                {
                    var previousValue = _customerCrmEvents as FixupCollection<CustomerCrmEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerCrmEvents;
                    }
                    _customerCrmEvents = value;
                    var newValue = value as FixupCollection<CustomerCrmEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerCrmEvents;
                    }
    				OnPropertyChanged("CustomerCrmEvents");
                }
            }
        }
        private ICollection<CustomerCrmEvent> _customerCrmEvents;
    
        public virtual ICollection<CustomerGoodsFlow> CustomerGoodsFlows
        {
            get
            {
                if (_customerGoodsFlows == null)
                {
                    var newCollection = new FixupCollection<CustomerGoodsFlow>();
                    newCollection.CollectionChanged += FixupCustomerGoodsFlows;
                    _customerGoodsFlows = newCollection;
                }
                return _customerGoodsFlows;
            }
            set
            {
                if (!ReferenceEquals(_customerGoodsFlows, value))
                {
                    var previousValue = _customerGoodsFlows as FixupCollection<CustomerGoodsFlow>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerGoodsFlows;
                    }
                    _customerGoodsFlows = value;
                    var newValue = value as FixupCollection<CustomerGoodsFlow>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerGoodsFlows;
                    }
    				OnPropertyChanged("CustomerGoodsFlows");
                }
            }
        }
        private ICollection<CustomerGoodsFlow> _customerGoodsFlows;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Customers.Contains(this))
                {
                    Company.Customers.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (CreatedBy != null)
            {
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupAdvertType(AdvertType previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (AdvertType != null)
            {
                if (!AdvertType.Customers.Contains(this))
                {
                    AdvertType.Customers.Add(this);
                }
                if (AdvertTypeId != AdvertType.Id)
                {
                    AdvertTypeId = AdvertType.Id;
                }
            }
            else if (!_settingFK)
            {
                AdvertTypeId = null;
            }
        }

        private void FixupEmployee(Employee previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
            if (Employee != null)
            {
                if (!Employee.Customers.Contains(this))
                {
                    Employee.Customers.Add(this);
                }
                if (ManagerId != Employee.Id)
                {
                    ManagerId = Employee.Id;
                }
            }
        }

        private void FixupInvitedBy(Customer previousValue)
        {
            if (previousValue != null && previousValue.InvitedCustomers.Contains(this))
            {
                previousValue.InvitedCustomers.Remove(this);
            }
    
            if (InvitedBy != null)
            {
                if (!InvitedBy.InvitedCustomers.Contains(this))
                {
                    InvitedBy.InvitedCustomers.Add(this);
                }
                if (InvitorId != InvitedBy.Id)
                {
                    InvitorId = InvitedBy.Id;
                }
            }
            else if (!_settingFK)
            {
                InvitorId = null;
            }
        }
    
        private void FixupCorporate(Corporate previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (Corporate != null)
            {
                if (!Corporate.Customers.Contains(this))
                {
                    Corporate.Customers.Add(this);
                }
                if (CorporateId != Corporate.Id)
                {
                    CorporateId = Corporate.Id;
                }
            }
            else if (!_settingFK)
            {
                CorporateId = null;
            }
        }
    
        private void FixupCustomerCards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerCard item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerCard item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupBonusAccounts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BonusAccount item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BonusAccount item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupDepositAccounts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DepositAccount item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DepositAccount item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupTickets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Ticket item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Ticket item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentEvent item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupInvitedCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.InvitedBy = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.InvitedBy, this))
                    {
                        item.InvitedBy = null;
                    }
                }
            }
        }
    
        private void FixupContraIndications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ContraIndication item in e.NewItems)
                {
                    if (!item.Customers.Contains(this))
                    {
                        item.Customers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ContraIndication item in e.OldItems)
                {
                    if (item.Customers.Contains(this))
                    {
                        item.Customers.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCustomerTargets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerTarget item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerTarget item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupAnthropometrics(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Anthropometric item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Anthropometric item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupDoctorVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DoctorVisit item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DoctorVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupNutritions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Nutrition item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Nutrition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerMeasures(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerMeasure item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerMeasure item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupBarOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BarOrder item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BarOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerVisit item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerStatuses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerStatus item in e.NewItems)
                {
                    if (!item.Customers.Contains(this))
                    {
                        item.Customers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerStatus item in e.OldItems)
                {
                    if (item.Customers.Contains(this))
                    {
                        item.Customers.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCustomerNotifications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerNotification item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerNotification item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupChildrenRooms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ChildrenRoom item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChildrenRoom item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerShelves(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerShelf item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerShelf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupSolariumVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SolariumVisit item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SolariumVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCertificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupRents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rent item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupDepositOuts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DepositOut item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DepositOut item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.BoundCustomer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.BoundCustomer, this))
                    {
                        item.BoundCustomer = null;
                    }
                }
            }
        }
    
        private void FixupCalls(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Call item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Call item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerCrmEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerCrmEvent item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerCrmEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerGoodsFlows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerGoodsFlow item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerGoodsFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
