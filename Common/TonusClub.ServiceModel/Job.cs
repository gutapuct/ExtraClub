//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Job : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_divisionId != value)
                    {
                        if (Division != null && Division.Id != value)
                        {
                            Division = null;
                        }
                        _divisionId = value;
        
        				OnPropertyChanged("DivisionId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual string Duties
        {
            get {return _duties;}
            set 
    		{ 
    			if(_duties != value)
    			{
    				_duties = value; 
    				
    				
    
    				OnPropertyChanged("Duties");
    			}
    		}
        }
        private string _duties;
    
    
    	[DataMember]
        public virtual string Unit
        {
            get {return _unit;}
            set 
    		{ 
    			if(_unit != value)
    			{
    				_unit = value; 
    				
    				
    
    				OnPropertyChanged("Unit");
    			}
    		}
        }
        private string _unit;
    
    
    	[DataMember]
        public virtual decimal Salary
        {
            get {return _salary;}
            set 
    		{ 
    			if(_salary != value)
    			{
    				_salary = value; 
    				
    				
    
    				OnPropertyChanged("Salary");
    			}
    		}
        }
        private decimal _salary;
    
    
    	[DataMember]
        public virtual int Vacansies
        {
            get {return _vacansies;}
            set 
    		{ 
    			if(_vacansies != value)
    			{
    				_vacansies = value; 
    				
    				
    
    				OnPropertyChanged("Vacansies");
    			}
    		}
        }
        private int _vacansies;
    
    
    	[DataMember]
        public virtual int ParallelVacansies
        {
            get {return _parallelVacansies;}
            set 
    		{ 
    			if(_parallelVacansies != value)
    			{
    				_parallelVacansies = value; 
    				
    				
    
    				OnPropertyChanged("ParallelVacansies");
    			}
    		}
        }
        private int _parallelVacansies;
    
    
    	[DataMember]
        public virtual bool IsMainWorkplace
        {
            get {return _isMainWorkplace;}
            set 
    		{ 
    			if(_isMainWorkplace != value)
    			{
    				_isMainWorkplace = value; 
    				
    				
    
    				OnPropertyChanged("IsMainWorkplace");
    			}
    		}
        }
        private bool _isMainWorkplace;
    
    
    	[DataMember]
        public virtual string WorkGraph
        {
            get {return _workGraph;}
            set 
    		{ 
    			if(_workGraph != value)
    			{
    				_workGraph = value; 
    				
    				
    
    				OnPropertyChanged("WorkGraph");
    			}
    		}
        }
        private string _workGraph;
    
    
    	[DataMember]
        public virtual System.TimeSpan WorkStart
        {
            get {return _workStart;}
            set 
    		{ 
    			if(_workStart != value)
    			{
    				_workStart = value; 
    				
    				
    
    				OnPropertyChanged("WorkStart");
    			}
    		}
        }
        private System.TimeSpan _workStart;
    
    
    	[DataMember]
        public virtual System.TimeSpan WorkEnd
        {
            get {return _workEnd;}
            set 
    		{ 
    			if(_workEnd != value)
    			{
    				_workEnd = value; 
    				
    				
    
    				OnPropertyChanged("WorkEnd");
    			}
    		}
        }
        private System.TimeSpan _workEnd;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> BeselinedBy
        {
            get { return _beselinedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_beselinedBy != value)
                    {
                        if (Baseliner != null && Baseliner.UserId != value)
                        {
                            Baseliner = null;
                        }
                        _beselinedBy = value;
        
        				OnPropertyChanged("BeselinedBy");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _beselinedBy;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> BaselinedOn
        {
            get {return _baselinedOn;}
            set 
    		{ 
    			if(_baselinedOn != value)
    			{
    				_baselinedOn = value; 
    				
    				if (_baselinedOn.HasValue) _baselinedOn = DateTime.SpecifyKind(_baselinedOn.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("BaselinedOn");
    			}
    		}
        }
        private Nullable<System.DateTime> _baselinedOn;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> HiddenOn
        {
            get {return _hiddenOn;}
            set 
    		{ 
    			if(_hiddenOn != value)
    			{
    				_hiddenOn = value; 
    				
    				if (_hiddenOn.HasValue) _hiddenOn = DateTime.SpecifyKind(_hiddenOn.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("HiddenOn");
    			}
    		}
        }
        private Nullable<System.DateTime> _hiddenOn;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SalarySchemeId
        {
            get { return _salarySchemeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_salarySchemeId != value)
                    {
                        if (SalaryScheme != null && SalaryScheme.Id != value)
                        {
                            SalaryScheme = null;
                        }
                        _salarySchemeId = value;
        
        				OnPropertyChanged("SalarySchemeId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _salarySchemeId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual ICollection<EmployeeCategory> EmployeeCategories
        {
            get
            {
                if (_employeeCategories == null)
                {
                    var newCollection = new FixupCollection<EmployeeCategory>();
                    newCollection.CollectionChanged += FixupEmployeeCategories;
                    _employeeCategories = newCollection;
                }
                return _employeeCategories;
            }
            set
            {
                if (!ReferenceEquals(_employeeCategories, value))
                {
                    var previousValue = _employeeCategories as FixupCollection<EmployeeCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeCategories;
                    }
                    _employeeCategories = value;
                    var newValue = value as FixupCollection<EmployeeCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeCategories;
                    }
    				OnPropertyChanged("EmployeeCategories");
                }
            }
        }
        private ICollection<EmployeeCategory> _employeeCategories;
    
        public virtual User Baseliner
        {
            get { return _baseliner; }
            set
            {
                if (!ReferenceEquals(_baseliner, value))
                {
                    var previousValue = _baseliner;
                    _baseliner = value;
                    FixupBaseliner(previousValue);
                }
            }
        }
        private User _baseliner;
    
        public virtual ICollection<JobPlacement> JobPlacements
        {
            get
            {
                if (_jobPlacements == null)
                {
                    var newCollection = new FixupCollection<JobPlacement>();
                    newCollection.CollectionChanged += FixupJobPlacements;
                    _jobPlacements = newCollection;
                }
                return _jobPlacements;
            }
            set
            {
                if (!ReferenceEquals(_jobPlacements, value))
                {
                    var previousValue = _jobPlacements as FixupCollection<JobPlacement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobPlacements;
                    }
                    _jobPlacements = value;
                    var newValue = value as FixupCollection<JobPlacement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobPlacements;
                    }
    				OnPropertyChanged("JobPlacements");
                }
            }
        }
        private ICollection<JobPlacement> _jobPlacements;
    
        public virtual SalaryScheme SalaryScheme
        {
            get { return _salaryScheme; }
            set
            {
                if (!ReferenceEquals(_salaryScheme, value))
                {
                    var previousValue = _salaryScheme;
                    _salaryScheme = value;
                    FixupSalaryScheme(previousValue);
                }
            }
        }
        private SalaryScheme _salaryScheme;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Jobs.Contains(this))
            {
                previousValue.Jobs.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Jobs.Contains(this))
                {
                    Company.Jobs.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.Jobs.Contains(this))
            {
                previousValue.Jobs.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.Jobs.Contains(this))
                {
                    Division.Jobs.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }
    
        private void FixupBaseliner(User previousValue)
        {
            if (previousValue != null && previousValue.Jobs.Contains(this))
            {
                previousValue.Jobs.Remove(this);
            }
    
            if (Baseliner != null)
            {
                if (!Baseliner.Jobs.Contains(this))
                {
                    Baseliner.Jobs.Add(this);
                }
                if (BeselinedBy != Baseliner.UserId)
                {
                    BeselinedBy = Baseliner.UserId;
                }
            }
            else if (!_settingFK)
            {
                BeselinedBy = null;
            }
        }
    
        private void FixupSalaryScheme(SalaryScheme previousValue)
        {
            if (previousValue != null && previousValue.Jobs.Contains(this))
            {
                previousValue.Jobs.Remove(this);
            }
    
            if (SalaryScheme != null)
            {
                if (!SalaryScheme.Jobs.Contains(this))
                {
                    SalaryScheme.Jobs.Add(this);
                }
                if (SalarySchemeId != SalaryScheme.Id)
                {
                    SalarySchemeId = SalaryScheme.Id;
                }
            }
            else if (!_settingFK)
            {
                SalarySchemeId = null;
            }
        }
    
        private void FixupEmployeeCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeCategory item in e.NewItems)
                {
                    if (!item.Jobs.Contains(this))
                    {
                        item.Jobs.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeCategory item in e.OldItems)
                {
                    if (item.Jobs.Contains(this))
                    {
                        item.Jobs.Remove(this);
                    }
                }
            }
        }
    
        private void FixupJobPlacements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (JobPlacement item in e.NewItems)
                {
                    item.Job = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JobPlacement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Job, this))
                    {
                        item.Job = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
