//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class File : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private Nullable<System.Guid> _companyId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> DivisionId
        {
            get { return _divisionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_divisionId != value)
                    {
                        if (Division != null && Division.Id != value)
                        {
                            Division = null;
                        }
                        _divisionId = value;
        
        				OnPropertyChanged("DivisionId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _divisionId;
    
    
    	[DataMember]
        public virtual string Filename
        {
            get {return _filename;}
            set 
    		{ 
    			if(_filename != value)
    			{
    				_filename = value; 
    				
    				
    
    				OnPropertyChanged("Filename");
    			}
    		}
        }
        private string _filename;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual byte[] Data
        {
            get {return _data;}
            set 
    		{ 
    			if(_data != value)
    			{
    				_data = value; 
    				
    				
    
    				OnPropertyChanged("Data");
    			}
    		}
        }
        private byte[] _data;
    
    
    	[DataMember]
        public virtual Nullable<int> Category
        {
            get {return _category;}
            set 
    		{ 
    			if(_category != value)
    			{
    				_category = value; 
    				
    				
    
    				OnPropertyChanged("Category");
    			}
    		}
        }
        private Nullable<int> _category;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> Parameter
        {
            get {return _parameter;}
            set 
    		{ 
    			if(_parameter != value)
    			{
    				_parameter = value; 
    				
    				
    
    				OnPropertyChanged("Parameter");
    			}
    		}
        }
        private Nullable<System.Guid> _parameter;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.Files.Contains(this))
            {
                previousValue.Files.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.Files.Contains(this))
                {
                    Division.Files.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
            else if (!_settingFK)
            {
                DivisionId = null;
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
