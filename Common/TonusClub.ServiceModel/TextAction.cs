//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class TextAction : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                if (_companyId != value)
                {
                    if (Company != null && Company.CompanyId != value)
                    {
                        Company = null;
                    }
                    _companyId = value;
    
    				OnPropertyChanged("CompanyId");
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual string ActionText
        {
            get {return _actionText;}
            set 
    		{ 
    			if(_actionText != value)
    			{
    				_actionText = value; 
    				
    				
    
    				OnPropertyChanged("ActionText");
    			}
    		}
        }
        private string _actionText;
    
    
    	[DataMember]
        public virtual System.DateTime StartDate
        {
            get {return _startDate;}
            set 
    		{ 
    			if(_startDate != value)
    			{
    				_startDate = value; 
    				
    				_startDate = DateTime.SpecifyKind(_startDate, DateTimeKind.Local);
    
    				OnPropertyChanged("StartDate");
    			}
    		}
        }
        private System.DateTime _startDate;
    
    
    	[DataMember]
        public virtual System.DateTime FinishDate
        {
            get {return _finishDate;}
            set 
    		{ 
    			if(_finishDate != value)
    			{
    				_finishDate = value; 
    				
    				_finishDate = DateTime.SpecifyKind(_finishDate, DateTimeKind.Local);
    
    				OnPropertyChanged("FinishDate");
    			}
    		}
        }
        private System.DateTime _finishDate;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SettingsFolderId
        {
            get {return _settingsFolderId;}
            set 
    		{ 
    			if(_settingsFolderId != value)
    			{
    				_settingsFolderId = value; 
    				
    				
    
    				OnPropertyChanged("SettingsFolderId");
    			}
    		}
        }
        private Nullable<System.Guid> _settingsFolderId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<Division> Divisions
        {
            get
            {
                if (_divisions == null)
                {
                    var newCollection = new FixupCollection<Division>();
                    newCollection.CollectionChanged += FixupDivisions;
                    _divisions = newCollection;
                }
                return _divisions;
            }
            set
            {
                if (!ReferenceEquals(_divisions, value))
                {
                    var previousValue = _divisions as FixupCollection<Division>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDivisions;
                    }
                    _divisions = value;
                    var newValue = value as FixupCollection<Division>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDivisions;
                    }
    				OnPropertyChanged("Divisions");
                }
            }
        }
        private ICollection<Division> _divisions;

        #endregion

        #region Association Fixup
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.TextActions.Contains(this))
            {
                previousValue.TextActions.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.TextActions.Contains(this))
                {
                    Company.TextActions.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.TextActions.Contains(this))
            {
                previousValue.TextActions.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.TextActions.Contains(this))
                {
                    CreatedBy.TextActions.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupDivisions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Division item in e.NewItems)
                {
                    if (!item.TextActions1.Contains(this))
                    {
                        item.TextActions1.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Division item in e.OldItems)
                {
                    if (item.TextActions1.Contains(this))
                    {
                        item.TextActions1.Remove(this);
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
