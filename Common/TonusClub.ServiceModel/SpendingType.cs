//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class SpendingType : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> DivisionId
        {
            get { return _divisionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_divisionId != value)
                    {
                        if (Division != null && Division.Id != value)
                        {
                            Division = null;
                        }
                        _divisionId = value;
        
        				OnPropertyChanged("DivisionId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _divisionId;
    
    
    	[DataMember]
        public virtual bool IsCommon
        {
            get {return _isCommon;}
            set 
    		{ 
    			if(_isCommon != value)
    			{
    				_isCommon = value; 
    				
    				
    
    				OnPropertyChanged("IsCommon");
    			}
    		}
        }
        private bool _isCommon;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual bool IsDeleted
        {
            get {return _isDeleted;}
            set 
    		{ 
    			if(_isDeleted != value)
    			{
    				_isDeleted = value; 
    				
    				
    
    				OnPropertyChanged("IsDeleted");
    			}
    		}
        }
        private bool _isDeleted;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual ICollection<Spending> Spendings
        {
            get
            {
                if (_spendings == null)
                {
                    var newCollection = new FixupCollection<Spending>();
                    newCollection.CollectionChanged += FixupSpendings;
                    _spendings = newCollection;
                }
                return _spendings;
            }
            set
            {
                if (!ReferenceEquals(_spendings, value))
                {
                    var previousValue = _spendings as FixupCollection<Spending>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpendings;
                    }
                    _spendings = value;
                    var newValue = value as FixupCollection<Spending>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpendings;
                    }
    				OnPropertyChanged("Spendings");
                }
            }
        }
        private ICollection<Spending> _spendings;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.SpendingTypes.Contains(this))
            {
                previousValue.SpendingTypes.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.SpendingTypes.Contains(this))
                {
                    Company.SpendingTypes.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.SpendingTypes.Contains(this))
            {
                previousValue.SpendingTypes.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.SpendingTypes.Contains(this))
                {
                    Division.SpendingTypes.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
            else if (!_settingFK)
            {
                DivisionId = null;
            }
        }
    
        private void FixupSpendings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Spending item in e.NewItems)
                {
                    item.SpendingType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Spending item in e.OldItems)
                {
                    if (ReferenceEquals(item.SpendingType, this))
                    {
                        item.SpendingType = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
