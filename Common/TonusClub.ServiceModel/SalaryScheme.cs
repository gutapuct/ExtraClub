//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class SalaryScheme : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                if (_divisionId != value)
                {
                    if (Division != null && Division.Id != value)
                    {
                        Division = null;
                    }
                    _divisionId = value;
    
    				OnPropertyChanged("DivisionId");
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual bool IsOvertimePaid
        {
            get {return _isOvertimePaid;}
            set 
    		{ 
    			if(_isOvertimePaid != value)
    			{
    				_isOvertimePaid = value; 
    				
    				
    
    				OnPropertyChanged("IsOvertimePaid");
    			}
    		}
        }
        private bool _isOvertimePaid;
    
    
    	[DataMember]
        public virtual Nullable<int> Late1Minutes
        {
            get {return _late1Minutes;}
            set 
    		{ 
    			if(_late1Minutes != value)
    			{
    				_late1Minutes = value; 
    				
    				
    
    				OnPropertyChanged("Late1Minutes");
    			}
    		}
        }
        private Nullable<int> _late1Minutes;
    
    
    	[DataMember]
        public virtual Nullable<decimal> Late1Fine
        {
            get {return _late1Fine;}
            set 
    		{ 
    			if(_late1Fine != value)
    			{
    				_late1Fine = value; 
    				
    				
    
    				OnPropertyChanged("Late1Fine");
    			}
    		}
        }
        private Nullable<decimal> _late1Fine;
    
    
    	[DataMember]
        public virtual Nullable<int> Late2Minutes
        {
            get {return _late2Minutes;}
            set 
    		{ 
    			if(_late2Minutes != value)
    			{
    				_late2Minutes = value; 
    				
    				
    
    				OnPropertyChanged("Late2Minutes");
    			}
    		}
        }
        private Nullable<int> _late2Minutes;
    
    
    	[DataMember]
        public virtual Nullable<decimal> Late2Fine
        {
            get {return _late2Fine;}
            set 
    		{ 
    			if(_late2Fine != value)
    			{
    				_late2Fine = value; 
    				
    				
    
    				OnPropertyChanged("Late2Fine");
    			}
    		}
        }
        private Nullable<decimal> _late2Fine;
    
    
    	[DataMember]
        public virtual bool IsAvail
        {
            get {return _isAvail;}
            set 
    		{ 
    			if(_isAvail != value)
    			{
    				_isAvail = value; 
    				
    				
    
    				OnPropertyChanged("IsAvail");
    			}
    		}
        }
        private bool _isAvail;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<SalarySchemeCoefficient> SalarySchemeCoefficients
        {
            get
            {
                if (_salarySchemeCoefficients == null)
                {
                    var newCollection = new FixupCollection<SalarySchemeCoefficient>();
                    newCollection.CollectionChanged += FixupSalarySchemeCoefficients;
                    _salarySchemeCoefficients = newCollection;
                }
                return _salarySchemeCoefficients;
            }
            set
            {
                if (!ReferenceEquals(_salarySchemeCoefficients, value))
                {
                    var previousValue = _salarySchemeCoefficients as FixupCollection<SalarySchemeCoefficient>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalarySchemeCoefficients;
                    }
                    _salarySchemeCoefficients = value;
                    var newValue = value as FixupCollection<SalarySchemeCoefficient>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalarySchemeCoefficients;
                    }
    				OnPropertyChanged("SalarySchemeCoefficients");
                }
            }
        }
        private ICollection<SalarySchemeCoefficient> _salarySchemeCoefficients;
    
        public virtual ICollection<Job> Jobs
        {
            get
            {
                if (_jobs == null)
                {
                    var newCollection = new FixupCollection<Job>();
                    newCollection.CollectionChanged += FixupJobs;
                    _jobs = newCollection;
                }
                return _jobs;
            }
            set
            {
                if (!ReferenceEquals(_jobs, value))
                {
                    var previousValue = _jobs as FixupCollection<Job>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobs;
                    }
                    _jobs = value;
                    var newValue = value as FixupCollection<Job>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobs;
                    }
    				OnPropertyChanged("Jobs");
                }
            }
        }
        private ICollection<Job> _jobs;

        #endregion

        #region Association Fixup
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.SalarySchemes.Contains(this))
            {
                previousValue.SalarySchemes.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.SalarySchemes.Contains(this))
                {
                    Division.SalarySchemes.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.SalarySchemes.Contains(this))
            {
                previousValue.SalarySchemes.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.SalarySchemes.Contains(this))
                {
                    CreatedBy.SalarySchemes.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupSalarySchemeCoefficients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalarySchemeCoefficient item in e.NewItems)
                {
                    item.SalaryScheme = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalarySchemeCoefficient item in e.OldItems)
                {
                    if (ReferenceEquals(item.SalaryScheme, this))
                    {
                        item.SalaryScheme = null;
                    }
                }
            }
        }
    
        private void FixupJobs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Job item in e.NewItems)
                {
                    item.SalaryScheme = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Job item in e.OldItems)
                {
                    if (ReferenceEquals(item.SalaryScheme, this))
                    {
                        item.SalaryScheme = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
