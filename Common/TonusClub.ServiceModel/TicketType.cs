//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class TicketType : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual int Length
        {
            get {return _length;}
            set 
    		{ 
    			if(_length != value)
    			{
    				_length = value; 
    				
    				
    
    				OnPropertyChanged("Length");
    			}
    		}
        }
        private int _length;
    
    
    	[DataMember]
        public virtual decimal Units
        {
            get {return _units;}
            set 
    		{ 
    			if(_units != value)
    			{
    				_units = value; 
    				
    				
    
    				OnPropertyChanged("Units");
    			}
    		}
        }
        private decimal _units;
    
    
    	[DataMember]
        public virtual decimal GuestUnits
        {
            get {return _guestUnits;}
            set 
    		{ 
    			if(_guestUnits != value)
    			{
    				_guestUnits = value; 
    				
    				
    
    				OnPropertyChanged("GuestUnits");
    			}
    		}
        }
        private decimal _guestUnits;
    
    
    	[DataMember]
        public virtual decimal Price
        {
            get {return _price;}
            set 
    		{ 
    			if(_price != value)
    			{
    				_price = value; 
    				
    				
    
    				OnPropertyChanged("Price");
    			}
    		}
        }
        private decimal _price;
    
    
    	[DataMember]
        public virtual string Comments
        {
            get {return _comments;}
            set 
    		{ 
    			if(_comments != value)
    			{
    				_comments = value; 
    				
    				
    
    				OnPropertyChanged("Comments");
    			}
    		}
        }
        private string _comments;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (CreatedBy != null && CreatedBy.UserId != value)
                    {
                        CreatedBy = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual System.DateTime ValidTo
        {
            get {return _validTo;}
            set 
    		{ 
    			if(_validTo != value)
    			{
    				_validTo = value; 
    				
    				_validTo = DateTime.SpecifyKind(_validTo, DateTimeKind.Local);
    
    				OnPropertyChanged("ValidTo");
    			}
    		}
        }
        private System.DateTime _validTo;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual Nullable<int> AutoActivate
        {
            get {return _autoActivate;}
            set 
    		{ 
    			if(_autoActivate != value)
    			{
    				_autoActivate = value; 
    				
    				
    
    				OnPropertyChanged("AutoActivate");
    			}
    		}
        }
        private Nullable<int> _autoActivate;
    
    
    	[DataMember]
        public virtual bool IsVisit
        {
            get {return _isVisit;}
            set 
    		{ 
    			if(_isVisit != value)
    			{
    				_isVisit = value; 
    				
    				
    
    				OnPropertyChanged("IsVisit");
    			}
    		}
        }
        private bool _isVisit;
    
    
    	[DataMember]
        public virtual bool IsGuest
        {
            get {return _isGuest;}
            set 
    		{ 
    			if(_isGuest != value)
    			{
    				_isGuest = value; 
    				
    				
    
    				OnPropertyChanged("IsGuest");
    			}
    		}
        }
        private bool _isGuest;
    
    
    	[DataMember]
        public virtual string VisitStart
        {
            get {return _visitStart;}
            set 
    		{ 
    			if(_visitStart != value)
    			{
    				_visitStart = value; 
    				
    				
    
    				OnPropertyChanged("VisitStart");
    			}
    		}
        }
        private string _visitStart;
    
    
    	[DataMember]
        public virtual string VisitEnd
        {
            get {return _visitEnd;}
            set 
    		{ 
    			if(_visitEnd != value)
    			{
    				_visitEnd = value; 
    				
    				
    
    				OnPropertyChanged("VisitEnd");
    			}
    		}
        }
        private string _visitEnd;
    
    
    	[DataMember]
        public virtual int MaxFreezeDays
        {
            get {return _maxFreezeDays;}
            set 
    		{ 
    			if(_maxFreezeDays != value)
    			{
    				_maxFreezeDays = value; 
    				
    				
    
    				OnPropertyChanged("MaxFreezeDays");
    			}
    		}
        }
        private int _maxFreezeDays;
    
    
    	[DataMember]
        public virtual decimal Bonus
        {
            get {return _bonus;}
            set 
    		{ 
    			if(_bonus != value)
    			{
    				_bonus = value; 
    				
    				
    
    				OnPropertyChanged("Bonus");
    			}
    		}
        }
        private decimal _bonus;
    
    
    	[DataMember]
        public virtual double FreezePriceCoeff
        {
            get {return _freezePriceCoeff;}
            set 
    		{ 
    			if(_freezePriceCoeff != value)
    			{
    				_freezePriceCoeff = value; 
    				
    				
    
    				OnPropertyChanged("FreezePriceCoeff");
    			}
    		}
        }
        private double _freezePriceCoeff;
    
    
    	[DataMember]
        public virtual int SolariumMinutes
        {
            get {return _solariumMinutes;}
            set 
    		{ 
    			if(_solariumMinutes != value)
    			{
    				_solariumMinutes = value; 
    				
    				
    
    				OnPropertyChanged("SolariumMinutes");
    			}
    		}
        }
        private int _solariumMinutes;
    
    
    	[DataMember]
        public virtual bool IsAction
        {
            get {return _isAction;}
            set 
    		{ 
    			if(_isAction != value)
    			{
    				_isAction = value; 
    				
    				
    
    				OnPropertyChanged("IsAction");
    			}
    		}
        }
        private bool _isAction;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SettingsFolderId
        {
            get {return _settingsFolderId;}
            set 
    		{ 
    			if(_settingsFolderId != value)
    			{
    				_settingsFolderId = value; 
    				
    				
    
    				OnPropertyChanged("SettingsFolderId");
    			}
    		}
        }
        private Nullable<System.Guid> _settingsFolderId;
    
    
    	[DataMember]
        public virtual bool HasTestdrive
        {
            get {return _hasTestdrive;}
            set 
    		{ 
    			if(_hasTestdrive != value)
    			{
    				_hasTestdrive = value; 
    				
    				
    
    				OnPropertyChanged("HasTestdrive");
    			}
    		}
        }
        private bool _hasTestdrive;
    
    
    	[DataMember]
        public virtual string Code1C
        {
            get {return _code1C;}
            set 
    		{ 
    			if(_code1C != value)
    			{
    				_code1C = value; 
    				
    				
    
    				OnPropertyChanged("Code1C");
    			}
    		}
        }
        private string _code1C;
    
    
    	[DataMember]
        public virtual bool IsSmart
        {
            get {return _isSmart;}
            set 
    		{ 
    			if(_isSmart != value)
    			{
    				_isSmart = value; 
    				
    				
    
    				OnPropertyChanged("IsSmart");
    			}
    		}
        }
        private bool _isSmart;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Ticket> Tickets
        {
            get
            {
                if (_tickets == null)
                {
                    var newCollection = new FixupCollection<Ticket>();
                    newCollection.CollectionChanged += FixupTickets;
                    _tickets = newCollection;
                }
                return _tickets;
            }
            set
            {
                if (!ReferenceEquals(_tickets, value))
                {
                    var previousValue = _tickets as FixupCollection<Ticket>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTickets;
                    }
                    _tickets = value;
                    var newValue = value as FixupCollection<Ticket>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTickets;
                    }
    				OnPropertyChanged("Tickets");
                }
            }
        }
        private ICollection<Ticket> _tickets;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual ICollection<TreatmentType> TreatmentTypes
        {
            get
            {
                if (_treatmentTypes == null)
                {
                    var newCollection = new FixupCollection<TreatmentType>();
                    newCollection.CollectionChanged += FixupTreatmentTypes;
                    _treatmentTypes = newCollection;
                }
                return _treatmentTypes;
            }
            set
            {
                if (!ReferenceEquals(_treatmentTypes, value))
                {
                    var previousValue = _treatmentTypes as FixupCollection<TreatmentType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentTypes;
                    }
                    _treatmentTypes = value;
                    var newValue = value as FixupCollection<TreatmentType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentTypes;
                    }
    				OnPropertyChanged("TreatmentTypes");
                }
            }
        }
        private ICollection<TreatmentType> _treatmentTypes;
    
        public virtual ICollection<Company> Companies
        {
            get
            {
                if (_companies == null)
                {
                    var newCollection = new FixupCollection<Company>();
                    newCollection.CollectionChanged += FixupCompanies;
                    _companies = newCollection;
                }
                return _companies;
            }
            set
            {
                if (!ReferenceEquals(_companies, value))
                {
                    var previousValue = _companies as FixupCollection<Company>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCompanies;
                    }
                    _companies = value;
                    var newValue = value as FixupCollection<Company>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCompanies;
                    }
    				OnPropertyChanged("Companies");
                }
            }
        }
        private ICollection<Company> _companies;
    
        public virtual ICollection<TicketTypeLimit> TicketTypeLimits
        {
            get
            {
                if (_ticketTypeLimits == null)
                {
                    var newCollection = new FixupCollection<TicketTypeLimit>();
                    newCollection.CollectionChanged += FixupTicketTypeLimits;
                    _ticketTypeLimits = newCollection;
                }
                return _ticketTypeLimits;
            }
            set
            {
                if (!ReferenceEquals(_ticketTypeLimits, value))
                {
                    var previousValue = _ticketTypeLimits as FixupCollection<TicketTypeLimit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketTypeLimits;
                    }
                    _ticketTypeLimits = value;
                    var newValue = value as FixupCollection<TicketTypeLimit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketTypeLimits;
                    }
    				OnPropertyChanged("TicketTypeLimits");
                }
            }
        }
        private ICollection<TicketTypeLimit> _ticketTypeLimits;
    
        public virtual ICollection<AnketTicket> AnketTickets
        {
            get
            {
                if (_anketTickets == null)
                {
                    var newCollection = new FixupCollection<AnketTicket>();
                    newCollection.CollectionChanged += FixupAnketTickets;
                    _anketTickets = newCollection;
                }
                return _anketTickets;
            }
            set
            {
                if (!ReferenceEquals(_anketTickets, value))
                {
                    var previousValue = _anketTickets as FixupCollection<AnketTicket>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnketTickets;
                    }
                    _anketTickets = value;
                    var newValue = value as FixupCollection<AnketTicket>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnketTickets;
                    }
    				OnPropertyChanged("AnketTickets");
                }
            }
        }
        private ICollection<AnketTicket> _anketTickets;
    
        public virtual ICollection<TicketTypesShop> TicketTypesShops
        {
            get
            {
                if (_ticketTypesShops == null)
                {
                    var newCollection = new FixupCollection<TicketTypesShop>();
                    newCollection.CollectionChanged += FixupTicketTypesShops;
                    _ticketTypesShops = newCollection;
                }
                return _ticketTypesShops;
            }
            set
            {
                if (!ReferenceEquals(_ticketTypesShops, value))
                {
                    var previousValue = _ticketTypesShops as FixupCollection<TicketTypesShop>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketTypesShops;
                    }
                    _ticketTypesShops = value;
                    var newValue = value as FixupCollection<TicketTypesShop>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketTypesShops;
                    }
    				OnPropertyChanged("TicketTypesShops");
                }
            }
        }
        private ICollection<TicketTypesShop> _ticketTypesShops;
    
        public virtual ICollection<CustomerCardType> CustomerCardTypes
        {
            get
            {
                if (_customerCardTypes == null)
                {
                    var newCollection = new FixupCollection<CustomerCardType>();
                    newCollection.CollectionChanged += FixupCustomerCardTypes;
                    _customerCardTypes = newCollection;
                }
                return _customerCardTypes;
            }
            set
            {
                if (!ReferenceEquals(_customerCardTypes, value))
                {
                    var previousValue = _customerCardTypes as FixupCollection<CustomerCardType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerCardTypes;
                    }
                    _customerCardTypes = value;
                    var newValue = value as FixupCollection<CustomerCardType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerCardTypes;
                    }
    				OnPropertyChanged("CustomerCardTypes");
                }
            }
        }
        private ICollection<CustomerCardType> _customerCardTypes;

        #endregion

        #region Association Fixup
    
        private void FixupCreatedBy(User previousValue)
        {
            if (CreatedBy != null)
            {
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupTickets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Ticket item in e.NewItems)
                {
                    item.TicketType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Ticket item in e.OldItems)
                {
                    if (ReferenceEquals(item.TicketType, this))
                    {
                        item.TicketType = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentType item in e.NewItems)
                {
                    if (!item.TicketTypes.Contains(this))
                    {
                        item.TicketTypes.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentType item in e.OldItems)
                {
                    if (item.TicketTypes.Contains(this))
                    {
                        item.TicketTypes.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCompanies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Company item in e.NewItems)
                {
                    if (!item.TicketTypes.Contains(this))
                    {
                        item.TicketTypes.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Company item in e.OldItems)
                {
                    if (item.TicketTypes.Contains(this))
                    {
                        item.TicketTypes.Remove(this);
                    }
                }
            }
        }
    
        private void FixupTicketTypeLimits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketTypeLimit item in e.NewItems)
                {
                    item.TicketType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketTypeLimit item in e.OldItems)
                {
                    if (ReferenceEquals(item.TicketType, this))
                    {
                        item.TicketType = null;
                    }
                }
            }
        }
    
        private void FixupAnketTickets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AnketTicket item in e.NewItems)
                {
                    item.TicketType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AnketTicket item in e.OldItems)
                {
                    if (ReferenceEquals(item.TicketType, this))
                    {
                        item.TicketType = null;
                    }
                }
            }
        }
    
        private void FixupTicketTypesShops(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketTypesShop item in e.NewItems)
                {
                    item.TicketType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketTypesShop item in e.OldItems)
                {
                    if (ReferenceEquals(item.TicketType, this))
                    {
                        item.TicketType = null;
                    }
                }
            }
        }
    
        private void FixupCustomerCardTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerCardType item in e.NewItems)
                {
                    if (!item.TicketTypes.Contains(this))
                    {
                        item.TicketTypes.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerCardType item in e.OldItems)
                {
                    if (item.TicketTypes.Contains(this))
                    {
                        item.TicketTypes.Remove(this);
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
