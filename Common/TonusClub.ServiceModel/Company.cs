//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Company : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual string CompanyName
        {
            get {return _companyName;}
            set 
    		{ 
    			if(_companyName != value)
    			{
    				_companyName = value; 
    				
    				
    
    				OnPropertyChanged("CompanyName");
    			}
    		}
        }
        private string _companyName;
    
    
    	[DataMember]
        public virtual decimal ResidualValueP1
        {
            get {return _residualValueP1;}
            set 
    		{ 
    			if(_residualValueP1 != value)
    			{
    				_residualValueP1 = value; 
    				
    				
    
    				OnPropertyChanged("ResidualValueP1");
    			}
    		}
        }
        private decimal _residualValueP1;
    
    
    	[DataMember]
        public virtual decimal ResidualValueP2
        {
            get {return _residualValueP2;}
            set 
    		{ 
    			if(_residualValueP2 != value)
    			{
    				_residualValueP2 = value; 
    				
    				
    
    				OnPropertyChanged("ResidualValueP2");
    			}
    		}
        }
        private decimal _residualValueP2;
    
    
    	[DataMember]
        public virtual decimal ResidualValueK2
        {
            get {return _residualValueK2;}
            set 
    		{ 
    			if(_residualValueK2 != value)
    			{
    				_residualValueK2 = value; 
    				
    				
    
    				OnPropertyChanged("ResidualValueK2");
    			}
    		}
        }
        private decimal _residualValueK2;
    
    
    	[DataMember]
        public virtual string ConcessionNumber
        {
            get {return _concessionNumber;}
            set 
    		{ 
    			if(_concessionNumber != value)
    			{
    				_concessionNumber = value; 
    				
    				
    
    				OnPropertyChanged("ConcessionNumber");
    			}
    		}
        }
        private string _concessionNumber;
    
    
    	[DataMember]
        public virtual string CityName
        {
            get {return _cityName;}
            set 
    		{ 
    			if(_cityName != value)
    			{
    				_cityName = value; 
    				
    				
    
    				OnPropertyChanged("CityName");
    			}
    		}
        }
        private string _cityName;
    
    
    	[DataMember]
        public virtual string GeneralManagerRod
        {
            get {return _generalManagerRod;}
            set 
    		{ 
    			if(_generalManagerRod != value)
    			{
    				_generalManagerRod = value; 
    				
    				
    
    				OnPropertyChanged("GeneralManagerRod");
    			}
    		}
        }
        private string _generalManagerRod;
    
    
    	[DataMember]
        public virtual string GeneralManagerBaseRod
        {
            get {return _generalManagerBaseRod;}
            set 
    		{ 
    			if(_generalManagerBaseRod != value)
    			{
    				_generalManagerBaseRod = value; 
    				
    				
    
    				OnPropertyChanged("GeneralManagerBaseRod");
    			}
    		}
        }
        private string _generalManagerBaseRod;
    
    
    	[DataMember]
        public virtual string EssentialElements
        {
            get {return _essentialElements;}
            set 
    		{ 
    			if(_essentialElements != value)
    			{
    				_essentialElements = value; 
    				
    				
    
    				OnPropertyChanged("EssentialElements");
    			}
    		}
        }
        private string _essentialElements;
    
    
    	[DataMember]
        public virtual string GeneralManagerName
        {
            get {return _generalManagerName;}
            set 
    		{ 
    			if(_generalManagerName != value)
    			{
    				_generalManagerName = value; 
    				
    				
    
    				OnPropertyChanged("GeneralManagerName");
    			}
    		}
        }
        private string _generalManagerName;
    
    
    	[DataMember]
        public virtual string GeneralManagerPos
        {
            get {return _generalManagerPos;}
            set 
    		{ 
    			if(_generalManagerPos != value)
    			{
    				_generalManagerPos = value; 
    				
    				
    
    				OnPropertyChanged("GeneralManagerPos");
    			}
    		}
        }
        private string _generalManagerPos;
    
    
    	[DataMember]
        public virtual int MaxGuestUnits
        {
            get {return _maxGuestUnits;}
            set 
    		{ 
    			if(_maxGuestUnits != value)
    			{
    				_maxGuestUnits = value; 
    				
    				
    
    				OnPropertyChanged("MaxGuestUnits");
    			}
    		}
        }
        private int _maxGuestUnits;
    
    
    	[DataMember]
        public virtual decimal TicketRebillCommission
        {
            get {return _ticketRebillCommission;}
            set 
    		{ 
    			if(_ticketRebillCommission != value)
    			{
    				_ticketRebillCommission = value; 
    				
    				
    
    				OnPropertyChanged("TicketRebillCommission");
    			}
    		}
        }
        private decimal _ticketRebillCommission;
    
    
    	[DataMember]
        public virtual decimal FreezePrice
        {
            get {return _freezePrice;}
            set 
    		{ 
    			if(_freezePrice != value)
    			{
    				_freezePrice = value; 
    				
    				
    
    				OnPropertyChanged("FreezePrice");
    			}
    		}
        }
        private decimal _freezePrice;
    
    
    	[DataMember]
        public virtual int MaxCancellationPeriod
        {
            get {return _maxCancellationPeriod;}
            set 
    		{ 
    			if(_maxCancellationPeriod != value)
    			{
    				_maxCancellationPeriod = value; 
    				
    				
    
    				OnPropertyChanged("MaxCancellationPeriod");
    			}
    		}
        }
        private int _maxCancellationPeriod;
    
    
    	[DataMember]
        public virtual decimal TicketReturnPercentCommission
        {
            get {return _ticketReturnPercentCommission;}
            set 
    		{ 
    			if(_ticketReturnPercentCommission != value)
    			{
    				_ticketReturnPercentCommission = value; 
    				
    				
    
    				OnPropertyChanged("TicketReturnPercentCommission");
    			}
    		}
        }
        private decimal _ticketReturnPercentCommission;
    
    
    	[DataMember]
        public virtual decimal TicketReturnFixedCommission
        {
            get {return _ticketReturnFixedCommission;}
            set 
    		{ 
    			if(_ticketReturnFixedCommission != value)
    			{
    				_ticketReturnFixedCommission = value; 
    				
    				
    
    				OnPropertyChanged("TicketReturnFixedCommission");
    			}
    		}
        }
        private decimal _ticketReturnFixedCommission;
    
    
    	[DataMember]
        public virtual decimal ResidualValueK11
        {
            get {return _residualValueK11;}
            set 
    		{ 
    			if(_residualValueK11 != value)
    			{
    				_residualValueK11 = value; 
    				
    				
    
    				OnPropertyChanged("ResidualValueK11");
    			}
    		}
        }
        private decimal _residualValueK11;
    
    
    	[DataMember]
        public virtual decimal ResidualValueK12
        {
            get {return _residualValueK12;}
            set 
    		{ 
    			if(_residualValueK12 != value)
    			{
    				_residualValueK12 = value; 
    				
    				
    
    				OnPropertyChanged("ResidualValueK12");
    			}
    		}
        }
        private decimal _residualValueK12;
    
    
    	[DataMember]
        public virtual decimal ResidualValueK13
        {
            get {return _residualValueK13;}
            set 
    		{ 
    			if(_residualValueK13 != value)
    			{
    				_residualValueK13 = value; 
    				
    				
    
    				OnPropertyChanged("ResidualValueK13");
    			}
    		}
        }
        private decimal _residualValueK13;
    
    
    	[DataMember]
        public virtual decimal ResidualValueS1
        {
            get {return _residualValueS1;}
            set 
    		{ 
    			if(_residualValueS1 != value)
    			{
    				_residualValueS1 = value; 
    				
    				
    
    				OnPropertyChanged("ResidualValueS1");
    			}
    		}
        }
        private decimal _residualValueS1;
    
    
    	[DataMember]
        public virtual int MaxTreatmentReserve
        {
            get {return _maxTreatmentReserve;}
            set 
    		{ 
    			if(_maxTreatmentReserve != value)
    			{
    				_maxTreatmentReserve = value; 
    				
    				
    
    				OnPropertyChanged("MaxTreatmentReserve");
    			}
    		}
        }
        private int _maxTreatmentReserve;
    
    
    	[DataMember]
        public virtual bool HasSubway
        {
            get {return _hasSubway;}
            set 
    		{ 
    			if(_hasSubway != value)
    			{
    				_hasSubway = value; 
    				
    				
    
    				OnPropertyChanged("HasSubway");
    			}
    		}
        }
        private bool _hasSubway;
    
    
    	[DataMember]
        public virtual int ShelfLostPenalty
        {
            get {return _shelfLostPenalty;}
            set 
    		{ 
    			if(_shelfLostPenalty != value)
    			{
    				_shelfLostPenalty = value; 
    				
    				
    
    				OnPropertyChanged("ShelfLostPenalty");
    			}
    		}
        }
        private int _shelfLostPenalty;
    
    
    	[DataMember]
        public virtual int SafeLostPenalty
        {
            get {return _safeLostPenalty;}
            set 
    		{ 
    			if(_safeLostPenalty != value)
    			{
    				_safeLostPenalty = value; 
    				
    				
    
    				OnPropertyChanged("SafeLostPenalty");
    			}
    		}
        }
        private int _safeLostPenalty;
    
    
    	[DataMember]
        public virtual string GeneralAccountantName
        {
            get {return _generalAccountantName;}
            set 
    		{ 
    			if(_generalAccountantName != value)
    			{
    				_generalAccountantName = value; 
    				
    				
    
    				OnPropertyChanged("GeneralAccountantName");
    			}
    		}
        }
        private string _generalAccountantName;
    
    
    	[DataMember]
        public virtual decimal DepositComissionPercent
        {
            get {return _depositComissionPercent;}
            set 
    		{ 
    			if(_depositComissionPercent != value)
    			{
    				_depositComissionPercent = value; 
    				
    				
    
    				OnPropertyChanged("DepositComissionPercent");
    			}
    		}
        }
        private decimal _depositComissionPercent;
    
    
    	[DataMember]
        public virtual decimal DepositComissionRub
        {
            get {return _depositComissionRub;}
            set 
    		{ 
    			if(_depositComissionRub != value)
    			{
    				_depositComissionRub = value; 
    				
    				
    
    				OnPropertyChanged("DepositComissionRub");
    			}
    		}
        }
        private decimal _depositComissionRub;
    
    
    	[DataMember]
        public virtual string DepositWarning
        {
            get {return _depositWarning;}
            set 
    		{ 
    			if(_depositWarning != value)
    			{
    				_depositWarning = value; 
    				
    				
    
    				OnPropertyChanged("DepositWarning");
    			}
    		}
        }
        private string _depositWarning;
    
    
    	[DataMember]
        public virtual string CashWarning
        {
            get {return _cashWarning;}
            set 
    		{ 
    			if(_cashWarning != value)
    			{
    				_cashWarning = value; 
    				
    				
    
    				OnPropertyChanged("CashWarning");
    			}
    		}
        }
        private string _cashWarning;
    
    
    	[DataMember]
        public virtual string CardWarning
        {
            get {return _cardWarning;}
            set 
    		{ 
    			if(_cardWarning != value)
    			{
    				_cardWarning = value; 
    				
    				
    
    				OnPropertyChanged("CardWarning");
    			}
    		}
        }
        private string _cardWarning;
    
    
    	[DataMember]
        public virtual string IncomingCallText
        {
            get {return _incomingCallText;}
            set 
    		{ 
    			if(_incomingCallText != value)
    			{
    				_incomingCallText = value; 
    				
    				
    
    				OnPropertyChanged("IncomingCallText");
    			}
    		}
        }
        private string _incomingCallText;
    
    
    	[DataMember]
        public virtual string IncomingNewCusomerCallText
        {
            get {return _incomingNewCusomerCallText;}
            set 
    		{ 
    			if(_incomingNewCusomerCallText != value)
    			{
    				_incomingNewCusomerCallText = value; 
    				
    				
    
    				OnPropertyChanged("IncomingNewCusomerCallText");
    			}
    		}
        }
        private string _incomingNewCusomerCallText;
    
    
    	[DataMember]
        public virtual string IncomingNotACusomerCallText
        {
            get {return _incomingNotACusomerCallText;}
            set 
    		{ 
    			if(_incomingNotACusomerCallText != value)
    			{
    				_incomingNotACusomerCallText = value; 
    				
    				
    
    				OnPropertyChanged("IncomingNotACusomerCallText");
    			}
    		}
        }
        private string _incomingNotACusomerCallText;
    
    
    	[DataMember]
        public virtual int LostCutomerDays
        {
            get {return _lostCutomerDays;}
            set 
    		{ 
    			if(_lostCutomerDays != value)
    			{
    				_lostCutomerDays = value; 
    				
    				
    
    				OnPropertyChanged("LostCutomerDays");
    			}
    		}
        }
        private int _lostCutomerDays;
    
    
    	[DataMember]
        public virtual string GalloperId
        {
            get {return _galloperId;}
            set 
    		{ 
    			if(_galloperId != value)
    			{
    				_galloperId = value; 
    				
    				
    
    				OnPropertyChanged("GalloperId");
    			}
    		}
        }
        private string _galloperId;
    
    
    	[DataMember]
        public virtual string OrgForm
        {
            get {return _orgForm;}
            set 
    		{ 
    			if(_orgForm != value)
    			{
    				_orgForm = value; 
    				
    				
    
    				OnPropertyChanged("OrgForm");
    			}
    		}
        }
        private string _orgForm;
    
    
    	[DataMember]
        public virtual string INN
        {
            get {return _iNN;}
            set 
    		{ 
    			if(_iNN != value)
    			{
    				_iNN = value; 
    				
    				
    
    				OnPropertyChanged("INN");
    			}
    		}
        }
        private string _iNN;
    
    
    	[DataMember]
        public virtual string KPP
        {
            get {return _kPP;}
            set 
    		{ 
    			if(_kPP != value)
    			{
    				_kPP = value; 
    				
    				
    
    				OnPropertyChanged("KPP");
    			}
    		}
        }
        private string _kPP;
    
    
    	[DataMember]
        public virtual string RSBank
        {
            get {return _rSBank;}
            set 
    		{ 
    			if(_rSBank != value)
    			{
    				_rSBank = value; 
    				
    				
    
    				OnPropertyChanged("RSBank");
    			}
    		}
        }
        private string _rSBank;
    
    
    	[DataMember]
        public virtual string KSBank
        {
            get {return _kSBank;}
            set 
    		{ 
    			if(_kSBank != value)
    			{
    				_kSBank = value; 
    				
    				
    
    				OnPropertyChanged("KSBank");
    			}
    		}
        }
        private string _kSBank;
    
    
    	[DataMember]
        public virtual string BankName
        {
            get {return _bankName;}
            set 
    		{ 
    			if(_bankName != value)
    			{
    				_bankName = value; 
    				
    				
    
    				OnPropertyChanged("BankName");
    			}
    		}
        }
        private string _bankName;
    
    
    	[DataMember]
        public virtual string BIK
        {
            get {return _bIK;}
            set 
    		{ 
    			if(_bIK != value)
    			{
    				_bIK = value; 
    				
    				
    
    				OnPropertyChanged("BIK");
    			}
    		}
        }
        private string _bIK;
    
    
    	[DataMember]
        public virtual string BankCity
        {
            get {return _bankCity;}
            set 
    		{ 
    			if(_bankCity != value)
    			{
    				_bankCity = value; 
    				
    				
    
    				OnPropertyChanged("BankCity");
    			}
    		}
        }
        private string _bankCity;
    
    
    	[DataMember]
        public virtual string Phone1
        {
            get {return _phone1;}
            set 
    		{ 
    			if(_phone1 != value)
    			{
    				_phone1 = value; 
    				
    				
    
    				OnPropertyChanged("Phone1");
    			}
    		}
        }
        private string _phone1;
    
    
    	[DataMember]
        public virtual string Phone2
        {
            get {return _phone2;}
            set 
    		{ 
    			if(_phone2 != value)
    			{
    				_phone2 = value; 
    				
    				
    
    				OnPropertyChanged("Phone2");
    			}
    		}
        }
        private string _phone2;
    
    
    	[DataMember]
        public virtual Nullable<int> MaxFreezeUnits
        {
            get {return _maxFreezeUnits;}
            set 
    		{ 
    			if(_maxFreezeUnits != value)
    			{
    				_maxFreezeUnits = value; 
    				
    				
    
    				OnPropertyChanged("MaxFreezeUnits");
    			}
    		}
        }
        private Nullable<int> _maxFreezeUnits;
    
    
    	[DataMember]
        public virtual Nullable<decimal> MaxFreezePercent
        {
            get {return _maxFreezePercent;}
            set 
    		{ 
    			if(_maxFreezePercent != value)
    			{
    				_maxFreezePercent = value; 
    				
    				
    
    				OnPropertyChanged("MaxFreezePercent");
    			}
    		}
        }
        private Nullable<decimal> _maxFreezePercent;
    
    
    	[DataMember]
        public virtual string ReportEmail
        {
            get {return _reportEmail;}
            set 
    		{ 
    			if(_reportEmail != value)
    			{
    				_reportEmail = value; 
    				
    				
    
    				OnPropertyChanged("ReportEmail");
    			}
    		}
        }
        private string _reportEmail;
    
    
    	[DataMember]
        public virtual short UtcCorr
        {
            get {return _utcCorr;}
            set 
    		{ 
    			if(_utcCorr != value)
    			{
    				_utcCorr = value; 
    				
    				
    
    				OnPropertyChanged("UtcCorr");
    			}
    		}
        }
        private short _utcCorr;
    
    
    	[DataMember]
        public virtual string Address
        {
            get {return _address;}
            set 
    		{ 
    			if(_address != value)
    			{
    				_address = value; 
    				
    				
    
    				OnPropertyChanged("Address");
    			}
    		}
        }
        private string _address;
    
    
    	[DataMember]
        public virtual string UserPrefix
        {
            get {return _userPrefix;}
            set 
    		{ 
    			if(_userPrefix != value)
    			{
    				_userPrefix = value; 
    				
    				
    
    				OnPropertyChanged("UserPrefix");
    			}
    		}
        }
        private string _userPrefix;
    
    
    	[DataMember]
        public virtual bool TicketsClubs
        {
            get {return _ticketsClubs;}
            set 
    		{ 
    			if(_ticketsClubs != value)
    			{
    				_ticketsClubs = value; 
    				
    				
    
    				OnPropertyChanged("TicketsClubs");
    			}
    		}
        }
        private bool _ticketsClubs;
    
    
    	[DataMember]
        public virtual string AccountantName
        {
            get {return _accountantName;}
            set 
    		{ 
    			if(_accountantName != value)
    			{
    				_accountantName = value; 
    				
    				
    
    				OnPropertyChanged("AccountantName");
    			}
    		}
        }
        private string _accountantName;
    
    
    	[DataMember]
        public virtual decimal ActivateInstalment
        {
            get {return _activateInstalment;}
            set 
    		{ 
    			if(_activateInstalment != value)
    			{
    				_activateInstalment = value; 
    				
    				
    
    				OnPropertyChanged("ActivateInstalment");
    			}
    		}
        }
        private decimal _activateInstalment;
    
    
    	[DataMember]
        public virtual string CompanyVopsEmail
        {
            get {return _companyVopsEmail;}
            set 
    		{ 
    			if(_companyVopsEmail != value)
    			{
    				_companyVopsEmail = value; 
    				
    				
    
    				OnPropertyChanged("CompanyVopsEmail");
    			}
    		}
        }
        private string _companyVopsEmail;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupCustomers;
                    _customers = newCollection;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomers;
                    }
                    _customers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomers;
                    }
    				OnPropertyChanged("Customers");
                }
            }
        }
        private ICollection<Customer> _customers;
    
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
    				OnPropertyChanged("Users");
                }
            }
        }
        private ICollection<User> _users;
    
        public virtual ICollection<Good> Goods
        {
            get
            {
                if (_goods == null)
                {
                    var newCollection = new FixupCollection<Good>();
                    newCollection.CollectionChanged += FixupGoods;
                    _goods = newCollection;
                }
                return _goods;
            }
            set
            {
                if (!ReferenceEquals(_goods, value))
                {
                    var previousValue = _goods as FixupCollection<Good>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoods;
                    }
                    _goods = value;
                    var newValue = value as FixupCollection<Good>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoods;
                    }
    				OnPropertyChanged("Goods");
                }
            }
        }
        private ICollection<Good> _goods;
    
        public virtual ICollection<Manufacturer> Manufacturers
        {
            get
            {
                if (_manufacturers == null)
                {
                    var newCollection = new FixupCollection<Manufacturer>();
                    newCollection.CollectionChanged += FixupManufacturers;
                    _manufacturers = newCollection;
                }
                return _manufacturers;
            }
            set
            {
                if (!ReferenceEquals(_manufacturers, value))
                {
                    var previousValue = _manufacturers as FixupCollection<Manufacturer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupManufacturers;
                    }
                    _manufacturers = value;
                    var newValue = value as FixupCollection<Manufacturer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupManufacturers;
                    }
    				OnPropertyChanged("Manufacturers");
                }
            }
        }
        private ICollection<Manufacturer> _manufacturers;
    
        public virtual ICollection<Provider> Providers
        {
            get
            {
                if (_providers == null)
                {
                    var newCollection = new FixupCollection<Provider>();
                    newCollection.CollectionChanged += FixupProviders;
                    _providers = newCollection;
                }
                return _providers;
            }
            set
            {
                if (!ReferenceEquals(_providers, value))
                {
                    var previousValue = _providers as FixupCollection<Provider>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProviders;
                    }
                    _providers = value;
                    var newValue = value as FixupCollection<Provider>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProviders;
                    }
    				OnPropertyChanged("Providers");
                }
            }
        }
        private ICollection<Provider> _providers;
    
        public virtual ICollection<ProviderPayment> ProviderPayments
        {
            get
            {
                if (_providerPayments == null)
                {
                    var newCollection = new FixupCollection<ProviderPayment>();
                    newCollection.CollectionChanged += FixupProviderPayments;
                    _providerPayments = newCollection;
                }
                return _providerPayments;
            }
            set
            {
                if (!ReferenceEquals(_providerPayments, value))
                {
                    var previousValue = _providerPayments as FixupCollection<ProviderPayment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProviderPayments;
                    }
                    _providerPayments = value;
                    var newValue = value as FixupCollection<ProviderPayment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProviderPayments;
                    }
    				OnPropertyChanged("ProviderPayments");
                }
            }
        }
        private ICollection<ProviderPayment> _providerPayments;
    
        public virtual ICollection<Division> Divisions
        {
            get
            {
                if (_divisions == null)
                {
                    var newCollection = new FixupCollection<Division>();
                    newCollection.CollectionChanged += FixupDivisions;
                    _divisions = newCollection;
                }
                return _divisions;
            }
            set
            {
                if (!ReferenceEquals(_divisions, value))
                {
                    var previousValue = _divisions as FixupCollection<Division>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDivisions;
                    }
                    _divisions = value;
                    var newValue = value as FixupCollection<Division>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDivisions;
                    }
    				OnPropertyChanged("Divisions");
                }
            }
        }
        private ICollection<Division> _divisions;
    
        public virtual ICollection<GoodPrice> GoodPrices
        {
            get
            {
                if (_goodPrices == null)
                {
                    var newCollection = new FixupCollection<GoodPrice>();
                    newCollection.CollectionChanged += FixupGoodPrices;
                    _goodPrices = newCollection;
                }
                return _goodPrices;
            }
            set
            {
                if (!ReferenceEquals(_goodPrices, value))
                {
                    var previousValue = _goodPrices as FixupCollection<GoodPrice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodPrices;
                    }
                    _goodPrices = value;
                    var newValue = value as FixupCollection<GoodPrice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodPrices;
                    }
    				OnPropertyChanged("GoodPrices");
                }
            }
        }
        private ICollection<GoodPrice> _goodPrices;
    
        public virtual ICollection<GoodAction> GoodActions
        {
            get
            {
                if (_goodActions == null)
                {
                    var newCollection = new FixupCollection<GoodAction>();
                    newCollection.CollectionChanged += FixupGoodActions;
                    _goodActions = newCollection;
                }
                return _goodActions;
            }
            set
            {
                if (!ReferenceEquals(_goodActions, value))
                {
                    var previousValue = _goodActions as FixupCollection<GoodAction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodActions;
                    }
                    _goodActions = value;
                    var newValue = value as FixupCollection<GoodAction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodActions;
                    }
    				OnPropertyChanged("GoodActions");
                }
            }
        }
        private ICollection<GoodAction> _goodActions;
    
        public virtual ICollection<Manufacturer> Manufacturers_1
        {
            get
            {
                if (_manufacturers_1 == null)
                {
                    var newCollection = new FixupCollection<Manufacturer>();
                    newCollection.CollectionChanged += FixupManufacturers_1;
                    _manufacturers_1 = newCollection;
                }
                return _manufacturers_1;
            }
            set
            {
                if (!ReferenceEquals(_manufacturers_1, value))
                {
                    var previousValue = _manufacturers_1 as FixupCollection<Manufacturer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupManufacturers_1;
                    }
                    _manufacturers_1 = value;
                    var newValue = value as FixupCollection<Manufacturer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupManufacturers_1;
                    }
    				OnPropertyChanged("Manufacturers_1");
                }
            }
        }
        private ICollection<Manufacturer> _manufacturers_1;
    
        public virtual ICollection<TreatmentProgramLine> TreatmentProgramLines
        {
            get
            {
                if (_treatmentProgramLines == null)
                {
                    var newCollection = new FixupCollection<TreatmentProgramLine>();
                    newCollection.CollectionChanged += FixupTreatmentProgramLines;
                    _treatmentProgramLines = newCollection;
                }
                return _treatmentProgramLines;
            }
            set
            {
                if (!ReferenceEquals(_treatmentProgramLines, value))
                {
                    var previousValue = _treatmentProgramLines as FixupCollection<TreatmentProgramLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentProgramLines;
                    }
                    _treatmentProgramLines = value;
                    var newValue = value as FixupCollection<TreatmentProgramLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentProgramLines;
                    }
    				OnPropertyChanged("TreatmentProgramLines");
                }
            }
        }
        private ICollection<TreatmentProgramLine> _treatmentProgramLines;
    
        public virtual ICollection<TreatmentProgram> TreatmentPrograms
        {
            get
            {
                if (_treatmentPrograms == null)
                {
                    var newCollection = new FixupCollection<TreatmentProgram>();
                    newCollection.CollectionChanged += FixupTreatmentPrograms;
                    _treatmentPrograms = newCollection;
                }
                return _treatmentPrograms;
            }
            set
            {
                if (!ReferenceEquals(_treatmentPrograms, value))
                {
                    var previousValue = _treatmentPrograms as FixupCollection<TreatmentProgram>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentPrograms;
                    }
                    _treatmentPrograms = value;
                    var newValue = value as FixupCollection<TreatmentProgram>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentPrograms;
                    }
    				OnPropertyChanged("TreatmentPrograms");
                }
            }
        }
        private ICollection<TreatmentProgram> _treatmentPrograms;
    
        public virtual ICollection<CustomerTarget> CustomerTargets
        {
            get
            {
                if (_customerTargets == null)
                {
                    var newCollection = new FixupCollection<CustomerTarget>();
                    newCollection.CollectionChanged += FixupCustomerTargets;
                    _customerTargets = newCollection;
                }
                return _customerTargets;
            }
            set
            {
                if (!ReferenceEquals(_customerTargets, value))
                {
                    var previousValue = _customerTargets as FixupCollection<CustomerTarget>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerTargets;
                    }
                    _customerTargets = value;
                    var newValue = value as FixupCollection<CustomerTarget>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerTargets;
                    }
    				OnPropertyChanged("CustomerTargets");
                }
            }
        }
        private ICollection<CustomerTarget> _customerTargets;
    
        public virtual ICollection<Anthropometric> Anthropometrics
        {
            get
            {
                if (_anthropometrics == null)
                {
                    var newCollection = new FixupCollection<Anthropometric>();
                    newCollection.CollectionChanged += FixupAnthropometrics;
                    _anthropometrics = newCollection;
                }
                return _anthropometrics;
            }
            set
            {
                if (!ReferenceEquals(_anthropometrics, value))
                {
                    var previousValue = _anthropometrics as FixupCollection<Anthropometric>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnthropometrics;
                    }
                    _anthropometrics = value;
                    var newValue = value as FixupCollection<Anthropometric>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnthropometrics;
                    }
    				OnPropertyChanged("Anthropometrics");
                }
            }
        }
        private ICollection<Anthropometric> _anthropometrics;
    
        public virtual ICollection<DoctorVisit> DoctorVisits
        {
            get
            {
                if (_doctorVisits == null)
                {
                    var newCollection = new FixupCollection<DoctorVisit>();
                    newCollection.CollectionChanged += FixupDoctorVisits;
                    _doctorVisits = newCollection;
                }
                return _doctorVisits;
            }
            set
            {
                if (!ReferenceEquals(_doctorVisits, value))
                {
                    var previousValue = _doctorVisits as FixupCollection<DoctorVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDoctorVisits;
                    }
                    _doctorVisits = value;
                    var newValue = value as FixupCollection<DoctorVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDoctorVisits;
                    }
    				OnPropertyChanged("DoctorVisits");
                }
            }
        }
        private ICollection<DoctorVisit> _doctorVisits;
    
        public virtual ICollection<Nutrition> Nutritions
        {
            get
            {
                if (_nutritions == null)
                {
                    var newCollection = new FixupCollection<Nutrition>();
                    newCollection.CollectionChanged += FixupNutritions;
                    _nutritions = newCollection;
                }
                return _nutritions;
            }
            set
            {
                if (!ReferenceEquals(_nutritions, value))
                {
                    var previousValue = _nutritions as FixupCollection<Nutrition>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNutritions;
                    }
                    _nutritions = value;
                    var newValue = value as FixupCollection<Nutrition>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNutritions;
                    }
    				OnPropertyChanged("Nutritions");
                }
            }
        }
        private ICollection<Nutrition> _nutritions;
    
        public virtual ICollection<CustomerMeasure> CustomerMeasures
        {
            get
            {
                if (_customerMeasures == null)
                {
                    var newCollection = new FixupCollection<CustomerMeasure>();
                    newCollection.CollectionChanged += FixupCustomerMeasures;
                    _customerMeasures = newCollection;
                }
                return _customerMeasures;
            }
            set
            {
                if (!ReferenceEquals(_customerMeasures, value))
                {
                    var previousValue = _customerMeasures as FixupCollection<CustomerMeasure>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerMeasures;
                    }
                    _customerMeasures = value;
                    var newValue = value as FixupCollection<CustomerMeasure>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerMeasures;
                    }
    				OnPropertyChanged("CustomerMeasures");
                }
            }
        }
        private ICollection<CustomerMeasure> _customerMeasures;
    
        public virtual ICollection<TextAction> TextActions
        {
            get
            {
                if (_textActions == null)
                {
                    var newCollection = new FixupCollection<TextAction>();
                    newCollection.CollectionChanged += FixupTextActions;
                    _textActions = newCollection;
                }
                return _textActions;
            }
            set
            {
                if (!ReferenceEquals(_textActions, value))
                {
                    var previousValue = _textActions as FixupCollection<TextAction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTextActions;
                    }
                    _textActions = value;
                    var newValue = value as FixupCollection<TextAction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTextActions;
                    }
    				OnPropertyChanged("TextActions");
                }
            }
        }
        private ICollection<TextAction> _textActions;
    
        public virtual ICollection<CustomerNotification> CustomerNotifications
        {
            get
            {
                if (_customerNotifications == null)
                {
                    var newCollection = new FixupCollection<CustomerNotification>();
                    newCollection.CollectionChanged += FixupCustomerNotifications;
                    _customerNotifications = newCollection;
                }
                return _customerNotifications;
            }
            set
            {
                if (!ReferenceEquals(_customerNotifications, value))
                {
                    var previousValue = _customerNotifications as FixupCollection<CustomerNotification>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerNotifications;
                    }
                    _customerNotifications = value;
                    var newValue = value as FixupCollection<CustomerNotification>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerNotifications;
                    }
    				OnPropertyChanged("CustomerNotifications");
                }
            }
        }
        private ICollection<CustomerNotification> _customerNotifications;
    
        public virtual ICollection<ChildrenRoom> ChildrenRooms
        {
            get
            {
                if (_childrenRooms == null)
                {
                    var newCollection = new FixupCollection<ChildrenRoom>();
                    newCollection.CollectionChanged += FixupChildrenRooms;
                    _childrenRooms = newCollection;
                }
                return _childrenRooms;
            }
            set
            {
                if (!ReferenceEquals(_childrenRooms, value))
                {
                    var previousValue = _childrenRooms as FixupCollection<ChildrenRoom>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildrenRooms;
                    }
                    _childrenRooms = value;
                    var newValue = value as FixupCollection<ChildrenRoom>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildrenRooms;
                    }
    				OnPropertyChanged("ChildrenRooms");
                }
            }
        }
        private ICollection<ChildrenRoom> _childrenRooms;
    
        public virtual ICollection<CustomerShelf> CustomerShelves
        {
            get
            {
                if (_customerShelves == null)
                {
                    var newCollection = new FixupCollection<CustomerShelf>();
                    newCollection.CollectionChanged += FixupCustomerShelves;
                    _customerShelves = newCollection;
                }
                return _customerShelves;
            }
            set
            {
                if (!ReferenceEquals(_customerShelves, value))
                {
                    var previousValue = _customerShelves as FixupCollection<CustomerShelf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerShelves;
                    }
                    _customerShelves = value;
                    var newValue = value as FixupCollection<CustomerShelf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerShelves;
                    }
    				OnPropertyChanged("CustomerShelves");
                }
            }
        }
        private ICollection<CustomerShelf> _customerShelves;
    
        public virtual ICollection<Solarium> Solariums
        {
            get
            {
                if (_solariums == null)
                {
                    var newCollection = new FixupCollection<Solarium>();
                    newCollection.CollectionChanged += FixupSolariums;
                    _solariums = newCollection;
                }
                return _solariums;
            }
            set
            {
                if (!ReferenceEquals(_solariums, value))
                {
                    var previousValue = _solariums as FixupCollection<Solarium>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolariums;
                    }
                    _solariums = value;
                    var newValue = value as FixupCollection<Solarium>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolariums;
                    }
    				OnPropertyChanged("Solariums");
                }
            }
        }
        private ICollection<Solarium> _solariums;
    
        public virtual ICollection<SolariumVisit> SolariumVisits
        {
            get
            {
                if (_solariumVisits == null)
                {
                    var newCollection = new FixupCollection<SolariumVisit>();
                    newCollection.CollectionChanged += FixupSolariumVisits;
                    _solariumVisits = newCollection;
                }
                return _solariumVisits;
            }
            set
            {
                if (!ReferenceEquals(_solariumVisits, value))
                {
                    var previousValue = _solariumVisits as FixupCollection<SolariumVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolariumVisits;
                    }
                    _solariumVisits = value;
                    var newValue = value as FixupCollection<SolariumVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolariumVisits;
                    }
    				OnPropertyChanged("SolariumVisits");
                }
            }
        }
        private ICollection<SolariumVisit> _solariumVisits;
    
        public virtual ICollection<CustomerCardType> CustomerCardTypes
        {
            get
            {
                if (_customerCardTypes == null)
                {
                    var newCollection = new FixupCollection<CustomerCardType>();
                    newCollection.CollectionChanged += FixupCustomerCardTypes;
                    _customerCardTypes = newCollection;
                }
                return _customerCardTypes;
            }
            set
            {
                if (!ReferenceEquals(_customerCardTypes, value))
                {
                    var previousValue = _customerCardTypes as FixupCollection<CustomerCardType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerCardTypes;
                    }
                    _customerCardTypes = value;
                    var newValue = value as FixupCollection<CustomerCardType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerCardTypes;
                    }
    				OnPropertyChanged("CustomerCardTypes");
                }
            }
        }
        private ICollection<CustomerCardType> _customerCardTypes;
    
        public virtual ICollection<TicketType> TicketTypes
        {
            get
            {
                if (_ticketTypes == null)
                {
                    var newCollection = new FixupCollection<TicketType>();
                    newCollection.CollectionChanged += FixupTicketTypes;
                    _ticketTypes = newCollection;
                }
                return _ticketTypes;
            }
            set
            {
                if (!ReferenceEquals(_ticketTypes, value))
                {
                    var previousValue = _ticketTypes as FixupCollection<TicketType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketTypes;
                    }
                    _ticketTypes = value;
                    var newValue = value as FixupCollection<TicketType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketTypes;
                    }
    				OnPropertyChanged("TicketTypes");
                }
            }
        }
        private ICollection<TicketType> _ticketTypes;
    
        public virtual ICollection<ProviderFolder> ProviderFolders
        {
            get
            {
                if (_providerFolders == null)
                {
                    var newCollection = new FixupCollection<ProviderFolder>();
                    newCollection.CollectionChanged += FixupProviderFolders;
                    _providerFolders = newCollection;
                }
                return _providerFolders;
            }
            set
            {
                if (!ReferenceEquals(_providerFolders, value))
                {
                    var previousValue = _providerFolders as FixupCollection<ProviderFolder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProviderFolders;
                    }
                    _providerFolders = value;
                    var newValue = value as FixupCollection<ProviderFolder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProviderFolders;
                    }
    				OnPropertyChanged("ProviderFolders");
                }
            }
        }
        private ICollection<ProviderFolder> _providerFolders;
    
        public virtual ICollection<Storehouse> Storehouses
        {
            get
            {
                if (_storehouses == null)
                {
                    var newCollection = new FixupCollection<Storehouse>();
                    newCollection.CollectionChanged += FixupStorehouses;
                    _storehouses = newCollection;
                }
                return _storehouses;
            }
            set
            {
                if (!ReferenceEquals(_storehouses, value))
                {
                    var previousValue = _storehouses as FixupCollection<Storehouse>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStorehouses;
                    }
                    _storehouses = value;
                    var newValue = value as FixupCollection<Storehouse>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStorehouses;
                    }
    				OnPropertyChanged("Storehouses");
                }
            }
        }
        private ICollection<Storehouse> _storehouses;
    
        public virtual ICollection<Certificate> Certificates
        {
            get
            {
                if (_certificates == null)
                {
                    var newCollection = new FixupCollection<Certificate>();
                    newCollection.CollectionChanged += FixupCertificates;
                    _certificates = newCollection;
                }
                return _certificates;
            }
            set
            {
                if (!ReferenceEquals(_certificates, value))
                {
                    var previousValue = _certificates as FixupCollection<Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificates;
                    }
                    _certificates = value;
                    var newValue = value as FixupCollection<Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificates;
                    }
    				OnPropertyChanged("Certificates");
                }
            }
        }
        private ICollection<Certificate> _certificates;
    
        public virtual ICollection<Rent> Rents
        {
            get
            {
                if (_rents == null)
                {
                    var newCollection = new FixupCollection<Rent>();
                    newCollection.CollectionChanged += FixupRents;
                    _rents = newCollection;
                }
                return _rents;
            }
            set
            {
                if (!ReferenceEquals(_rents, value))
                {
                    var previousValue = _rents as FixupCollection<Rent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRents;
                    }
                    _rents = value;
                    var newValue = value as FixupCollection<Rent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRents;
                    }
    				OnPropertyChanged("Rents");
                }
            }
        }
        private ICollection<Rent> _rents;
    
        public virtual ICollection<DepositOut> DepositOuts
        {
            get
            {
                if (_depositOuts == null)
                {
                    var newCollection = new FixupCollection<DepositOut>();
                    newCollection.CollectionChanged += FixupDepositOuts;
                    _depositOuts = newCollection;
                }
                return _depositOuts;
            }
            set
            {
                if (!ReferenceEquals(_depositOuts, value))
                {
                    var previousValue = _depositOuts as FixupCollection<DepositOut>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDepositOuts;
                    }
                    _depositOuts = value;
                    var newValue = value as FixupCollection<DepositOut>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDepositOuts;
                    }
    				OnPropertyChanged("DepositOuts");
                }
            }
        }
        private ICollection<DepositOut> _depositOuts;
    
        public virtual ICollection<SpendingType> SpendingTypes
        {
            get
            {
                if (_spendingTypes == null)
                {
                    var newCollection = new FixupCollection<SpendingType>();
                    newCollection.CollectionChanged += FixupSpendingTypes;
                    _spendingTypes = newCollection;
                }
                return _spendingTypes;
            }
            set
            {
                if (!ReferenceEquals(_spendingTypes, value))
                {
                    var previousValue = _spendingTypes as FixupCollection<SpendingType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpendingTypes;
                    }
                    _spendingTypes = value;
                    var newValue = value as FixupCollection<SpendingType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpendingTypes;
                    }
    				OnPropertyChanged("SpendingTypes");
                }
            }
        }
        private ICollection<SpendingType> _spendingTypes;
    
        public virtual ICollection<Spending> Spendings
        {
            get
            {
                if (_spendings == null)
                {
                    var newCollection = new FixupCollection<Spending>();
                    newCollection.CollectionChanged += FixupSpendings;
                    _spendings = newCollection;
                }
                return _spendings;
            }
            set
            {
                if (!ReferenceEquals(_spendings, value))
                {
                    var previousValue = _spendings as FixupCollection<Spending>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpendings;
                    }
                    _spendings = value;
                    var newValue = value as FixupCollection<Spending>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpendings;
                    }
    				OnPropertyChanged("Spendings");
                }
            }
        }
        private ICollection<Spending> _spendings;
    
        public virtual ICollection<EmployeeCategory> EmployeeCategories
        {
            get
            {
                if (_employeeCategories == null)
                {
                    var newCollection = new FixupCollection<EmployeeCategory>();
                    newCollection.CollectionChanged += FixupEmployeeCategories;
                    _employeeCategories = newCollection;
                }
                return _employeeCategories;
            }
            set
            {
                if (!ReferenceEquals(_employeeCategories, value))
                {
                    var previousValue = _employeeCategories as FixupCollection<EmployeeCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeCategories;
                    }
                    _employeeCategories = value;
                    var newValue = value as FixupCollection<EmployeeCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeCategories;
                    }
    				OnPropertyChanged("EmployeeCategories");
                }
            }
        }
        private ICollection<EmployeeCategory> _employeeCategories;
    
        public virtual ICollection<Job> Jobs
        {
            get
            {
                if (_jobs == null)
                {
                    var newCollection = new FixupCollection<Job>();
                    newCollection.CollectionChanged += FixupJobs;
                    _jobs = newCollection;
                }
                return _jobs;
            }
            set
            {
                if (!ReferenceEquals(_jobs, value))
                {
                    var previousValue = _jobs as FixupCollection<Job>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobs;
                    }
                    _jobs = value;
                    var newValue = value as FixupCollection<Job>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobs;
                    }
    				OnPropertyChanged("Jobs");
                }
            }
        }
        private ICollection<Job> _jobs;
    
        public virtual ICollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    var newCollection = new FixupCollection<Employee>();
                    newCollection.CollectionChanged += FixupEmployees;
                    _employees = newCollection;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees as FixupCollection<Employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployees;
                    }
                    _employees = value;
                    var newValue = value as FixupCollection<Employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployees;
                    }
    				OnPropertyChanged("Employees");
                }
            }
        }
        private ICollection<Employee> _employees;
    
        public virtual ICollection<JobPlacement> JobPlacements
        {
            get
            {
                if (_jobPlacements == null)
                {
                    var newCollection = new FixupCollection<JobPlacement>();
                    newCollection.CollectionChanged += FixupJobPlacements;
                    _jobPlacements = newCollection;
                }
                return _jobPlacements;
            }
            set
            {
                if (!ReferenceEquals(_jobPlacements, value))
                {
                    var previousValue = _jobPlacements as FixupCollection<JobPlacement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobPlacements;
                    }
                    _jobPlacements = value;
                    var newValue = value as FixupCollection<JobPlacement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobPlacements;
                    }
    				OnPropertyChanged("JobPlacements");
                }
            }
        }
        private ICollection<JobPlacement> _jobPlacements;
    
        public virtual ICollection<EmployeeVacation> EmployeeVacations
        {
            get
            {
                if (_employeeVacations == null)
                {
                    var newCollection = new FixupCollection<EmployeeVacation>();
                    newCollection.CollectionChanged += FixupEmployeeVacations;
                    _employeeVacations = newCollection;
                }
                return _employeeVacations;
            }
            set
            {
                if (!ReferenceEquals(_employeeVacations, value))
                {
                    var previousValue = _employeeVacations as FixupCollection<EmployeeVacation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeVacations;
                    }
                    _employeeVacations = value;
                    var newValue = value as FixupCollection<EmployeeVacation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeVacations;
                    }
    				OnPropertyChanged("EmployeeVacations");
                }
            }
        }
        private ICollection<EmployeeVacation> _employeeVacations;
    
        public virtual ICollection<EmployeeTrip> EmployeeTrips
        {
            get
            {
                if (_employeeTrips == null)
                {
                    var newCollection = new FixupCollection<EmployeeTrip>();
                    newCollection.CollectionChanged += FixupEmployeeTrips;
                    _employeeTrips = newCollection;
                }
                return _employeeTrips;
            }
            set
            {
                if (!ReferenceEquals(_employeeTrips, value))
                {
                    var previousValue = _employeeTrips as FixupCollection<EmployeeTrip>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeTrips;
                    }
                    _employeeTrips = value;
                    var newValue = value as FixupCollection<EmployeeTrip>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeTrips;
                    }
    				OnPropertyChanged("EmployeeTrips");
                }
            }
        }
        private ICollection<EmployeeTrip> _employeeTrips;
    
        public virtual ICollection<EmployeeDocument> EmployeeDocuments
        {
            get
            {
                if (_employeeDocuments == null)
                {
                    var newCollection = new FixupCollection<EmployeeDocument>();
                    newCollection.CollectionChanged += FixupEmployeeDocuments;
                    _employeeDocuments = newCollection;
                }
                return _employeeDocuments;
            }
            set
            {
                if (!ReferenceEquals(_employeeDocuments, value))
                {
                    var previousValue = _employeeDocuments as FixupCollection<EmployeeDocument>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeDocuments;
                    }
                    _employeeDocuments = value;
                    var newValue = value as FixupCollection<EmployeeDocument>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeDocuments;
                    }
    				OnPropertyChanged("EmployeeDocuments");
                }
            }
        }
        private ICollection<EmployeeDocument> _employeeDocuments;
    
        public virtual ICollection<EmployeeVisit> EmployeeVisits
        {
            get
            {
                if (_employeeVisits == null)
                {
                    var newCollection = new FixupCollection<EmployeeVisit>();
                    newCollection.CollectionChanged += FixupEmployeeVisits;
                    _employeeVisits = newCollection;
                }
                return _employeeVisits;
            }
            set
            {
                if (!ReferenceEquals(_employeeVisits, value))
                {
                    var previousValue = _employeeVisits as FixupCollection<EmployeeVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeVisits;
                    }
                    _employeeVisits = value;
                    var newValue = value as FixupCollection<EmployeeVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeVisits;
                    }
    				OnPropertyChanged("EmployeeVisits");
                }
            }
        }
        private ICollection<EmployeeVisit> _employeeVisits;
    
        public virtual ICollection<Corporate> Corporates
        {
            get
            {
                if (_corporates == null)
                {
                    var newCollection = new FixupCollection<Corporate>();
                    newCollection.CollectionChanged += FixupCorporates;
                    _corporates = newCollection;
                }
                return _corporates;
            }
            set
            {
                if (!ReferenceEquals(_corporates, value))
                {
                    var previousValue = _corporates as FixupCollection<Corporate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCorporates;
                    }
                    _corporates = value;
                    var newValue = value as FixupCollection<Corporate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCorporates;
                    }
    				OnPropertyChanged("Corporates");
                }
            }
        }
        private ICollection<Corporate> _corporates;
    
        public virtual ICollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    var newCollection = new FixupCollection<Task>();
                    newCollection.CollectionChanged += FixupTasks;
                    _tasks = newCollection;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    var previousValue = _tasks as FixupCollection<Task>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    var newValue = value as FixupCollection<Task>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTasks;
                    }
    				OnPropertyChanged("Tasks");
                }
            }
        }
        private ICollection<Task> _tasks;
    
        public virtual ICollection<Role> Roles
        {
            get
            {
                if (_roles == null)
                {
                    var newCollection = new FixupCollection<Role>();
                    newCollection.CollectionChanged += FixupRoles;
                    _roles = newCollection;
                }
                return _roles;
            }
            set
            {
                if (!ReferenceEquals(_roles, value))
                {
                    var previousValue = _roles as FixupCollection<Role>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRoles;
                    }
                    _roles = value;
                    var newValue = value as FixupCollection<Role>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRoles;
                    }
    				OnPropertyChanged("Roles");
                }
            }
        }
        private ICollection<Role> _roles;
    
        public virtual ICollection<CompanyFinance> CompanyFinances
        {
            get
            {
                if (_companyFinances == null)
                {
                    var newCollection = new FixupCollection<CompanyFinance>();
                    newCollection.CollectionChanged += FixupCompanyFinances;
                    _companyFinances = newCollection;
                }
                return _companyFinances;
            }
            set
            {
                if (!ReferenceEquals(_companyFinances, value))
                {
                    var previousValue = _companyFinances as FixupCollection<CompanyFinance>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCompanyFinances;
                    }
                    _companyFinances = value;
                    var newValue = value as FixupCollection<CompanyFinance>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCompanyFinances;
                    }
    				OnPropertyChanged("CompanyFinances");
                }
            }
        }
        private ICollection<CompanyFinance> _companyFinances;
    
        public virtual ICollection<DivisionFinance> DivisionFinances
        {
            get
            {
                if (_divisionFinances == null)
                {
                    var newCollection = new FixupCollection<DivisionFinance>();
                    newCollection.CollectionChanged += FixupDivisionFinances;
                    _divisionFinances = newCollection;
                }
                return _divisionFinances;
            }
            set
            {
                if (!ReferenceEquals(_divisionFinances, value))
                {
                    var previousValue = _divisionFinances as FixupCollection<DivisionFinance>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDivisionFinances;
                    }
                    _divisionFinances = value;
                    var newValue = value as FixupCollection<DivisionFinance>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDivisionFinances;
                    }
    				OnPropertyChanged("DivisionFinances");
                }
            }
        }
        private ICollection<DivisionFinance> _divisionFinances;
    
        public virtual ICollection<Income> Incomes
        {
            get
            {
                if (_incomes == null)
                {
                    var newCollection = new FixupCollection<Income>();
                    newCollection.CollectionChanged += FixupIncomes;
                    _incomes = newCollection;
                }
                return _incomes;
            }
            set
            {
                if (!ReferenceEquals(_incomes, value))
                {
                    var previousValue = _incomes as FixupCollection<Income>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncomes;
                    }
                    _incomes = value;
                    var newValue = value as FixupCollection<Income>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncomes;
                    }
    				OnPropertyChanged("Incomes");
                }
            }
        }
        private ICollection<Income> _incomes;
    
        public virtual ICollection<IncomeType> IncomeTypes
        {
            get
            {
                if (_incomeTypes == null)
                {
                    var newCollection = new FixupCollection<IncomeType>();
                    newCollection.CollectionChanged += FixupIncomeTypes;
                    _incomeTypes = newCollection;
                }
                return _incomeTypes;
            }
            set
            {
                if (!ReferenceEquals(_incomeTypes, value))
                {
                    var previousValue = _incomeTypes as FixupCollection<IncomeType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncomeTypes;
                    }
                    _incomeTypes = value;
                    var newValue = value as FixupCollection<IncomeType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncomeTypes;
                    }
    				OnPropertyChanged("IncomeTypes");
                }
            }
        }
        private ICollection<IncomeType> _incomeTypes;
    
        public virtual ICollection<SettingsFolder> AvailSettingsFolders
        {
            get
            {
                if (_availSettingsFolders == null)
                {
                    var newCollection = new FixupCollection<SettingsFolder>();
                    newCollection.CollectionChanged += FixupAvailSettingsFolders;
                    _availSettingsFolders = newCollection;
                }
                return _availSettingsFolders;
            }
            set
            {
                if (!ReferenceEquals(_availSettingsFolders, value))
                {
                    var previousValue = _availSettingsFolders as FixupCollection<SettingsFolder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAvailSettingsFolders;
                    }
                    _availSettingsFolders = value;
                    var newValue = value as FixupCollection<SettingsFolder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAvailSettingsFolders;
                    }
    				OnPropertyChanged("AvailSettingsFolders");
                }
            }
        }
        private ICollection<SettingsFolder> _availSettingsFolders;
    
        public virtual ICollection<Instalment> Instalments
        {
            get
            {
                if (_instalments == null)
                {
                    var newCollection = new FixupCollection<Instalment>();
                    newCollection.CollectionChanged += FixupInstalments;
                    _instalments = newCollection;
                }
                return _instalments;
            }
            set
            {
                if (!ReferenceEquals(_instalments, value))
                {
                    var previousValue = _instalments as FixupCollection<Instalment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInstalments;
                    }
                    _instalments = value;
                    var newValue = value as FixupCollection<Instalment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInstalments;
                    }
    				OnPropertyChanged("Instalments");
                }
            }
        }
        private ICollection<Instalment> _instalments;
    
        public virtual ICollection<CashInOrder> CashInOrders
        {
            get
            {
                if (_cashInOrders == null)
                {
                    var newCollection = new FixupCollection<CashInOrder>();
                    newCollection.CollectionChanged += FixupCashInOrders;
                    _cashInOrders = newCollection;
                }
                return _cashInOrders;
            }
            set
            {
                if (!ReferenceEquals(_cashInOrders, value))
                {
                    var previousValue = _cashInOrders as FixupCollection<CashInOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCashInOrders;
                    }
                    _cashInOrders = value;
                    var newValue = value as FixupCollection<CashInOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCashInOrders;
                    }
    				OnPropertyChanged("CashInOrders");
                }
            }
        }
        private ICollection<CashInOrder> _cashInOrders;
    
        public virtual ICollection<CashOutOrder> CashOutOrders
        {
            get
            {
                if (_cashOutOrders == null)
                {
                    var newCollection = new FixupCollection<CashOutOrder>();
                    newCollection.CollectionChanged += FixupCashOutOrders;
                    _cashOutOrders = newCollection;
                }
                return _cashOutOrders;
            }
            set
            {
                if (!ReferenceEquals(_cashOutOrders, value))
                {
                    var previousValue = _cashOutOrders as FixupCollection<CashOutOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCashOutOrders;
                    }
                    _cashOutOrders = value;
                    var newValue = value as FixupCollection<CashOutOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCashOutOrders;
                    }
    				OnPropertyChanged("CashOutOrders");
                }
            }
        }
        private ICollection<CashOutOrder> _cashOutOrders;

        #endregion

        #region Association Fixup
    
        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupGoods(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Good item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Good item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupManufacturers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Manufacturer item in e.NewItems)
                {
                    item.CompanyId = CompanyId;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Manufacturer item in e.OldItems)
                {
                }
            }
        }
    
        private void FixupProviders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Provider item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Provider item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupProviderPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProviderPayment item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProviderPayment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupDivisions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Division item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Division item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupGoodPrices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodPrice item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodPrice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupGoodActions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodAction item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodAction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupManufacturers_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Manufacturer item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Manufacturer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentProgramLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentProgramLine item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentProgramLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentPrograms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentProgram item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentProgram item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCustomerTargets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerTarget item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerTarget item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupAnthropometrics(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Anthropometric item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Anthropometric item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupDoctorVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DoctorVisit item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DoctorVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupNutritions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Nutrition item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Nutrition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCustomerMeasures(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerMeasure item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerMeasure item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupTextActions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TextAction item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TextAction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCustomerNotifications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerNotification item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerNotification item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupChildrenRooms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ChildrenRoom item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChildrenRoom item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCustomerShelves(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerShelf item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerShelf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupSolariums(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Solarium item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Solarium item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupSolariumVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SolariumVisit item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SolariumVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCustomerCardTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerCardType item in e.NewItems)
                {
                    if (!item.Companies.Contains(this))
                    {
                        item.Companies.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerCardType item in e.OldItems)
                {
                    if (item.Companies.Contains(this))
                    {
                        item.Companies.Remove(this);
                    }
                }
            }
        }
    
        private void FixupTicketTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketType item in e.NewItems)
                {
                    if (!item.Companies.Contains(this))
                    {
                        item.Companies.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketType item in e.OldItems)
                {
                    if (item.Companies.Contains(this))
                    {
                        item.Companies.Remove(this);
                    }
                }
            }
        }
    
        private void FixupProviderFolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProviderFolder item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProviderFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupStorehouses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Storehouse item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Storehouse item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCertificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupRents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rent item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupDepositOuts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DepositOut item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DepositOut item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupSpendingTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SpendingType item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpendingType item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupSpendings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Spending item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Spending item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeCategory item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupJobs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Job item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Job item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupJobPlacements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (JobPlacement item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JobPlacement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeVacations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeVacation item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeVacation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeTrips(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeTrip item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeTrip item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeDocuments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeDocument item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeDocument item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeVisit item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCorporates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Corporate item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Corporate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCompanyFinances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CompanyFinance item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CompanyFinance item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupDivisionFinances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DivisionFinance item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DivisionFinance item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupIncomes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Income item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Income item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupIncomeTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IncomeType item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncomeType item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupAvailSettingsFolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SettingsFolder item in e.NewItems)
                {
                    if (!item.AccessingCompanies.Contains(this))
                    {
                        item.AccessingCompanies.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SettingsFolder item in e.OldItems)
                {
                    if (item.AccessingCompanies.Contains(this))
                    {
                        item.AccessingCompanies.Remove(this);
                    }
                }
            }
        }
    
        private void FixupInstalments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Instalment item in e.NewItems)
                {
                    if (!item.Companies.Contains(this))
                    {
                        item.Companies.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Instalment item in e.OldItems)
                {
                    if (item.Companies.Contains(this))
                    {
                        item.Companies.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCashInOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CashInOrder item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CashInOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }
    
        private void FixupCashOutOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CashOutOrder item in e.NewItems)
                {
                    item.Company = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CashOutOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Company, this))
                    {
                        item.Company = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
