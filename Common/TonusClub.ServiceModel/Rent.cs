//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Rent : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid CustomerId
        {
            get { return _customerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerId != value)
                    {
                        if (Customer != null && Customer.Id != value)
                        {
                            Customer = null;
                        }
                        _customerId = value;
        
        				OnPropertyChanged("CustomerId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _customerId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual System.Guid GoodId
        {
            get { return _goodId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_goodId != value)
                    {
                        if (Good != null && Good.Id != value)
                        {
                            Good = null;
                        }
                        _goodId = value;
        
        				OnPropertyChanged("GoodId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _goodId;
    
    
    	[DataMember]
        public virtual System.Guid StorehouseId
        {
            get { return _storehouseId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_storehouseId != value)
                    {
                        if (Storehouse != null && Storehouse.Id != value)
                        {
                            Storehouse = null;
                        }
                        _storehouseId = value;
        
        				OnPropertyChanged("StorehouseId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _storehouseId;
    
    
    	[DataMember]
        public virtual decimal Price
        {
            get {return _price;}
            set 
    		{ 
    			if(_price != value)
    			{
    				_price = value; 
    				
    				
    
    				OnPropertyChanged("Price");
    			}
    		}
        }
        private decimal _price;
    
    
    	[DataMember]
        public virtual System.DateTime ReturnDate
        {
            get {return _returnDate;}
            set 
    		{ 
    			if(_returnDate != value)
    			{
    				_returnDate = value; 
    				
    				_returnDate = DateTime.SpecifyKind(_returnDate, DateTimeKind.Local);
    
    				OnPropertyChanged("ReturnDate");
    			}
    		}
        }
        private System.DateTime _returnDate;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ReturnById
        {
            get { return _returnById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_returnById != value)
                    {
                        if (ReturnBy != null && ReturnBy.UserId != value)
                        {
                            ReturnBy = null;
                        }
                        _returnById = value;
        
        				OnPropertyChanged("ReturnById");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _returnById;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> FactReturnDate
        {
            get {return _factReturnDate;}
            set 
    		{ 
    			if(_factReturnDate != value)
    			{
    				_factReturnDate = value; 
    				
    				if (_factReturnDate.HasValue) _factReturnDate = DateTime.SpecifyKind(_factReturnDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("FactReturnDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _factReturnDate;
    
    
    	[DataMember]
        public virtual Nullable<decimal> LostFine
        {
            get {return _lostFine;}
            set 
    		{ 
    			if(_lostFine != value)
    			{
    				_lostFine = value; 
    				
    				
    
    				OnPropertyChanged("LostFine");
    			}
    		}
        }
        private Nullable<decimal> _lostFine;
    
    
    	[DataMember]
        public virtual Nullable<decimal> OverdueFine
        {
            get {return _overdueFine;}
            set 
    		{ 
    			if(_overdueFine != value)
    			{
    				_overdueFine = value; 
    				
    				
    
    				OnPropertyChanged("OverdueFine");
    			}
    		}
        }
        private Nullable<decimal> _overdueFine;
    
    
    	[DataMember]
        public virtual bool IsPayed
        {
            get {return _isPayed;}
            set 
    		{ 
    			if(_isPayed != value)
    			{
    				_isPayed = value; 
    				
    				
    
    				OnPropertyChanged("IsPayed");
    			}
    		}
        }
        private bool _isPayed;
    
    
    	[DataMember]
        public virtual bool IsManualAmount
        {
            get {return _isManualAmount;}
            set 
    		{ 
    			if(_isManualAmount != value)
    			{
    				_isManualAmount = value; 
    				
    				
    
    				OnPropertyChanged("IsManualAmount");
    			}
    		}
        }
        private bool _isManualAmount;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual Good Good
        {
            get { return _good; }
            set
            {
                if (!ReferenceEquals(_good, value))
                {
                    var previousValue = _good;
                    _good = value;
                    FixupGood(previousValue);
                }
            }
        }
        private Good _good;
    
        public virtual Storehouse Storehouse
        {
            get { return _storehouse; }
            set
            {
                if (!ReferenceEquals(_storehouse, value))
                {
                    var previousValue = _storehouse;
                    _storehouse = value;
                    FixupStorehouse(previousValue);
                }
            }
        }
        private Storehouse _storehouse;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual User ReturnBy
        {
            get { return _returnBy; }
            set
            {
                if (!ReferenceEquals(_returnBy, value))
                {
                    var previousValue = _returnBy;
                    _returnBy = value;
                    FixupReturnBy(previousValue);
                }
            }
        }
        private User _returnBy;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Rents.Contains(this))
            {
                previousValue.Rents.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Rents.Contains(this))
                {
                    Company.Rents.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Rents.Contains(this))
            {
                previousValue.Rents.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Rents.Contains(this))
                {
                    Customer.Rents.Add(this);
                }
                if (CustomerId != Customer.Id)
                {
                    CustomerId = Customer.Id;
                }
            }
        }
    
        private void FixupGood(Good previousValue)
        {
            if (previousValue != null && previousValue.Rents.Contains(this))
            {
                previousValue.Rents.Remove(this);
            }
    
            if (Good != null)
            {
                if (!Good.Rents.Contains(this))
                {
                    Good.Rents.Add(this);
                }
                if (GoodId != Good.Id)
                {
                    GoodId = Good.Id;
                }
            }
        }
    
        private void FixupStorehouse(Storehouse previousValue)
        {
            if (previousValue != null && previousValue.Rents.Contains(this))
            {
                previousValue.Rents.Remove(this);
            }
    
            if (Storehouse != null)
            {
                if (!Storehouse.Rents.Contains(this))
                {
                    Storehouse.Rents.Add(this);
                }
                if (StorehouseId != Storehouse.Id)
                {
                    StorehouseId = Storehouse.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.Rents.Contains(this))
            {
                previousValue.Rents.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.Rents.Contains(this))
                {
                    CreatedBy.Rents.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupReturnBy(User previousValue)
        {
            if (previousValue != null && previousValue.Rents1.Contains(this))
            {
                previousValue.Rents1.Remove(this);
            }
    
            if (ReturnBy != null)
            {
                if (!ReturnBy.Rents1.Contains(this))
                {
                    ReturnBy.Rents1.Add(this);
                }
                if (ReturnById != ReturnBy.UserId)
                {
                    ReturnById = ReturnBy.UserId;
                }
            }
            else if (!_settingFK)
            {
                ReturnById = null;
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
