//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class AdvertType : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual bool CommentNeeded
        {
            get {return _commentNeeded;}
            set 
    		{ 
    			if(_commentNeeded != value)
    			{
    				_commentNeeded = value; 
    				
    				
    
    				OnPropertyChanged("CommentNeeded");
    			}
    		}
        }
        private bool _commentNeeded;
    
    
    	[DataMember]
        public virtual bool InvitorNeeded
        {
            get {return _invitorNeeded;}
            set 
    		{ 
    			if(_invitorNeeded != value)
    			{
    				_invitorNeeded = value; 
    				
    				
    
    				OnPropertyChanged("InvitorNeeded");
    			}
    		}
        }
        private bool _invitorNeeded;
    
    
    	[DataMember]
        public virtual bool IsAvail
        {
            get {return _isAvail;}
            set 
    		{ 
    			if(_isAvail != value)
    			{
    				_isAvail = value; 
    				
    				
    
    				OnPropertyChanged("IsAvail");
    			}
    		}
        }
        private bool _isAvail;
    
    
    	[DataMember]
        public virtual System.Guid AdvertGroupId
        {
            get { return _advertGroupId; }
            set
            {
                if (_advertGroupId != value)
                {
                    if (AdvertGroup != null && AdvertGroup.Id != value)
                    {
                        AdvertGroup = null;
                    }
                    _advertGroupId = value;
    
    				OnPropertyChanged("AdvertGroupId");
                }
            }
        }
        private System.Guid _advertGroupId;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> CompanyId
        {
            get {return _companyId;}
            set 
    		{ 
    			if(_companyId != value)
    			{
    				_companyId = value; 
    				
    				
    
    				OnPropertyChanged("CompanyId");
    			}
    		}
        }
        private Nullable<System.Guid> _companyId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupCustomers;
                    _customers = newCollection;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomers;
                    }
                    _customers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomers;
                    }
    				OnPropertyChanged("Customers");
                }
            }
        }
        private ICollection<Customer> _customers;
    
        public virtual AdvertGroup AdvertGroup
        {
            get { return _advertGroup; }
            set
            {
                if (!ReferenceEquals(_advertGroup, value))
                {
                    var previousValue = _advertGroup;
                    _advertGroup = value;
                    FixupAdvertGroup(previousValue);
                }
            }
        }
        private AdvertGroup _advertGroup;

        #endregion

        #region Association Fixup
    
        private void FixupAdvertGroup(AdvertGroup previousValue)
        {
            if (previousValue != null && previousValue.AdvertTypes.Contains(this))
            {
                previousValue.AdvertTypes.Remove(this);
            }
    
            if (AdvertGroup != null)
            {
                if (!AdvertGroup.AdvertTypes.Contains(this))
                {
                    AdvertGroup.AdvertTypes.Add(this);
                }
                if (AdvertGroupId != AdvertGroup.Id)
                {
                    AdvertGroupId = AdvertGroup.Id;
                }
            }
        }
    
        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.AdvertType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.AdvertType, this))
                    {
                        item.AdvertType = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
