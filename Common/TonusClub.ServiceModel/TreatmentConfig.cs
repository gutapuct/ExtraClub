//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class TreatmentConfig : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual System.Guid TreatmentTypeId
        {
            get { return _treatmentTypeId; }
            set
            {
                if (_treatmentTypeId != value)
                {
                    if (TreatmentType != null && TreatmentType.Id != value)
                    {
                        TreatmentType = null;
                    }
                    _treatmentTypeId = value;
    
    				OnPropertyChanged("TreatmentTypeId");
                }
            }
        }
        private System.Guid _treatmentTypeId;
    
    
    	[DataMember]
        public virtual int LengthCoeff
        {
            get {return _lengthCoeff;}
            set 
    		{ 
    			if(_lengthCoeff != value)
    			{
    				_lengthCoeff = value; 
    				
    				
    
    				OnPropertyChanged("LengthCoeff");
    			}
    		}
        }
        private int _lengthCoeff;
    
    
    	[DataMember]
        public virtual decimal Price
        {
            get {return _price;}
            set 
    		{ 
    			if(_price != value)
    			{
    				_price = value; 
    				
    				
    
    				OnPropertyChanged("Price");
    			}
    		}
        }
        private decimal _price;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual string NameEn
        {
            get {return _nameEn;}
            set 
    		{ 
    			if(_nameEn != value)
    			{
    				_nameEn = value; 
    				
    				
    
    				OnPropertyChanged("NameEn");
    			}
    		}
        }
        private string _nameEn;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SettingsFolderId
        {
            get {return _settingsFolderId;}
            set 
    		{ 
    			if(_settingsFolderId != value)
    			{
    				_settingsFolderId = value; 
    				
    				
    
    				OnPropertyChanged("SettingsFolderId");
    			}
    		}
        }
        private Nullable<System.Guid> _settingsFolderId;
    
    
    	[DataMember]
        public virtual string DisableAges
        {
            get {return _disableAges;}
            set 
    		{ 
    			if(_disableAges != value)
    			{
    				_disableAges = value; 
    				
    				
    
    				OnPropertyChanged("DisableAges");
    			}
    		}
        }
        private string _disableAges;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual TreatmentType TreatmentType
        {
            get { return _treatmentType; }
            set
            {
                if (!ReferenceEquals(_treatmentType, value))
                {
                    var previousValue = _treatmentType;
                    _treatmentType = value;
                    FixupTreatmentType(previousValue);
                }
            }
        }
        private TreatmentType _treatmentType;
    
        public virtual ICollection<TreatmentEvent> TreatmentEvents
        {
            get
            {
                if (_treatmentEvents == null)
                {
                    var newCollection = new FixupCollection<TreatmentEvent>();
                    newCollection.CollectionChanged += FixupTreatmentEvents;
                    _treatmentEvents = newCollection;
                }
                return _treatmentEvents;
            }
            set
            {
                if (!ReferenceEquals(_treatmentEvents, value))
                {
                    var previousValue = _treatmentEvents as FixupCollection<TreatmentEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentEvents;
                    }
                    _treatmentEvents = value;
                    var newValue = value as FixupCollection<TreatmentEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentEvents;
                    }
    				OnPropertyChanged("TreatmentEvents");
                }
            }
        }
        private ICollection<TreatmentEvent> _treatmentEvents;
    
        public virtual ICollection<TreatmentProgramLine> TreatmentProgramLines
        {
            get
            {
                if (_treatmentProgramLines == null)
                {
                    var newCollection = new FixupCollection<TreatmentProgramLine>();
                    newCollection.CollectionChanged += FixupTreatmentProgramLines;
                    _treatmentProgramLines = newCollection;
                }
                return _treatmentProgramLines;
            }
            set
            {
                if (!ReferenceEquals(_treatmentProgramLines, value))
                {
                    var previousValue = _treatmentProgramLines as FixupCollection<TreatmentProgramLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentProgramLines;
                    }
                    _treatmentProgramLines = value;
                    var newValue = value as FixupCollection<TreatmentProgramLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentProgramLines;
                    }
    				OnPropertyChanged("TreatmentProgramLines");
                }
            }
        }
        private ICollection<TreatmentProgramLine> _treatmentProgramLines;
    
        public virtual ICollection<TicketTypeLimit> TicketTypeLimits
        {
            get
            {
                if (_ticketTypeLimits == null)
                {
                    var newCollection = new FixupCollection<TicketTypeLimit>();
                    newCollection.CollectionChanged += FixupTicketTypeLimits;
                    _ticketTypeLimits = newCollection;
                }
                return _ticketTypeLimits;
            }
            set
            {
                if (!ReferenceEquals(_ticketTypeLimits, value))
                {
                    var previousValue = _ticketTypeLimits as FixupCollection<TicketTypeLimit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketTypeLimits;
                    }
                    _ticketTypeLimits = value;
                    var newValue = value as FixupCollection<TicketTypeLimit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketTypeLimits;
                    }
    				OnPropertyChanged("TicketTypeLimits");
                }
            }
        }
        private ICollection<TicketTypeLimit> _ticketTypeLimits;
    
        public virtual ICollection<CustomerTargetType> CustomerTargetTypes
        {
            get
            {
                if (_customerTargetTypes == null)
                {
                    var newCollection = new FixupCollection<CustomerTargetType>();
                    newCollection.CollectionChanged += FixupCustomerTargetTypes;
                    _customerTargetTypes = newCollection;
                }
                return _customerTargetTypes;
            }
            set
            {
                if (!ReferenceEquals(_customerTargetTypes, value))
                {
                    var previousValue = _customerTargetTypes as FixupCollection<CustomerTargetType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerTargetTypes;
                    }
                    _customerTargetTypes = value;
                    var newValue = value as FixupCollection<CustomerTargetType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerTargetTypes;
                    }
    				OnPropertyChanged("CustomerTargetTypes");
                }
            }
        }
        private ICollection<CustomerTargetType> _customerTargetTypes;

        #endregion

        #region Association Fixup
    
        private void FixupTreatmentType(TreatmentType previousValue)
        {
            if (previousValue != null && previousValue.TreatmentConfigs.Contains(this))
            {
                previousValue.TreatmentConfigs.Remove(this);
            }
    
            if (TreatmentType != null)
            {
                if (!TreatmentType.TreatmentConfigs.Contains(this))
                {
                    TreatmentType.TreatmentConfigs.Add(this);
                }
                if (TreatmentTypeId != TreatmentType.Id)
                {
                    TreatmentTypeId = TreatmentType.Id;
                }
            }
        }
    
        private void FixupTreatmentEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentEvent item in e.NewItems)
                {
                    item.TreatmentConfig = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.TreatmentConfig, this))
                    {
                        item.TreatmentConfig = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentProgramLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentProgramLine item in e.NewItems)
                {
                    item.TreatmentConfig = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentProgramLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.TreatmentConfig, this))
                    {
                        item.TreatmentConfig = null;
                    }
                }
            }
        }
    
        private void FixupTicketTypeLimits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketTypeLimit item in e.NewItems)
                {
                    item.TreatmentConfig = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketTypeLimit item in e.OldItems)
                {
                    if (ReferenceEquals(item.TreatmentConfig, this))
                    {
                        item.TreatmentConfig = null;
                    }
                }
            }
        }
    
        private void FixupCustomerTargetTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerTargetType item in e.NewItems)
                {
                    if (!item.TreatmentConfigs.Contains(this))
                    {
                        item.TreatmentConfigs.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerTargetType item in e.OldItems)
                {
                    if (item.TreatmentConfigs.Contains(this))
                    {
                        item.TreatmentConfigs.Remove(this);
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
