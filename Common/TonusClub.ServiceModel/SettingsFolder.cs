//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class SettingsFolder : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> ParentFolderId
        {
            get { return _parentFolderId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentFolderId != value)
                    {
                        if (SettingsFolder1 != null && SettingsFolder1.Id != value)
                        {
                            SettingsFolder1 = null;
                        }
                        _parentFolderId = value;
        
        				OnPropertyChanged("ParentFolderId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _parentFolderId;
    
    
    	[DataMember]
        public virtual int CategoryId
        {
            get {return _categoryId;}
            set 
    		{ 
    			if(_categoryId != value)
    			{
    				_categoryId = value; 
    				
    				
    
    				OnPropertyChanged("CategoryId");
    			}
    		}
        }
        private int _categoryId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<SettingsFolder> SettingsFolders1
        {
            get
            {
                if (_settingsFolders1 == null)
                {
                    var newCollection = new FixupCollection<SettingsFolder>();
                    newCollection.CollectionChanged += FixupSettingsFolders1;
                    _settingsFolders1 = newCollection;
                }
                return _settingsFolders1;
            }
            set
            {
                if (!ReferenceEquals(_settingsFolders1, value))
                {
                    var previousValue = _settingsFolders1 as FixupCollection<SettingsFolder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSettingsFolders1;
                    }
                    _settingsFolders1 = value;
                    var newValue = value as FixupCollection<SettingsFolder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSettingsFolders1;
                    }
    				OnPropertyChanged("SettingsFolders1");
                }
            }
        }
        private ICollection<SettingsFolder> _settingsFolders1;
    
        public virtual SettingsFolder SettingsFolder1
        {
            get { return _settingsFolder1; }
            set
            {
                if (!ReferenceEquals(_settingsFolder1, value))
                {
                    var previousValue = _settingsFolder1;
                    _settingsFolder1 = value;
                    FixupSettingsFolder1(previousValue);
                }
            }
        }
        private SettingsFolder _settingsFolder1;
    
        public virtual ICollection<Company> AccessingCompanies
        {
            get
            {
                if (_accessingCompanies == null)
                {
                    var newCollection = new FixupCollection<Company>();
                    newCollection.CollectionChanged += FixupAccessingCompanies;
                    _accessingCompanies = newCollection;
                }
                return _accessingCompanies;
            }
            set
            {
                if (!ReferenceEquals(_accessingCompanies, value))
                {
                    var previousValue = _accessingCompanies as FixupCollection<Company>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccessingCompanies;
                    }
                    _accessingCompanies = value;
                    var newValue = value as FixupCollection<Company>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccessingCompanies;
                    }
    				OnPropertyChanged("AccessingCompanies");
                }
            }
        }
        private ICollection<Company> _accessingCompanies;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupSettingsFolder1(SettingsFolder previousValue)
        {
            if (previousValue != null && previousValue.SettingsFolders1.Contains(this))
            {
                previousValue.SettingsFolders1.Remove(this);
            }
    
            if (SettingsFolder1 != null)
            {
                if (!SettingsFolder1.SettingsFolders1.Contains(this))
                {
                    SettingsFolder1.SettingsFolders1.Add(this);
                }
                if (ParentFolderId != SettingsFolder1.Id)
                {
                    ParentFolderId = SettingsFolder1.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentFolderId = null;
            }
        }
    
        private void FixupSettingsFolders1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SettingsFolder item in e.NewItems)
                {
                    item.SettingsFolder1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SettingsFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.SettingsFolder1, this))
                    {
                        item.SettingsFolder1 = null;
                    }
                }
            }
        }
    
        private void FixupAccessingCompanies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Company item in e.NewItems)
                {
                    if (!item.AvailSettingsFolders.Contains(this))
                    {
                        item.AvailSettingsFolders.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Company item in e.OldItems)
                {
                    if (item.AvailSettingsFolders.Contains(this))
                    {
                        item.AvailSettingsFolders.Remove(this);
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
