//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Certificate : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_companyId != value)
                    {
                        if (Company != null && Company.CompanyId != value)
                        {
                            Company = null;
                        }
                        _companyId = value;
        
        				OnPropertyChanged("CompanyId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual System.Guid DivisionId
        {
            get { return _divisionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_divisionId != value)
                    {
                        if (Division != null && Division.Id != value)
                        {
                            Division = null;
                        }
                        _divisionId = value;
        
        				OnPropertyChanged("DivisionId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _divisionId;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (CreatedBy != null && CreatedBy.UserId != value)
                        {
                            CreatedBy = null;
                        }
                        _authorId = value;
        
        				OnPropertyChanged("AuthorId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.DateTime CreatedOn
        {
            get {return _createdOn;}
            set 
    		{ 
    			if(_createdOn != value)
    			{
    				_createdOn = value; 
    				
    				_createdOn = DateTime.SpecifyKind(_createdOn, DateTimeKind.Local);
    
    				OnPropertyChanged("CreatedOn");
    			}
    		}
        }
        private System.DateTime _createdOn;
    
    
    	[DataMember]
        public virtual string BarCode
        {
            get {return _barCode;}
            set 
    		{ 
    			if(_barCode != value)
    			{
    				_barCode = value; 
    				
    				
    
    				OnPropertyChanged("BarCode");
    			}
    		}
        }
        private string _barCode;
    
    
    	[DataMember]
        public virtual decimal Amount
        {
            get {return _amount;}
            set 
    		{ 
    			if(_amount != value)
    			{
    				_amount = value; 
    				
    				
    
    				OnPropertyChanged("Amount");
    			}
    		}
        }
        private decimal _amount;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> UsedOrderId
        {
            get { return _usedOrderId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_usedOrderId != value)
                    {
                        if (UsedInOrder != null && UsedInOrder.Id != value)
                        {
                            UsedInOrder = null;
                        }
                        _usedOrderId = value;
        
        				OnPropertyChanged("UsedOrderId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _usedOrderId;
    
    
    	[DataMember]
        public virtual Nullable<decimal> PriceMoney
        {
            get {return _priceMoney;}
            set 
    		{ 
    			if(_priceMoney != value)
    			{
    				_priceMoney = value; 
    				
    				
    
    				OnPropertyChanged("PriceMoney");
    			}
    		}
        }
        private Nullable<decimal> _priceMoney;
    
    
    	[DataMember]
        public virtual Nullable<int> PriceBonus
        {
            get {return _priceBonus;}
            set 
    		{ 
    			if(_priceBonus != value)
    			{
    				_priceBonus = value; 
    				
    				
    
    				OnPropertyChanged("PriceBonus");
    			}
    		}
        }
        private Nullable<int> _priceBonus;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> BuyerId
        {
            get { return _buyerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_buyerId != value)
                    {
                        if (Customer != null && Customer.Id != value)
                        {
                            Customer = null;
                        }
                        _buyerId = value;
        
        				OnPropertyChanged("BuyerId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _buyerId;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> SellDate
        {
            get {return _sellDate;}
            set 
    		{ 
    			if(_sellDate != value)
    			{
    				_sellDate = value; 
    				
    				if (_sellDate.HasValue) _sellDate = DateTime.SpecifyKind(_sellDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("SellDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _sellDate;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> CategoryId
        {
            get { return _categoryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_categoryId != value)
                    {
                        if (GoodsCategory != null && GoodsCategory.Id != value)
                        {
                            GoodsCategory = null;
                        }
                        _categoryId = value;
        
        				OnPropertyChanged("CategoryId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _categoryId;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual bool IsBonusSell
        {
            get {return _isBonusSell;}
            set 
    		{ 
    			if(_isBonusSell != value)
    			{
    				_isBonusSell = value; 
    				
    				
    
    				OnPropertyChanged("IsBonusSell");
    			}
    		}
        }
        private bool _isBonusSell;
    
    
    	[DataMember]
        public virtual Nullable<System.Guid> SellOrderId
        {
            get { return _sellOrderId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sellOrderId != value)
                    {
                        if (SellBarOrder != null && SellBarOrder.Id != value)
                        {
                            SellBarOrder = null;
                        }
                        _sellOrderId = value;
        
        				OnPropertyChanged("SellOrderId");
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _sellOrderId;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual BarOrder UsedInOrder
        {
            get { return _usedInOrder; }
            set
            {
                if (!ReferenceEquals(_usedInOrder, value))
                {
                    var previousValue = _usedInOrder;
                    _usedInOrder = value;
                    FixupUsedInOrder(previousValue);
                }
            }
        }
        private BarOrder _usedInOrder;
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual Division Division
        {
            get { return _division; }
            set
            {
                if (!ReferenceEquals(_division, value))
                {
                    var previousValue = _division;
                    _division = value;
                    FixupDivision(previousValue);
                }
            }
        }
        private Division _division;
    
        public virtual User CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (!ReferenceEquals(_createdBy, value))
                {
                    var previousValue = _createdBy;
                    _createdBy = value;
                    FixupCreatedBy(previousValue);
                }
            }
        }
        private User _createdBy;
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual ICollection<BarOrder> BarOrders
        {
            get
            {
                if (_barOrders == null)
                {
                    var newCollection = new FixupCollection<BarOrder>();
                    newCollection.CollectionChanged += FixupBarOrders;
                    _barOrders = newCollection;
                }
                return _barOrders;
            }
            set
            {
                if (!ReferenceEquals(_barOrders, value))
                {
                    var previousValue = _barOrders as FixupCollection<BarOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBarOrders;
                    }
                    _barOrders = value;
                    var newValue = value as FixupCollection<BarOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBarOrders;
                    }
    				OnPropertyChanged("BarOrders");
                }
            }
        }
        private ICollection<BarOrder> _barOrders;
    
        public virtual GoodsCategory GoodsCategory
        {
            get { return _goodsCategory; }
            set
            {
                if (!ReferenceEquals(_goodsCategory, value))
                {
                    var previousValue = _goodsCategory;
                    _goodsCategory = value;
                    FixupGoodsCategory(previousValue);
                }
            }
        }
        private GoodsCategory _goodsCategory;
    
        public virtual BarOrder SellBarOrder
        {
            get { return _sellBarOrder; }
            set
            {
                if (!ReferenceEquals(_sellBarOrder, value))
                {
                    var previousValue = _sellBarOrder;
                    _sellBarOrder = value;
                    FixupSellBarOrder(previousValue);
                }
            }
        }
        private BarOrder _sellBarOrder;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUsedInOrder(BarOrder previousValue)
        {
            if (previousValue != null && previousValue.Certificates.Contains(this))
            {
                previousValue.Certificates.Remove(this);
            }
    
            if (UsedInOrder != null)
            {
                if (!UsedInOrder.Certificates.Contains(this))
                {
                    UsedInOrder.Certificates.Add(this);
                }
                if (UsedOrderId != UsedInOrder.Id)
                {
                    UsedOrderId = UsedInOrder.Id;
                }
            }
            else if (!_settingFK)
            {
                UsedOrderId = null;
            }
        }
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Certificates.Contains(this))
            {
                previousValue.Certificates.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Certificates.Contains(this))
                {
                    Company.Certificates.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupDivision(Division previousValue)
        {
            if (previousValue != null && previousValue.Certificates.Contains(this))
            {
                previousValue.Certificates.Remove(this);
            }
    
            if (Division != null)
            {
                if (!Division.Certificates.Contains(this))
                {
                    Division.Certificates.Add(this);
                }
                if (DivisionId != Division.Id)
                {
                    DivisionId = Division.Id;
                }
            }
        }
    
        private void FixupCreatedBy(User previousValue)
        {
            if (previousValue != null && previousValue.Certificates.Contains(this))
            {
                previousValue.Certificates.Remove(this);
            }
    
            if (CreatedBy != null)
            {
                if (!CreatedBy.Certificates.Contains(this))
                {
                    CreatedBy.Certificates.Add(this);
                }
                if (AuthorId != CreatedBy.UserId)
                {
                    AuthorId = CreatedBy.UserId;
                }
            }
        }
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Certificates.Contains(this))
            {
                previousValue.Certificates.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Certificates.Contains(this))
                {
                    Customer.Certificates.Add(this);
                }
                if (BuyerId != Customer.Id)
                {
                    BuyerId = Customer.Id;
                }
            }
            else if (!_settingFK)
            {
                BuyerId = null;
            }
        }
    
        private void FixupGoodsCategory(GoodsCategory previousValue)
        {
            if (previousValue != null && previousValue.Certificates.Contains(this))
            {
                previousValue.Certificates.Remove(this);
            }
    
            if (GoodsCategory != null)
            {
                if (!GoodsCategory.Certificates.Contains(this))
                {
                    GoodsCategory.Certificates.Add(this);
                }
                if (CategoryId != GoodsCategory.Id)
                {
                    CategoryId = GoodsCategory.Id;
                }
            }
            else if (!_settingFK)
            {
                CategoryId = null;
            }
        }
    
        private void FixupSellBarOrder(BarOrder previousValue)
        {
            if (previousValue != null && previousValue.Certificates1.Contains(this))
            {
                previousValue.Certificates1.Remove(this);
            }
    
            if (SellBarOrder != null)
            {
                if (!SellBarOrder.Certificates1.Contains(this))
                {
                    SellBarOrder.Certificates1.Add(this);
                }
                if (SellOrderId != SellBarOrder.Id)
                {
                    SellOrderId = SellBarOrder.Id;
                }
            }
            else if (!_settingFK)
            {
                SellOrderId = null;
            }
        }
    
        private void FixupBarOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BarOrder item in e.NewItems)
                {
                    item.Certificate = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BarOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Certificate, this))
                    {
                        item.Certificate = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
