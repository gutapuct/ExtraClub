//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class AdvertGroup : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value)
    			{
    				_name = value; 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual bool IsActive
        {
            get {return _isActive;}
            set 
    		{ 
    			if(_isActive != value)
    			{
    				_isActive = value; 
    				
    				
    
    				OnPropertyChanged("IsActive");
    			}
    		}
        }
        private bool _isActive;
    
    
    	[DataMember]
        public virtual string NameEn
        {
            get {return _nameEn;}
            set 
    		{ 
    			if(_nameEn != value)
    			{
    				_nameEn = value; 
    				
    				
    
    				OnPropertyChanged("NameEn");
    			}
    		}
        }
        private string _nameEn;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AdvertType> AdvertTypes
        {
            get
            {
                if (_advertTypes == null)
                {
                    var newCollection = new FixupCollection<AdvertType>();
                    newCollection.CollectionChanged += FixupAdvertTypes;
                    _advertTypes = newCollection;
                }
                return _advertTypes;
            }
            set
            {
                if (!ReferenceEquals(_advertTypes, value))
                {
                    var previousValue = _advertTypes as FixupCollection<AdvertType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAdvertTypes;
                    }
                    _advertTypes = value;
                    var newValue = value as FixupCollection<AdvertType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAdvertTypes;
                    }
    				OnPropertyChanged("AdvertTypes");
                }
            }
        }
        private ICollection<AdvertType> _advertTypes;

        #endregion

        #region Association Fixup
    
        private void FixupAdvertTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AdvertType item in e.NewItems)
                {
                    item.AdvertGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AdvertType item in e.OldItems)
                {
                    if (ReferenceEquals(item.AdvertGroup, this))
                    {
                        item.AdvertGroup = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
