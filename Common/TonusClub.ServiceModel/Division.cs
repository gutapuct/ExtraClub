//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TonusClub.ServiceModel
{
    
    [DataContract]
    [Serializable]
    public partial class Division : INotifyPropertyChanged
    {
    	private bool _deleted;
    
    	[DataMember]
    	public bool Deleted {
    		get { return _deleted; }
    		set {
    			if (value != _deleted) Modified = true;
    			_deleted = value;
    		}
    	}
    
    	private bool _modified = false;
    	public bool Modified{
    		get
    		{
    			return _modified;
    		}
    		set
    		{
    			if (_modified != value)
    			{
    				_modified = value;
    				OnPropertyChanged("Modified");
    			}
    		}
    	}
    
    	[OnDeserialized()]
        private void OnDeserializedMethod(StreamingContext context)
        {
            _modified = false;
    		OnDeserialized();
        }
    
    	partial void OnDeserialized();
    
    	partial void OnPropertyChangedInternal(string propertyName);
    
        #region Primitive Properties
    	[DataMember]
        public virtual System.Guid Id
        {
            get {return _id;}
            set 
    		{ 
    			if(_id != value)
    			{
    				_id = value; 
    				
    				
    
    				OnPropertyChanged("Id");
    			}
    		}
        }
        private System.Guid _id;
    
    
    	[DataMember]
        public virtual string Name
        {
            get {return _name;}
            set 
    		{ 
    			if(_name != value && value != null)
    			{
    				_name = value.Replace("\"", ""); 
    				
    				
    
    				OnPropertyChanged("Name");
    			}
    		}
        }
        private string _name;
    
    
    	[DataMember]
        public virtual System.Guid AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    if (User != null && User.UserId != value)
                    {
                        User = null;
                    }
                    _authorId = value;
    
    				OnPropertyChanged("AuthorId");
                }
            }
        }
        private System.Guid _authorId;
    
    
    	[DataMember]
        public virtual System.Guid CompanyId
        {
            get { return _companyId; }
            set
            {
                if (_companyId != value)
                {
                    if (Company != null && Company.CompanyId != value)
                    {
                        Company = null;
                    }
                    _companyId = value;
    
    				OnPropertyChanged("CompanyId");
                }
            }
        }
        private System.Guid _companyId;
    
    
    	[DataMember]
        public virtual string Address
        {
            get {return _address;}
            set 
    		{ 
    			if(_address != value)
    			{
    				_address = value; 
    				
    				
    
    				OnPropertyChanged("Address");
    			}
    		}
        }
        private string _address;
    
    
    	[DataMember]
        public virtual string ShelvesRepository
        {
            get {return _shelvesRepository;}
            set 
    		{ 
    			if(_shelvesRepository != value)
    			{
    				_shelvesRepository = value; 
    				
    				
    
    				OnPropertyChanged("ShelvesRepository");
    			}
    		}
        }
        private string _shelvesRepository;
    
    
    	[DataMember]
        public virtual string SafesRepository
        {
            get {return _safesRepository;}
            set 
    		{ 
    			if(_safesRepository != value)
    			{
    				_safesRepository = value; 
    				
    				
    
    				OnPropertyChanged("SafesRepository");
    			}
    		}
        }
        private string _safesRepository;
    
    
    	[DataMember]
        public virtual decimal SolariumPrice
        {
            get {return _solariumPrice;}
            set 
    		{ 
    			if(_solariumPrice != value)
    			{
    				_solariumPrice = value; 
    				
    				
    
    				OnPropertyChanged("SolariumPrice");
    			}
    		}
        }
        private decimal _solariumPrice;
    
    
    	[DataMember]
        public virtual int MinSolarium
        {
            get {return _minSolarium;}
            set 
    		{ 
    			if(_minSolarium != value)
    			{
    				_minSolarium = value; 
    				
    				
    
    				OnPropertyChanged("MinSolarium");
    			}
    		}
        }
        private int _minSolarium;
    
    
    	[DataMember]
        public virtual int MaxSolarium
        {
            get {return _maxSolarium;}
            set 
    		{ 
    			if(_maxSolarium != value)
    			{
    				_maxSolarium = value; 
    				
    				
    
    				OnPropertyChanged("MaxSolarium");
    			}
    		}
        }
        private int _maxSolarium;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> OpenTime
        {
            get {return _openTime;}
            set 
    		{ 
    			if(_openTime != value)
    			{
    				_openTime = value; 
    				
    				
    
    				OnPropertyChanged("OpenTime");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _openTime;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> CloseTime
        {
            get {return _closeTime;}
            set 
    		{ 
    			if(_closeTime != value)
    			{
    				_closeTime = value; 
    				
    				
    
    				OnPropertyChanged("CloseTime");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _closeTime;
    
    
    	[DataMember]
        public virtual bool RCashRegister
        {
            get {return _rCashRegister;}
            set 
    		{ 
    			if(_rCashRegister != value)
    			{
    				_rCashRegister = value; 
    				
    				
    
    				OnPropertyChanged("RCashRegister");
    			}
    		}
        }
        private bool _rCashRegister;
    
    
    	[DataMember]
        public virtual bool RBankCards
        {
            get {return _rBankCards;}
            set 
    		{ 
    			if(_rBankCards != value)
    			{
    				_rBankCards = value; 
    				
    				
    
    				OnPropertyChanged("RBankCards");
    			}
    		}
        }
        private bool _rBankCards;
    
    
    	[DataMember]
        public virtual bool RCashless
        {
            get {return _rCashless;}
            set 
    		{ 
    			if(_rCashless != value)
    			{
    				_rCashless = value; 
    				
    				
    
    				OnPropertyChanged("RCashless");
    			}
    		}
        }
        private bool _rCashless;
    
    
    	[DataMember]
        public virtual bool RReceiptOnBank
        {
            get {return _rReceiptOnBank;}
            set 
    		{ 
    			if(_rReceiptOnBank != value)
    			{
    				_rReceiptOnBank = value; 
    				
    				
    
    				OnPropertyChanged("RReceiptOnBank");
    			}
    		}
        }
        private bool _rReceiptOnBank;
    
    
    	[DataMember]
        public virtual decimal BankCardReturnComission
        {
            get {return _bankCardReturnComission;}
            set 
    		{ 
    			if(_bankCardReturnComission != value)
    			{
    				_bankCardReturnComission = value; 
    				
    				
    
    				OnPropertyChanged("BankCardReturnComission");
    			}
    		}
        }
        private decimal _bankCardReturnComission;
    
    
    	[DataMember]
        public virtual int WorkGraphNotifyDay
        {
            get {return _workGraphNotifyDay;}
            set 
    		{ 
    			if(_workGraphNotifyDay != value)
    			{
    				_workGraphNotifyDay = value; 
    				
    				
    
    				OnPropertyChanged("WorkGraphNotifyDay");
    			}
    		}
        }
        private int _workGraphNotifyDay;
    
    
    	[DataMember]
        public virtual int InventoryDay
        {
            get {return _inventoryDay;}
            set 
    		{ 
    			if(_inventoryDay != value)
    			{
    				_inventoryDay = value; 
    				
    				
    
    				OnPropertyChanged("InventoryDay");
    			}
    		}
        }
        private int _inventoryDay;
    
    
    	[DataMember]
        public virtual bool IsAvail
        {
            get {return _isAvail;}
            set 
    		{ 
    			if(_isAvail != value)
    			{
    				_isAvail = value; 
    				
    				
    
    				OnPropertyChanged("IsAvail");
    			}
    		}
        }
        private bool _isAvail;
    
    
    	[DataMember]
        public virtual string SyncFailEmail
        {
            get {return _syncFailEmail;}
            set 
    		{ 
    			if(_syncFailEmail != value)
    			{
    				_syncFailEmail = value; 
    				
    				
    
    				OnPropertyChanged("SyncFailEmail");
    			}
    		}
        }
        private string _syncFailEmail;
    
    
    	[DataMember]
        public virtual string ConcessionNumber
        {
            get {return _concessionNumber;}
            set 
    		{ 
    			if(_concessionNumber != value)
    			{
    				_concessionNumber = value; 
    				
    				
    
    				OnPropertyChanged("ConcessionNumber");
    			}
    		}
        }
        private string _concessionNumber;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> ConcessionDate
        {
            get {return _concessionDate;}
            set 
    		{ 
    			if(_concessionDate != value)
    			{
    				_concessionDate = value; 
    				
    				if (_concessionDate.HasValue) _concessionDate = DateTime.SpecifyKind(_concessionDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("ConcessionDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _concessionDate;
    
    
    	[DataMember]
        public virtual string CityName
        {
            get {return _cityName;}
            set 
    		{ 
    			if(_cityName != value)
    			{
    				_cityName = value; 
    				
    				
    
    				OnPropertyChanged("CityName");
    			}
    		}
        }
        private string _cityName;
    
    
    	[DataMember]
        public virtual bool HasSubway
        {
            get {return _hasSubway;}
            set 
    		{ 
    			if(_hasSubway != value)
    			{
    				_hasSubway = value; 
    				
    				
    
    				OnPropertyChanged("HasSubway");
    			}
    		}
        }
        private bool _hasSubway;
    
    
    	[DataMember]
        public virtual string Index
        {
            get {return _index;}
            set 
    		{ 
    			if(_index != value)
    			{
    				_index = value; 
    				
    				
    
    				OnPropertyChanged("Index");
    			}
    		}
        }
        private string _index;
    
    
    	[DataMember]
        public virtual string Street
        {
            get {return _street;}
            set 
    		{ 
    			if(_street != value)
    			{
    				_street = value; 
    				
    				
    
    				OnPropertyChanged("Street");
    			}
    		}
        }
        private string _street;
    
    
    	[DataMember]
        public virtual string Building
        {
            get {return _building;}
            set 
    		{ 
    			if(_building != value)
    			{
    				_building = value; 
    				
    				
    
    				OnPropertyChanged("Building");
    			}
    		}
        }
        private string _building;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> OpenTime2
        {
            get {return _openTime2;}
            set 
    		{ 
    			if(_openTime2 != value)
    			{
    				_openTime2 = value; 
    				
    				
    
    				OnPropertyChanged("OpenTime2");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _openTime2;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> CloseTime2
        {
            get {return _closeTime2;}
            set 
    		{ 
    			if(_closeTime2 != value)
    			{
    				_closeTime2 = value; 
    				
    				
    
    				OnPropertyChanged("CloseTime2");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _closeTime2;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> OpenTime3
        {
            get {return _openTime3;}
            set 
    		{ 
    			if(_openTime3 != value)
    			{
    				_openTime3 = value; 
    				
    				
    
    				OnPropertyChanged("OpenTime3");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _openTime3;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> CloseTime3
        {
            get {return _closeTime3;}
            set 
    		{ 
    			if(_closeTime3 != value)
    			{
    				_closeTime3 = value; 
    				
    				
    
    				OnPropertyChanged("CloseTime3");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _closeTime3;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> OpenTime4
        {
            get {return _openTime4;}
            set 
    		{ 
    			if(_openTime4 != value)
    			{
    				_openTime4 = value; 
    				
    				
    
    				OnPropertyChanged("OpenTime4");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _openTime4;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> CloseTime4
        {
            get {return _closeTime4;}
            set 
    		{ 
    			if(_closeTime4 != value)
    			{
    				_closeTime4 = value; 
    				
    				
    
    				OnPropertyChanged("CloseTime4");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _closeTime4;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> OpenTime5
        {
            get {return _openTime5;}
            set 
    		{ 
    			if(_openTime5 != value)
    			{
    				_openTime5 = value; 
    				
    				
    
    				OnPropertyChanged("OpenTime5");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _openTime5;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> CloseTime5
        {
            get {return _closeTime5;}
            set 
    		{ 
    			if(_closeTime5 != value)
    			{
    				_closeTime5 = value; 
    				
    				
    
    				OnPropertyChanged("CloseTime5");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _closeTime5;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> OpenTime6
        {
            get {return _openTime6;}
            set 
    		{ 
    			if(_openTime6 != value)
    			{
    				_openTime6 = value; 
    				
    				
    
    				OnPropertyChanged("OpenTime6");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _openTime6;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> CloseTime6
        {
            get {return _closeTime6;}
            set 
    		{ 
    			if(_closeTime6 != value)
    			{
    				_closeTime6 = value; 
    				
    				
    
    				OnPropertyChanged("CloseTime6");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _closeTime6;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> OpenTime7
        {
            get {return _openTime7;}
            set 
    		{ 
    			if(_openTime7 != value)
    			{
    				_openTime7 = value; 
    				
    				
    
    				OnPropertyChanged("OpenTime7");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _openTime7;
    
    
    	[DataMember]
        public virtual Nullable<System.TimeSpan> CloseTime7
        {
            get {return _closeTime7;}
            set 
    		{ 
    			if(_closeTime7 != value)
    			{
    				_closeTime7 = value; 
    				
    				
    
    				OnPropertyChanged("CloseTime7");
    			}
    		}
        }
        private Nullable<System.TimeSpan> _closeTime7;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> OpenDate
        {
            get {return _openDate;}
            set 
    		{ 
    			if(_openDate != value)
    			{
    				_openDate = value; 
    				
    				if (_openDate.HasValue) _openDate = DateTime.SpecifyKind(_openDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("OpenDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _openDate;
    
    
    	[DataMember]
        public virtual Nullable<System.DateTime> PresellDate
        {
            get {return _presellDate;}
            set 
    		{ 
    			if(_presellDate != value)
    			{
    				_presellDate = value; 
    				
    				if (_presellDate.HasValue) _presellDate = DateTime.SpecifyKind(_presellDate.Value, DateTimeKind.Local);
    
    				OnPropertyChanged("PresellDate");
    			}
    		}
        }
        private Nullable<System.DateTime> _presellDate;
    
    
    	[DataMember]
        public virtual bool HasChildren
        {
            get {return _hasChildren;}
            set 
    		{ 
    			if(_hasChildren != value)
    			{
    				_hasChildren = value; 
    				
    				
    
    				OnPropertyChanged("HasChildren");
    			}
    		}
        }
        private bool _hasChildren;
    
    
    	[DataMember]
        public virtual int CustomerBirthdayDays
        {
            get {return _customerBirthdayDays;}
            set 
    		{ 
    			if(_customerBirthdayDays != value)
    			{
    				_customerBirthdayDays = value; 
    				
    				
    
    				OnPropertyChanged("CustomerBirthdayDays");
    			}
    		}
        }
        private int _customerBirthdayDays;
    
    
    	[DataMember]
        public virtual string Act
        {
            get {return _act;}
            set 
    		{ 
    			if(_act != value)
    			{
    				_act = value; 
    				
    				
    
    				OnPropertyChanged("Act");
    			}
    		}
        }
        private string _act;
    
    
    	[DataMember]
        public virtual string GeoCoordinates
        {
            get {return _geoCoordinates;}
            set 
    		{ 
    			if(_geoCoordinates != value)
    			{
    				_geoCoordinates = value; 
    				
    				
    
    				OnPropertyChanged("GeoCoordinates");
    			}
    		}
        }
        private string _geoCoordinates;
    
    
    	[DataMember]
        public virtual bool ShowOnSite
        {
            get {return _showOnSite;}
            set 
    		{ 
    			if(_showOnSite != value)
    			{
    				_showOnSite = value; 
    				
    				
    
    				OnPropertyChanged("ShowOnSite");
    			}
    		}
        }
        private bool _showOnSite;
    
    
    	[DataMember]
        public virtual string SitePath
        {
            get {return _sitePath;}
            set 
    		{ 
    			if(_sitePath != value)
    			{
    				_sitePath = value; 
    				
    				
    
    				OnPropertyChanged("SitePath");
    			}
    		}
        }
        private string _sitePath;
    
    
    	[DataMember]
        public virtual decimal MaxCash
        {
            get {return _maxCash;}
            set 
    		{ 
    			if(_maxCash != value)
    			{
    				_maxCash = value; 
    				
    				
    
    				OnPropertyChanged("MaxCash");
    			}
    		}
        }
        private decimal _maxCash;
    
    

        #endregion

        #region Navigation Properties
    
        public virtual Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                }
            }
        }
        private Company _company;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<GoodPrice> GoodPrices
        {
            get
            {
                if (_goodPrices == null)
                {
                    var newCollection = new FixupCollection<GoodPrice>();
                    newCollection.CollectionChanged += FixupGoodPrices;
                    _goodPrices = newCollection;
                }
                return _goodPrices;
            }
            set
            {
                if (!ReferenceEquals(_goodPrices, value))
                {
                    var previousValue = _goodPrices as FixupCollection<GoodPrice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoodPrices;
                    }
                    _goodPrices = value;
                    var newValue = value as FixupCollection<GoodPrice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoodPrices;
                    }
    				OnPropertyChanged("GoodPrices");
                }
            }
        }
        private ICollection<GoodPrice> _goodPrices;

        public virtual ICollection<DivisionStar> DivisionStars
        {
            get
            {
                if (_divisionStars == null)
                {
                    var newCollection = new FixupCollection<DivisionStar>();
                    newCollection.CollectionChanged += FixupDivisionStars;
                    _divisionStars = newCollection;
                }
                return _divisionStars;
            }
            set
            {
                if (!ReferenceEquals(_divisionStars, value))
                {
                    var previousValue = _divisionStars as FixupCollection<DivisionStar>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDivisionStars;
                    }
                    _divisionStars = value;
                    var newValue = value as FixupCollection<DivisionStar>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDivisionStars;
                    }
                    OnPropertyChanged("DivisionStars");
                }
            }
        }
        private ICollection<DivisionStar> _divisionStars;

        public virtual ICollection<BarOrder> BarOrders
        {
            get
            {
                if (_barOrders == null)
                {
                    var newCollection = new FixupCollection<BarOrder>();
                    newCollection.CollectionChanged += FixupBarOrders;
                    _barOrders = newCollection;
                }
                return _barOrders;
            }
            set
            {
                if (!ReferenceEquals(_barOrders, value))
                {
                    var previousValue = _barOrders as FixupCollection<BarOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBarOrders;
                    }
                    _barOrders = value;
                    var newValue = value as FixupCollection<BarOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBarOrders;
                    }
    				OnPropertyChanged("BarOrders");
                }
            }
        }
        private ICollection<BarOrder> _barOrders;
    
        public virtual ICollection<Ticket> Tickets
        {
            get
            {
                if (_tickets == null)
                {
                    var newCollection = new FixupCollection<Ticket>();
                    newCollection.CollectionChanged += FixupTickets;
                    _tickets = newCollection;
                }
                return _tickets;
            }
            set
            {
                if (!ReferenceEquals(_tickets, value))
                {
                    var previousValue = _tickets as FixupCollection<Ticket>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTickets;
                    }
                    _tickets = value;
                    var newValue = value as FixupCollection<Ticket>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTickets;
                    }
    				OnPropertyChanged("Tickets");
                }
            }
        }
        private ICollection<Ticket> _tickets;
    
        public virtual ICollection<Treatment> Treatments
        {
            get
            {
                if (_treatments == null)
                {
                    var newCollection = new FixupCollection<Treatment>();
                    newCollection.CollectionChanged += FixupTreatments;
                    _treatments = newCollection;
                }
                return _treatments;
            }
            set
            {
                if (!ReferenceEquals(_treatments, value))
                {
                    var previousValue = _treatments as FixupCollection<Treatment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatments;
                    }
                    _treatments = value;
                    var newValue = value as FixupCollection<Treatment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatments;
                    }
    				OnPropertyChanged("Treatments");
                }
            }
        }
        private ICollection<Treatment> _treatments;
    
        public virtual ICollection<TreatmentEvent> TreatmentEvents
        {
            get
            {
                if (_treatmentEvents == null)
                {
                    var newCollection = new FixupCollection<TreatmentEvent>();
                    newCollection.CollectionChanged += FixupTreatmentEvents;
                    _treatmentEvents = newCollection;
                }
                return _treatmentEvents;
            }
            set
            {
                if (!ReferenceEquals(_treatmentEvents, value))
                {
                    var previousValue = _treatmentEvents as FixupCollection<TreatmentEvent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTreatmentEvents;
                    }
                    _treatmentEvents = value;
                    var newValue = value as FixupCollection<TreatmentEvent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTreatmentEvents;
                    }
    				OnPropertyChanged("TreatmentEvents");
                }
            }
        }
        private ICollection<TreatmentEvent> _treatmentEvents;
    
        public virtual ICollection<CustomerCard> CustomerCards
        {
            get
            {
                if (_customerCards == null)
                {
                    var newCollection = new FixupCollection<CustomerCard>();
                    newCollection.CollectionChanged += FixupCustomerCards;
                    _customerCards = newCollection;
                }
                return _customerCards;
            }
            set
            {
                if (!ReferenceEquals(_customerCards, value))
                {
                    var previousValue = _customerCards as FixupCollection<CustomerCard>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerCards;
                    }
                    _customerCards = value;
                    var newValue = value as FixupCollection<CustomerCard>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerCards;
                    }
    				OnPropertyChanged("CustomerCards");
                }
            }
        }
        private ICollection<CustomerCard> _customerCards;
    
        public virtual ICollection<CustomerVisit> CustomerVisits
        {
            get
            {
                if (_customerVisits == null)
                {
                    var newCollection = new FixupCollection<CustomerVisit>();
                    newCollection.CollectionChanged += FixupCustomerVisits;
                    _customerVisits = newCollection;
                }
                return _customerVisits;
            }
            set
            {
                if (!ReferenceEquals(_customerVisits, value))
                {
                    var previousValue = _customerVisits as FixupCollection<CustomerVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerVisits;
                    }
                    _customerVisits = value;
                    var newValue = value as FixupCollection<CustomerVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerVisits;
                    }
    				OnPropertyChanged("CustomerVisits");
                }
            }
        }
        private ICollection<CustomerVisit> _customerVisits;
    
        public virtual ICollection<ChildrenRoom> ChildrenRooms
        {
            get
            {
                if (_childrenRooms == null)
                {
                    var newCollection = new FixupCollection<ChildrenRoom>();
                    newCollection.CollectionChanged += FixupChildrenRooms;
                    _childrenRooms = newCollection;
                }
                return _childrenRooms;
            }
            set
            {
                if (!ReferenceEquals(_childrenRooms, value))
                {
                    var previousValue = _childrenRooms as FixupCollection<ChildrenRoom>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildrenRooms;
                    }
                    _childrenRooms = value;
                    var newValue = value as FixupCollection<ChildrenRoom>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildrenRooms;
                    }
    				OnPropertyChanged("ChildrenRooms");
                }
            }
        }
        private ICollection<ChildrenRoom> _childrenRooms;
    
        public virtual ICollection<CustomerShelf> CustomerShelves
        {
            get
            {
                if (_customerShelves == null)
                {
                    var newCollection = new FixupCollection<CustomerShelf>();
                    newCollection.CollectionChanged += FixupCustomerShelves;
                    _customerShelves = newCollection;
                }
                return _customerShelves;
            }
            set
            {
                if (!ReferenceEquals(_customerShelves, value))
                {
                    var previousValue = _customerShelves as FixupCollection<CustomerShelf>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerShelves;
                    }
                    _customerShelves = value;
                    var newValue = value as FixupCollection<CustomerShelf>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerShelves;
                    }
    				OnPropertyChanged("CustomerShelves");
                }
            }
        }
        private ICollection<CustomerShelf> _customerShelves;
    
        public virtual ICollection<Solarium> Solariums
        {
            get
            {
                if (_solariums == null)
                {
                    var newCollection = new FixupCollection<Solarium>();
                    newCollection.CollectionChanged += FixupSolariums;
                    _solariums = newCollection;
                }
                return _solariums;
            }
            set
            {
                if (!ReferenceEquals(_solariums, value))
                {
                    var previousValue = _solariums as FixupCollection<Solarium>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolariums;
                    }
                    _solariums = value;
                    var newValue = value as FixupCollection<Solarium>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolariums;
                    }
    				OnPropertyChanged("Solariums");
                }
            }
        }
        private ICollection<Solarium> _solariums;
    
        public virtual ICollection<SolariumVisit> SolariumVisits
        {
            get
            {
                if (_solariumVisits == null)
                {
                    var newCollection = new FixupCollection<SolariumVisit>();
                    newCollection.CollectionChanged += FixupSolariumVisits;
                    _solariumVisits = newCollection;
                }
                return _solariumVisits;
            }
            set
            {
                if (!ReferenceEquals(_solariumVisits, value))
                {
                    var previousValue = _solariumVisits as FixupCollection<SolariumVisit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSolariumVisits;
                    }
                    _solariumVisits = value;
                    var newValue = value as FixupCollection<SolariumVisit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSolariumVisits;
                    }
    				OnPropertyChanged("SolariumVisits");
                }
            }
        }
        private ICollection<SolariumVisit> _solariumVisits;
    
        public virtual ICollection<Storehouse> Storehouses
        {
            get
            {
                if (_storehouses == null)
                {
                    var newCollection = new FixupCollection<Storehouse>();
                    newCollection.CollectionChanged += FixupStorehouses;
                    _storehouses = newCollection;
                }
                return _storehouses;
            }
            set
            {
                if (!ReferenceEquals(_storehouses, value))
                {
                    var previousValue = _storehouses as FixupCollection<Storehouse>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStorehouses;
                    }
                    _storehouses = value;
                    var newValue = value as FixupCollection<Storehouse>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStorehouses;
                    }
    				OnPropertyChanged("Storehouses");
                }
            }
        }
        private ICollection<Storehouse> _storehouses;
    
        public virtual ICollection<Certificate> Certificates
        {
            get
            {
                if (_certificates == null)
                {
                    var newCollection = new FixupCollection<Certificate>();
                    newCollection.CollectionChanged += FixupCertificates;
                    _certificates = newCollection;
                }
                return _certificates;
            }
            set
            {
                if (!ReferenceEquals(_certificates, value))
                {
                    var previousValue = _certificates as FixupCollection<Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificates;
                    }
                    _certificates = value;
                    var newValue = value as FixupCollection<Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificates;
                    }
    				OnPropertyChanged("Certificates");
                }
            }
        }
        private ICollection<Certificate> _certificates;
    
        public virtual ICollection<SpendingType> SpendingTypes
        {
            get
            {
                if (_spendingTypes == null)
                {
                    var newCollection = new FixupCollection<SpendingType>();
                    newCollection.CollectionChanged += FixupSpendingTypes;
                    _spendingTypes = newCollection;
                }
                return _spendingTypes;
            }
            set
            {
                if (!ReferenceEquals(_spendingTypes, value))
                {
                    var previousValue = _spendingTypes as FixupCollection<SpendingType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpendingTypes;
                    }
                    _spendingTypes = value;
                    var newValue = value as FixupCollection<SpendingType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpendingTypes;
                    }
    				OnPropertyChanged("SpendingTypes");
                }
            }
        }
        private ICollection<SpendingType> _spendingTypes;
    
        public virtual ICollection<Spending> Spendings
        {
            get
            {
                if (_spendings == null)
                {
                    var newCollection = new FixupCollection<Spending>();
                    newCollection.CollectionChanged += FixupSpendings;
                    _spendings = newCollection;
                }
                return _spendings;
            }
            set
            {
                if (!ReferenceEquals(_spendings, value))
                {
                    var previousValue = _spendings as FixupCollection<Spending>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpendings;
                    }
                    _spendings = value;
                    var newValue = value as FixupCollection<Spending>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpendings;
                    }
    				OnPropertyChanged("Spendings");
                }
            }
        }
        private ICollection<Spending> _spendings;
    
        public virtual ICollection<Job> Jobs
        {
            get
            {
                if (_jobs == null)
                {
                    var newCollection = new FixupCollection<Job>();
                    newCollection.CollectionChanged += FixupJobs;
                    _jobs = newCollection;
                }
                return _jobs;
            }
            set
            {
                if (!ReferenceEquals(_jobs, value))
                {
                    var previousValue = _jobs as FixupCollection<Job>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobs;
                    }
                    _jobs = value;
                    var newValue = value as FixupCollection<Job>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobs;
                    }
    				OnPropertyChanged("Jobs");
                }
            }
        }
        private ICollection<Job> _jobs;
    
        public virtual ICollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    var newCollection = new FixupCollection<Employee>();
                    newCollection.CollectionChanged += FixupEmployees;
                    _employees = newCollection;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees as FixupCollection<Employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployees;
                    }
                    _employees = value;
                    var newValue = value as FixupCollection<Employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployees;
                    }
    				OnPropertyChanged("Employees");
                }
            }
        }
        private ICollection<Employee> _employees;
    
        public virtual ICollection<VacationList> VacationLists
        {
            get
            {
                if (_vacationLists == null)
                {
                    var newCollection = new FixupCollection<VacationList>();
                    newCollection.CollectionChanged += FixupVacationLists;
                    _vacationLists = newCollection;
                }
                return _vacationLists;
            }
            set
            {
                if (!ReferenceEquals(_vacationLists, value))
                {
                    var previousValue = _vacationLists as FixupCollection<VacationList>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupVacationLists;
                    }
                    _vacationLists = value;
                    var newValue = value as FixupCollection<VacationList>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupVacationLists;
                    }
    				OnPropertyChanged("VacationLists");
                }
            }
        }
        private ICollection<VacationList> _vacationLists;
    
        public virtual ICollection<EmployeeWorkGraph> EmployeeWorkGraphs
        {
            get
            {
                if (_employeeWorkGraphs == null)
                {
                    var newCollection = new FixupCollection<EmployeeWorkGraph>();
                    newCollection.CollectionChanged += FixupEmployeeWorkGraphs;
                    _employeeWorkGraphs = newCollection;
                }
                return _employeeWorkGraphs;
            }
            set
            {
                if (!ReferenceEquals(_employeeWorkGraphs, value))
                {
                    var previousValue = _employeeWorkGraphs as FixupCollection<EmployeeWorkGraph>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeWorkGraphs;
                    }
                    _employeeWorkGraphs = value;
                    var newValue = value as FixupCollection<EmployeeWorkGraph>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeWorkGraphs;
                    }
    				OnPropertyChanged("EmployeeWorkGraphs");
                }
            }
        }
        private ICollection<EmployeeWorkGraph> _employeeWorkGraphs;
    
        public virtual ICollection<SalaryScheme> SalarySchemes
        {
            get
            {
                if (_salarySchemes == null)
                {
                    var newCollection = new FixupCollection<SalaryScheme>();
                    newCollection.CollectionChanged += FixupSalarySchemes;
                    _salarySchemes = newCollection;
                }
                return _salarySchemes;
            }
            set
            {
                if (!ReferenceEquals(_salarySchemes, value))
                {
                    var previousValue = _salarySchemes as FixupCollection<SalaryScheme>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalarySchemes;
                    }
                    _salarySchemes = value;
                    var newValue = value as FixupCollection<SalaryScheme>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalarySchemes;
                    }
    				OnPropertyChanged("SalarySchemes");
                }
            }
        }
        private ICollection<SalaryScheme> _salarySchemes;
    
        public virtual ICollection<SalarySheet> SalarySheets
        {
            get
            {
                if (_salarySheets == null)
                {
                    var newCollection = new FixupCollection<SalarySheet>();
                    newCollection.CollectionChanged += FixupSalarySheets;
                    _salarySheets = newCollection;
                }
                return _salarySheets;
            }
            set
            {
                if (!ReferenceEquals(_salarySheets, value))
                {
                    var previousValue = _salarySheets as FixupCollection<SalarySheet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalarySheets;
                    }
                    _salarySheets = value;
                    var newValue = value as FixupCollection<SalarySheet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalarySheets;
                    }
    				OnPropertyChanged("SalarySheets");
                }
            }
        }
        private ICollection<SalarySheet> _salarySheets;
    
        public virtual ICollection<File> Files
        {
            get
            {
                if (_files == null)
                {
                    var newCollection = new FixupCollection<File>();
                    newCollection.CollectionChanged += FixupFiles;
                    _files = newCollection;
                }
                return _files;
            }
            set
            {
                if (!ReferenceEquals(_files, value))
                {
                    var previousValue = _files as FixupCollection<File>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFiles;
                    }
                    _files = value;
                    var newValue = value as FixupCollection<File>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFiles;
                    }
    				OnPropertyChanged("Files");
                }
            }
        }
        private ICollection<File> _files;
    
        public virtual ICollection<SalesPlan> SalesPlans
        {
            get
            {
                if (_salesPlans == null)
                {
                    var newCollection = new FixupCollection<SalesPlan>();
                    newCollection.CollectionChanged += FixupSalesPlans;
                    _salesPlans = newCollection;
                }
                return _salesPlans;
            }
            set
            {
                if (!ReferenceEquals(_salesPlans, value))
                {
                    var previousValue = _salesPlans as FixupCollection<SalesPlan>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalesPlans;
                    }
                    _salesPlans = value;
                    var newValue = value as FixupCollection<SalesPlan>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalesPlans;
                    }
    				OnPropertyChanged("SalesPlans");
                }
            }
        }
        private ICollection<SalesPlan> _salesPlans;
    
        public virtual ICollection<Call> Calls
        {
            get
            {
                if (_calls == null)
                {
                    var newCollection = new FixupCollection<Call>();
                    newCollection.CollectionChanged += FixupCalls;
                    _calls = newCollection;
                }
                return _calls;
            }
            set
            {
                if (!ReferenceEquals(_calls, value))
                {
                    var previousValue = _calls as FixupCollection<Call>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCalls;
                    }
                    _calls = value;
                    var newValue = value as FixupCollection<Call>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCalls;
                    }
    				OnPropertyChanged("Calls");
                }
            }
        }
        private ICollection<Call> _calls;
    
        public virtual ICollection<DivisionFinance> DivisionFinances
        {
            get
            {
                if (_divisionFinances == null)
                {
                    var newCollection = new FixupCollection<DivisionFinance>();
                    newCollection.CollectionChanged += FixupDivisionFinances;
                    _divisionFinances = newCollection;
                }
                return _divisionFinances;
            }
            set
            {
                if (!ReferenceEquals(_divisionFinances, value))
                {
                    var previousValue = _divisionFinances as FixupCollection<DivisionFinance>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDivisionFinances;
                    }
                    _divisionFinances = value;
                    var newValue = value as FixupCollection<DivisionFinance>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDivisionFinances;
                    }
    				OnPropertyChanged("DivisionFinances");
                }
            }
        }
        private ICollection<DivisionFinance> _divisionFinances;
    
        public virtual ICollection<Income> Incomes
        {
            get
            {
                if (_incomes == null)
                {
                    var newCollection = new FixupCollection<Income>();
                    newCollection.CollectionChanged += FixupIncomes;
                    _incomes = newCollection;
                }
                return _incomes;
            }
            set
            {
                if (!ReferenceEquals(_incomes, value))
                {
                    var previousValue = _incomes as FixupCollection<Income>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncomes;
                    }
                    _incomes = value;
                    var newValue = value as FixupCollection<Income>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncomes;
                    }
    				OnPropertyChanged("Incomes");
                }
            }
        }
        private ICollection<Income> _incomes;
    
        public virtual ICollection<IncomeType> IncomeTypes
        {
            get
            {
                if (_incomeTypes == null)
                {
                    var newCollection = new FixupCollection<IncomeType>();
                    newCollection.CollectionChanged += FixupIncomeTypes;
                    _incomeTypes = newCollection;
                }
                return _incomeTypes;
            }
            set
            {
                if (!ReferenceEquals(_incomeTypes, value))
                {
                    var previousValue = _incomeTypes as FixupCollection<IncomeType>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIncomeTypes;
                    }
                    _incomeTypes = value;
                    var newValue = value as FixupCollection<IncomeType>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIncomeTypes;
                    }
    				OnPropertyChanged("IncomeTypes");
                }
            }
        }
        private ICollection<IncomeType> _incomeTypes;
    
        public virtual ICollection<TextAction> TextActions1
        {
            get
            {
                if (_textActions1 == null)
                {
                    var newCollection = new FixupCollection<TextAction>();
                    newCollection.CollectionChanged += FixupTextActions1;
                    _textActions1 = newCollection;
                }
                return _textActions1;
            }
            set
            {
                if (!ReferenceEquals(_textActions1, value))
                {
                    var previousValue = _textActions1 as FixupCollection<TextAction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTextActions1;
                    }
                    _textActions1 = value;
                    var newValue = value as FixupCollection<TextAction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTextActions1;
                    }
    				OnPropertyChanged("TextActions1");
                }
            }
        }
        private ICollection<TextAction> _textActions1;
    
        public virtual ICollection<CashInOrder> CashInOrders
        {
            get
            {
                if (_cashInOrders == null)
                {
                    var newCollection = new FixupCollection<CashInOrder>();
                    newCollection.CollectionChanged += FixupCashInOrders;
                    _cashInOrders = newCollection;
                }
                return _cashInOrders;
            }
            set
            {
                if (!ReferenceEquals(_cashInOrders, value))
                {
                    var previousValue = _cashInOrders as FixupCollection<CashInOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCashInOrders;
                    }
                    _cashInOrders = value;
                    var newValue = value as FixupCollection<CashInOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCashInOrders;
                    }
    				OnPropertyChanged("CashInOrders");
                }
            }
        }
        private ICollection<CashInOrder> _cashInOrders;
    
        public virtual ICollection<CashOutOrder> CashOutOrders
        {
            get
            {
                if (_cashOutOrders == null)
                {
                    var newCollection = new FixupCollection<CashOutOrder>();
                    newCollection.CollectionChanged += FixupCashOutOrders;
                    _cashOutOrders = newCollection;
                }
                return _cashOutOrders;
            }
            set
            {
                if (!ReferenceEquals(_cashOutOrders, value))
                {
                    var previousValue = _cashOutOrders as FixupCollection<CashOutOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCashOutOrders;
                    }
                    _cashOutOrders = value;
                    var newValue = value as FixupCollection<CashOutOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCashOutOrders;
                    }
    				OnPropertyChanged("CashOutOrders");
                }
            }
        }
        private ICollection<CashOutOrder> _cashOutOrders;

        #endregion

        #region Association Fixup
    
        private void FixupCompany(Company previousValue)
        {
            if (previousValue != null && previousValue.Divisions.Contains(this))
            {
                previousValue.Divisions.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Divisions.Contains(this))
                {
                    Company.Divisions.Add(this);
                }
                if (CompanyId != Company.CompanyId)
                {
                    CompanyId = Company.CompanyId;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (User != null)
            {
                if (AuthorId != User.UserId)
                {
                    AuthorId = User.UserId;
                }
            }
        }
    
        private void FixupGoodPrices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GoodPrice item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodPrice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupBarOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BarOrder item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BarOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupTickets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Ticket item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Ticket item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupTreatments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Treatment item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Treatment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupTreatmentEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TreatmentEvent item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TreatmentEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupCustomerCards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerCard item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerCard item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupCustomerVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerVisit item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupChildrenRooms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ChildrenRoom item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChildrenRoom item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupCustomerShelves(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerShelf item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerShelf item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupSolariums(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Solarium item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Solarium item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupSolariumVisits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SolariumVisit item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SolariumVisit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupStorehouses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Storehouse item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Storehouse item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupCertificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupSpendingTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SpendingType item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpendingType item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupSpendings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Spending item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Spending item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }

        private void FixupDivisionStars(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DivisionStar item in e.NewItems)
                {
                    item.Division = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (DivisionStar item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }

        private void FixupJobs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Job item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Job item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.MainDivision = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.MainDivision, this))
                    {
                        item.MainDivision = null;
                    }
                }
            }
        }
    
        private void FixupVacationLists(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (VacationList item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VacationList item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeWorkGraphs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeWorkGraph item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeWorkGraph item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupSalarySchemes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalaryScheme item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalaryScheme item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupSalarySheets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalarySheet item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalarySheet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupFiles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (File item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (File item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupSalesPlans(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalesPlan item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalesPlan item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupCalls(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Call item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Call item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupDivisionFinances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DivisionFinance item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DivisionFinance item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupIncomes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Income item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Income item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupIncomeTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IncomeType item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncomeType item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupTextActions1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TextAction item in e.NewItems)
                {
                    if (!item.Divisions.Contains(this))
                    {
                        item.Divisions.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TextAction item in e.OldItems)
                {
                    if (item.Divisions.Contains(this))
                    {
                        item.Divisions.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCashInOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CashInOrder item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CashInOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }
    
        private void FixupCashOutOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CashOutOrder item in e.NewItems)
                {
                    item.Division = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CashOutOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Division, this))
                    {
                        item.Division = null;
                    }
                }
            }
        }

        #endregion

    
    	public event PropertyChangedEventHandler PropertyChanged;
    
    	protected void OnPropertyChanged(string propertyName)
        {
    		Modified = true;
    
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		
    		OnPropertyChangedInternal(propertyName);
        }
    }
}
